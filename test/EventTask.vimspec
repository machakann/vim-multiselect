Describe EventTask
	Before
		let Schedule = multiselect#Schedule#_import()
		let EventTask = Schedule.EventTask
	End

	Context .trigger()
		It triggers all registered functions and commands
			let g:count = 0
			let eventtask = EventTask()

			call eventtask.execute('let g:count += 1').trigger()
			Assert Equals(g:count, 1)

			call eventtask.execute('let g:count += 2').trigger()
			Assert Equals(g:count, 4)

			unlet! g:count
			call eventtask.stop()
		End

		It is skipped if skipcount is set
			let g:count = 0
			let eventtask = EventTask()
			call eventtask.execute('let g:count += 1')

			call eventtask.trigger()
			Assert Equals(g:count, 1)

			call eventtask.skip(1)
			call eventtask.trigger()
			Assert Equals(g:count, 1)
			call eventtask.trigger()
			Assert Equals(g:count, 2)

			unlet! g:count
			call eventtask.stop()
		End

		It is repeated n-times given by .repeat()
			let g:count = 0
			let eventtask = EventTask()
			call eventtask.execute('let g:count += 1')

			call eventtask.repeat(1)
			Assert Equals(eventtask.leftcount(), 1)
			Assert False(eventtask.hasdone())
			call eventtask.trigger()
			Assert Equals(eventtask.leftcount(), 0)
			Assert True(eventtask.hasdone())

			call eventtask.repeat(3)
			Assert Equals(eventtask.leftcount(), 3)
			Assert False(eventtask.hasdone())
			call eventtask.trigger() " first
			Assert Equals(eventtask.leftcount(), 2)
			Assert False(eventtask.hasdone())
			call eventtask.trigger() " second
			Assert Equals(eventtask.leftcount(), 1)
			Assert False(eventtask.hasdone())
			call eventtask.trigger() " third
			Assert Equals(eventtask.leftcount(), 0)
			Assert True(eventtask.hasdone())

			unlet! g:count
			call eventtask.stop()
		End
	End

	Context class
		It is triggered by an autocmd event
			let g:count = 0
			let eventtask = EventTask()

			call eventtask.execute('let g:count += 1').repeat(3).skip(1)

			Assert False(exists('#multiselect#WinEnter'))
			call eventtask.start('WinEnter')
			Assert True(exists('#multiselect#WinEnter'))

			doautocmd <nomodeline> multiselect WinEnter
			Assert Equals(g:count, 0)

			doautocmd <nomodeline> multiselect WinEnter
			Assert Equals(g:count, 1)

			call eventtask._off()
			doautocmd <nomodeline> multiselect WinEnter
			Assert Equals(g:count, 1)

			call eventtask._on()
			doautocmd <nomodeline> multiselect WinEnter
			Assert Equals(g:count, 2)

			doautocmd <nomodeline> multiselect WinEnter
			Assert Equals(g:count, 3)

			doautocmd <nomodeline> multiselect WinEnter
			Assert Equals(g:count, 3)

			unlet! g:count

			call eventtask.stop()
			Assert False(exists('#multiselect#WinEnter'))
		End

		It is triggered by an User autocmd event
			let g:count = 0
			let eventtask = EventTask()

			call eventtask.execute('let g:count += 1').repeat(3).skip(1)

			Assert False(exists('#multiselect#User#TestEvent'))
			call eventtask.start('TestEvent')
			Assert True(exists('#multiselect#User#TestEvent'))

			doautocmd <nomodeline> User TestEvent
			Assert Equals(g:count, 0)

			doautocmd <nomodeline> User TestEvent
			Assert Equals(g:count, 1)

			call eventtask._off()
			doautocmd <nomodeline> User TestEvent
			Assert Equals(g:count, 1)

			call eventtask._on()
			doautocmd <nomodeline> User TestEvent
			Assert Equals(g:count, 2)

			doautocmd <nomodeline> User TestEvent
			Assert Equals(g:count, 3)
			Assert False(exists('#multiselect#User#TestEvent'))

			unlet! g:count
			call eventtask.stop()
		End
	End
End

" vim:set noet ts=4 sw=4 sts=-1:
