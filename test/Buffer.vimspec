Describe Region
	Before
		let Region = g:MS.Region
		%delete
		call append(0, [
			\ 'aaaaaaa',
			\ 'bbbbbbb',
			\ 'ccccccc',
			\ 'ddddddd',
			\ 'eeeeeee',
			\ ])
		$delete
	End

	Context class constructor
		It can construct a characterwise-instance
			let head = [0, 1, 1, 0]
			let tail = [0, 1, 7, 0]
			let region = Region(head, tail, 'char')
			Assert Equals(region.type, 'char')
			Assert Equals(region.head, head)
			Assert Equals(region.tail, tail)
			Assert NotSame(region.head, head)
			Assert NotSame(region.tail, tail)

			let head = [0, 1, 1, 0]
			let tail = [0, 1, 7, 0]
			let region = Region(head, tail, 'v')
			Assert Equals(region.type, 'char')
			Assert Equals(region.head, head)
			Assert Equals(region.tail, tail)
			Assert NotSame(region.head, head)
			Assert NotSame(region.tail, tail)

			let pos = [0, 1, 1, 0]
			let region = Region(pos)
			Assert Equals(region.type, 'char')
			Assert Equals(region.head, pos)
			Assert Equals(region.tail, pos)
			Assert NotSame(region.head, pos)
			Assert NotSame(region.tail, pos)
		End

		It can construct a linewise-instance
			let head = [0, 1, 1, 0]
			let tail = [0, 1, 7, 0]
			let region = Region(head, tail, 'line')
			Assert Equals(region.type, 'line')
			Assert Equals(region.head[1], head[1])
			Assert Equals(region.tail[1], tail[1])
			Assert NotSame(region.head, head)
			Assert NotSame(region.tail, tail)

			let head = [0, 1, 1, 0]
			let tail = [0, 1, 7, 0]
			let region = Region(head, tail, 'V')
			Assert Equals(region.type, 'line')
			Assert Equals(region.head[1], head[1])
			Assert Equals(region.tail[1], tail[1])
			Assert NotSame(region.head, head)
			Assert NotSame(region.tail, tail)

			let lnum = 1
			let region = Region(lnum)
			Assert Equals(region.type, 'line')
			Assert Equals(region.head[1], lnum)
			Assert Equals(region.tail[1], lnum)

			let startlnum = 1
			let endlnum = 2
			let region = Region(startlnum, endlnum)
			Assert Equals(region.type, 'line')
			Assert Equals(region.head[1], startlnum)
			Assert Equals(region.tail[1], endlnum)
		End

		It can construct a blockwise-instance
			let head = [0, 1, 1, 0]
			let tail = [0, 1, 7, 0]
			let region = Region(head, tail, 'block')
			Assert Equals(region.type, 'block')
			Assert Equals(region.head, head)
			Assert Equals(region.tail, tail)
			Assert NotSame(region.head, head)
			Assert NotSame(region.tail, tail)

			let head = [0, 1, 1, 0]
			let tail = [0, 1, 7, 0]
			let region = Region(head, tail, "\<C-v>")
			Assert Equals(region.type, 'block')
			Assert Equals(region.head, head)
			Assert Equals(region.tail, tail)
			Assert NotSame(region.head, head)
			Assert NotSame(region.tail, tail)

			let head = [0, 1, 1, 0]
			let tail = [0, 1, 7, 0]
			let region = Region(head, tail, "\<C-v>", 1)
			Assert True(region.extended)
		End

		It throws an exception with inappropriate arguments
			Throws /^Vim(echoerr):multiselect: Invalid argument for Region()/ Region({})
			Throws /^Vim(echoerr):multiselect: Invalid argument for Region()/ Region('')
			Throws /^Vim(echoerr):multiselect: Invalid argument for Region()/ Region(1, [0, 1, 1, 0])
			Throws /^Vim(echoerr):multiselect: Invalid argument for Region()/ Region([0, 1, 1, 0], 1)
		End
	End

	Context .includes(head, tail, ...)
		It returns TRUE if itself is including a region
			" a characterwise region includes a characterwise region
			Assert True(Region([0, 1, 1, 0], [0, 2, 4, 0], 'v').includes([0, 1, 1, 0], [0, 1, 3, 0], 'v'))
			Assert True(Region([0, 4, 4, 0], [0, 5, 7, 0], 'v').includes([0, 5, 5, 0], [0, 5, 7, 0], 'v'))
			Assert True(Region([0, 1, 1, 0], [0, 5, 7, 0], 'v').includes([0, 1, 1, 0], [0, 5, 7, 0], 'v'))
			Assert True(Region([0, 1, 1, 0], [0, 5, 7, 0], 'v').includes([0, 3, 3, 0], [0, 3, 3, 0], 'v'))
			Assert True(Region([0, 3, 3, 0], [0, 3, 3, 0], 'v').includes([0, 3, 3, 0], [0, 3, 3, 0], 'v'))
			Assert True(Region([0, 3, 3, 0], [0, 3, 3, 0], 'v').includes([0, 3, 3, 0], [0, 3, 3, 0], 'v'))

			" a characterwise region includes a linewise region
			Assert True(Region([0, 1, 1, 0], [0, 2, 1, 0], 'v').includes([0, 1, 4, 0], [0, 1, 4, 0], 'V'))
			Assert True(Region([0, 1, 1, 0], [0, 1, 8, 0], 'v').includes([0, 1, 1, 0], [0, 1, 1, 0], 'V'))
			Assert True(Region([0, 1, 1, 0], [0, 3, 1, 0], 'v').includes([0, 2, 1, 0], [0, 2, 1, 0], 'V'))

			" a characterwise region includes a blockwise region
			Assert True(Region([0, 2, 3, 0], [0, 4, 5, 0], 'v').includes([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert True(Region([0, 2, 3, 0], [0, 4, 5, 0], 'v').includes([0, 2, 3, 0], [0, 3, 5, 0], "\<C-v>"))
			Assert True(Region([0, 2, 3, 0], [0, 4, 5, 0], 'v').includes([0, 3, 1, 0], [0, 4, 2, 0], "\<C-v>"))
			Assert True(Region([0, 2, 3, 0], [0, 4, 5, 0], 'v').includes([0, 2, 3, 0], [0, 3, 5, 0], "\<C-v>"))
			Assert True(Region([0, 2, 3, 0], [0, 4, 5, 0], 'v').includes([0, 3, 3, 0], [0, 4, 5, 0], "\<C-v>"))

			" a linewise region includes a characterwise region
			Assert True(Region([0, 2, 1, 0], [0, 2, 1, 0], 'V').includes([0, 2, 3, 0], [0, 2, 5, 0], 'v'))
			Assert True(Region([0, 2, 1, 0], [0, 2, 1, 0], 'V').includes([0, 2, 1, 0], [0, 2, 8, 0], 'v'))
			Assert True(Region([0, 2, 1, 0], [0, 4, 1, 0], 'V').includes([0, 2, 3, 0], [0, 4, 5, 0], 'v'))
			Assert True(Region([0, 2, 1, 0], [0, 4, 1, 0], 'V').includes([0, 3, 3, 0], [0, 3, 5, 0], 'v'))
			Assert True(Region([0, 2, 1, 0], [0, 4, 1, 0], 'V').includes([0, 4, 3, 0], [0, 4, 5, 0], 'v'))
			Assert True(Region([0, 2, 1, 0], [0, 4, 1, 0], 'V').includes([0, 2, 1, 0], [0, 4, 8, 0], 'v'))

			" a linewise region includes a linewise region
			Assert True(Region([0, 3, 1, 0], [0, 3, 1, 0], 'V').includes([0, 3, 1, 0], [0, 3, 1, 0], 'V'))
			Assert True(Region([0, 2, 1, 0], [0, 4, 1, 0], 'V').includes([0, 2, 1, 0], [0, 2, 1, 0], 'V'))
			Assert True(Region([0, 2, 1, 0], [0, 4, 1, 0], 'V').includes([0, 3, 1, 0], [0, 3, 1, 0], 'V'))
			Assert True(Region([0, 2, 1, 0], [0, 4, 1, 0], 'V').includes([0, 2, 1, 0], [0, 4, 1, 0], 'V'))

			" a linewise region includes a blockwise region
			Assert True(Region([0, 2, 1, 0], [0, 2, 1, 0], 'V').includes([0, 2, 3, 0], [0, 2, 5, 0], "\<C-v>"))
			Assert True(Region([0, 2, 1, 0], [0, 4, 1, 0], 'V').includes([0, 2, 1, 0], [0, 4, 7, 0], "\<C-v>"))
			Assert True(Region([0, 2, 1, 0], [0, 4, 1, 0], 'V').includes([0, 2, 1, 0], [0, 3, 3, 0], "\<C-v>"))
			Assert True(Region([0, 2, 1, 0], [0, 4, 1, 0], 'V').includes([0, 2, 5, 0], [0, 3, 7, 0], "\<C-v>"))
			Assert True(Region([0, 2, 1, 0], [0, 4, 1, 0], 'V').includes([0, 3, 1, 0], [0, 4, 3, 0], "\<C-v>"))
			Assert True(Region([0, 2, 1, 0], [0, 4, 1, 0], 'V').includes([0, 3, 5, 0], [0, 4, 7, 0], "\<C-v>"))
			Assert True(Region([0, 2, 1, 0], [0, 4, 1, 0], 'V').includes([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))

			" a blockwise region includes a characterwise region
			Assert True(Region([0, 3, 1, 0], [0, 3, 7, 0], "\<C-v>").includes([0, 3, 3, 0], [0, 3, 5, 0], 'v'))
			Assert True(Region([0, 3, 3, 0], [0, 3, 5, 0], "\<C-v>").includes([0, 3, 3, 0], [0, 3, 5, 0], 'v'))
			Assert True(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes([0, 2, 3, 0], [0, 2, 5, 0], 'v'))
			Assert True(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes([0, 3, 3, 0], [0, 3, 5, 0], 'v'))
			Assert True(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes([0, 4, 3, 0], [0, 4, 5, 0], 'v'))
			Assert True(Region([0, 2, 1, 0], [0, 4, 8, 0], "\<C-v>").includes([0, 2, 3, 0], [0, 4, 5, 0], 'v'))

			" a blockwise region includes a linewise region
			Assert True(Region([0, 3, 1, 0], [0, 3, 8, 0], "\<C-v>").includes([0, 3, 1, 0], [0, 3, 1, 0], 'V'))
			Assert True(Region([0, 2, 1, 0], [0, 4, 8, 0], "\<C-v>").includes([0, 2, 1, 0], [0, 2, 1, 0], 'V'))
			Assert True(Region([0, 2, 1, 0], [0, 4, 8, 0], "\<C-v>").includes([0, 3, 1, 0], [0, 3, 1, 0], 'V'))
			Assert True(Region([0, 2, 1, 0], [0, 4, 8, 0], "\<C-v>").includes([0, 4, 1, 0], [0, 4, 1, 0], 'V'))

			" a blockwise region includes a blockwise region
			Assert True(Region([0, 3, 3, 0], [0, 3, 5, 0], "\<C-v>").includes([0, 3, 3, 0], [0, 3, 5, 0], "\<C-v>"))
			Assert True(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes([0, 2, 3, 0], [0, 3, 4, 0], "\<C-v>"))
			Assert True(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes([0, 2, 4, 0], [0, 3, 5, 0], "\<C-v>"))
			Assert True(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes([0, 3, 3, 0], [0, 4, 4, 0], "\<C-v>"))
			Assert True(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes([0, 3, 4, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert True(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes([0, 2, 3, 0], [0, 4, 3, 0], "\<C-v>"))
			Assert True(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
		End

		It returns FALSE if itself is not including a region
			" a characterwise region does not include a characterwise region
			Assert False(Region([0, 1, 1, 0], [0, 2, 3, 0], 'v').includes([0, 2, 4, 0], [0, 4, 4, 0], 'v'))
			Assert False(Region([0, 4, 5, 0], [0, 5, 7, 0], 'v').includes([0, 2, 4, 0], [0, 4, 4, 0], 'v'))
			Assert False(Region([0, 1, 1, 0], [0, 2, 3, 0], 'v').includes([0, 2, 3, 0], [0, 2, 4, 0], 'v'))
			Assert False(Region([0, 1, 1, 0], [0, 2, 3, 0], 'v').includes([0, 1, 1, 0], [0, 2, 4, 0], 'v'))
			Assert False(Region([0, 4, 5, 0], [0, 4, 7, 0], 'v').includes([0, 4, 4, 0], [0, 4, 5, 0], 'v'))
			Assert False(Region([0, 4, 5, 0], [0, 4, 7, 0], 'v').includes([0, 4, 4, 0], [0, 4, 7, 0], 'v'))

			" a characterwise region does not include a linewise region
			Assert False(Region([0, 1, 1, 0], [0, 1, 7, 0], 'v').includes([0, 1, 4, 0], [0, 1, 4, 0], 'V'))
			Assert False(Region([0, 2, 3, 0], [0, 4, 5, 0], 'v').includes([0, 1, 4, 0], [0, 2, 4, 0], 'V'))
			Assert False(Region([0, 2, 3, 0], [0, 4, 5, 0], 'v').includes([0, 2, 4, 0], [0, 4, 4, 0], 'V'))
			Assert False(Region([0, 2, 3, 0], [0, 4, 5, 0], 'v').includes([0, 4, 4, 0], [0, 5, 4, 0], 'V'))

			" a characterwise region does not include a blockwise region
			Assert False(Region([0, 1, 1, 0], [0, 1, 7, 0], 'v').includes([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert False(Region([0, 5, 1, 0], [0, 5, 7, 0], 'v').includes([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert False(Region([0, 2, 1, 0], [0, 2, 3, 0], 'v').includes([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert False(Region([0, 2, 5, 0], [0, 2, 7, 0], 'v').includes([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert False(Region([0, 3, 1, 0], [0, 3, 3, 0], 'v').includes([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert False(Region([0, 3, 5, 0], [0, 3, 7, 0], 'v').includes([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert False(Region([0, 4, 1, 0], [0, 4, 3, 0], 'v').includes([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert False(Region([0, 4, 5, 0], [0, 4, 7, 0], 'v').includes([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert False(Region([0, 1, 1, 0], [0, 2, 3, 0], 'v').includes([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert False(Region([0, 4, 5, 0], [0, 5, 7, 0], 'v').includes([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))

			" a linewise region does not include a characterwise region
			Assert False(Region([0, 2, 1, 0], [0, 4, 1, 0], 'V').includes([0, 1, 1, 0], [0, 2, 1, 0], 'v'))
			Assert False(Region([0, 2, 1, 0], [0, 4, 1, 0], 'V').includes([0, 4, 1, 0], [0, 5, 1, 0], 'v'))
			Assert False(Region([0, 2, 1, 0], [0, 4, 1, 0], 'V').includes([0, 1, 1, 0], [0, 5, 1, 0], 'v'))

			" a linewise region does not include a linewise region
			Assert False(Region([0, 1, 1, 0], [0, 1, 1, 0], 'V').includes([0, 2, 1, 0], [0, 4, 1, 0], 'V'))
			Assert False(Region([0, 5, 1, 0], [0, 5, 1, 0], 'V').includes([0, 2, 1, 0], [0, 4, 1, 0], 'V'))

			" a linewise region does not include a blockwise region
			Assert False(Region([0, 1, 1, 0], [0, 1, 1, 0], 'V').includes([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert False(Region([0, 5, 1, 0], [0, 5, 1, 0], 'V').includes([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))

			" a blockwise region does not include a characterwise region
			Assert False(Region([0, 1, 1, 0], [0, 2, 2, 0], "\<C-v>").includes([0, 2, 3, 0], [0, 4, 5, 0], 'v'))
			Assert False(Region([0, 4, 6, 0], [0, 5, 7, 0], "\<C-v>").includes([0, 2, 3, 0], [0, 4, 5, 0], 'v'))
			Assert False(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes([0, 2, 3, 0], [0, 4, 5, 0], 'v'))
			Assert False(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes([0, 2, 1, 0], [0, 2, 3, 0], 'v'))
			Assert False(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes([0, 2, 5, 0], [0, 2, 7, 0], 'v'))
			Assert False(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes([0, 3, 1, 0], [0, 3, 3, 0], 'v'))
			Assert False(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes([0, 3, 5, 0], [0, 3, 7, 0], 'v'))
			Assert False(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes([0, 4, 1, 0], [0, 4, 3, 0], 'v'))
			Assert False(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes([0, 4, 5, 0], [0, 4, 7, 0], 'v'))

			" a blockwise region does not include a linewise region
			Assert False(Region([0, 3, 3, 0], [0, 3, 5, 0], "\<C-v>").includes([0, 3, 1, 0], [0, 3, 1, 0], 'V'))
			Assert False(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes([0, 1, 1, 0], [0, 1, 1, 0], 'V'))
			Assert False(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes([0, 2, 1, 0], [0, 2, 1, 0], 'V'))
			Assert False(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes([0, 3, 1, 0], [0, 3, 1, 0], 'V'))
			Assert False(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes([0, 4, 1, 0], [0, 4, 1, 0], 'V'))
			Assert False(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes([0, 5, 1, 0], [0, 5, 1, 0], 'V'))
			Assert False(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes([0, 1, 1, 0], [0, 5, 1, 0], 'V'))
			Assert False(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes([0, 2, 1, 0], [0, 4, 1, 0], 'V'))

			" a blockwise region does not include a blockwise region
			Assert False(Region([0, 3, 3, 0], [0, 3, 5, 0], "\<C-v>").includes([0, 2, 3, 0], [0, 3, 5, 0], "\<C-v>"))
			Assert False(Region([0, 3, 3, 0], [0, 3, 5, 0], "\<C-v>").includes([0, 3, 1, 0], [0, 3, 3, 0], "\<C-v>"))
			Assert False(Region([0, 3, 3, 0], [0, 3, 5, 0], "\<C-v>").includes([0, 3, 5, 0], [0, 3, 7, 0], "\<C-v>"))
			Assert False(Region([0, 3, 3, 0], [0, 3, 5, 0], "\<C-v>").includes([0, 4, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert False(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes([0, 1, 1, 0], [0, 2, 3, 0], "\<C-v>"))
			Assert False(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes([0, 1, 5, 0], [0, 2, 7, 0], "\<C-v>"))
			Assert False(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes([0, 4, 1, 0], [0, 5, 3, 0], "\<C-v>"))
			Assert False(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes([0, 4, 5, 0], [0, 5, 7, 0], "\<C-v>"))
			Assert False(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes([0, 2, 1, 0], [0, 4, 7, 0], "\<C-v>"))
			Assert False(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes([0, 1, 3, 0], [0, 5, 3, 0], "\<C-v>"))
			Assert False(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes([0, 1, 1, 0], [0, 5, 7, 0], "\<C-v>"))
		End

		It throws an exception with inappropriate arguments
			let head = [0, 1, 1, 0]
			let tail = [0, 1, 1, 0]
			let region = Region(head, tail, 'v')
			Throws /^Vim(echoerr):multiselect: Invalid argument for Region.includes()/ region.includes('')
			Throws /^Vim(echoerr):multiselect: Invalid argument for Region.includes()/ region.includes(1, [0, 1, 1, 0])
			Throws /^Vim(echoerr):multiselect: Invalid argument for Region.includes()/ region.includes([0, 1, 1, 0], 1)
		End
	End

	Context .includes(head)
		It returns TRUE if itself is including a position
			Assert True(Region([0, 2, 1, 0], [0, 4, 8, 0], 'v').includes([0, 3, 5, 0]))
			Assert True(Region([0, 2, 1, 0], [0, 4, 8, 0], 'V').includes([0, 3, 5, 0]))
			Assert True(Region([0, 2, 1, 0], [0, 4, 8, 0], "\<C-v>").includes([0, 3, 5, 0]))
		End

		It returns FALSE if itself is not including a position
			Assert False(Region([0, 2, 1, 0], [0, 4, 8, 0], 'v').includes([0, 1, 1, 0]))
			Assert False(Region([0, 2, 1, 0], [0, 4, 8, 0], 'V').includes([0, 1, 1, 0]))
			Assert False(Region([0, 2, 1, 0], [0, 4, 8, 0], "\<C-v>").includes([0, 1, 1, 0]))
		End
	End

	Context .includes(lnum)
		It returns TRUE if itself is including a line
			Assert True(Region([0, 2, 1, 0], [0, 4, 8, 0], 'v').includes(3))
			Assert True(Region([0, 2, 1, 0], [0, 4, 8, 0], 'V').includes(3))
			Assert True(Region([0, 2, 1, 0], [0, 4, 8, 0], "\<C-v>").includes(3))
		End

		It returns FALSE if itself is not including a position
			Assert False(Region([0, 2, 1, 0], [0, 4, 8, 0], 'v').includes(1))
			Assert False(Region([0, 2, 1, 0], [0, 4, 8, 0], 'V').includes(1))
			Assert False(Region([0, 2, 1, 0], [0, 4, 8, 0], "\<C-v>").includes(1))
		End
	End

	Context .includes(startlnum, endlnum)
		It returns TRUE if itself is including a range between two lines
			Assert True(Region([0, 2, 1, 0], [0, 4, 8, 0], 'v').includes(2, 4))
			Assert True(Region([0, 2, 1, 0], [0, 4, 8, 0], 'V').includes(2, 4))
			Assert True(Region([0, 2, 1, 0], [0, 4, 8, 0], "\<C-v>").includes(2, 4))
		End

		It returns FALSE if itself is not including a range between two lines
			Assert False(Region([0, 2, 1, 0], [0, 4, 8, 0], 'v').includes(1, 5))
			Assert False(Region([0, 2, 1, 0], [0, 4, 8, 0], 'V').includes(1, 5))
			Assert False(Region([0, 2, 1, 0], [0, 4, 8, 0], "\<C-v>").includes(1, 5))
		End
	End

	Context .includes(region)
		It returns TRUE if itself is including a region
			" a characterwise region includes a characterwise region
			Assert True(Region([0, 1, 1, 0], [0, 2, 4, 0], 'v').includes(Region([0, 1, 1, 0], [0, 1, 3, 0], 'v')))
			Assert True(Region([0, 4, 4, 0], [0, 5, 7, 0], 'v').includes(Region([0, 5, 5, 0], [0, 5, 7, 0], 'v')))
			Assert True(Region([0, 1, 1, 0], [0, 5, 7, 0], 'v').includes(Region([0, 1, 1, 0], [0, 5, 7, 0], 'v')))
			Assert True(Region([0, 1, 1, 0], [0, 5, 7, 0], 'v').includes(Region([0, 3, 3, 0], [0, 3, 3, 0], 'v')))
			Assert True(Region([0, 3, 3, 0], [0, 3, 3, 0], 'v').includes(Region([0, 3, 3, 0], [0, 3, 3, 0], 'v')))
			Assert True(Region([0, 3, 3, 0], [0, 3, 3, 0], 'v').includes(Region([0, 3, 3, 0], [0, 3, 3, 0], 'v')))
			Assert True(Region([0, 2, 5, 0], [0, 3, 4, 0], 'v').includes([0, 3, 4, 0]))
			Assert True(Region([0, 3, 1, 0], [0, 3, 7, 0], 'v').includes([0, 3, 4, 0]))
			Assert True(Region([0, 3, 4, 0], [0, 4, 3, 0], 'v').includes([0, 3, 4, 0]))

			" a characterwise region includes a linewise region
			Assert True(Region([0, 1, 1, 0], [0, 2, 1, 0], 'v').includes(Region([0, 1, 4, 0], [0, 1, 4, 0], 'V')))
			Assert True(Region([0, 1, 1, 0], [0, 1, 8, 0], 'v').includes(Region([0, 1, 1, 0], [0, 1, 1, 0], 'V')))
			Assert True(Region([0, 1, 1, 0], [0, 3, 1, 0], 'v').includes(Region([0, 2, 1, 0], [0, 2, 1, 0], 'V')))

			" a characterwise region includes a blockwise region
			Assert True(Region([0, 2, 3, 0], [0, 4, 5, 0], 'v').includes(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert True(Region([0, 2, 3, 0], [0, 4, 5, 0], 'v').includes(Region([0, 2, 3, 0], [0, 3, 5, 0], "\<C-v>")))
			Assert True(Region([0, 2, 3, 0], [0, 4, 5, 0], 'v').includes(Region([0, 3, 1, 0], [0, 4, 2, 0], "\<C-v>")))
			Assert True(Region([0, 2, 3, 0], [0, 4, 5, 0], 'v').includes(Region([0, 2, 3, 0], [0, 3, 5, 0], "\<C-v>")))
			Assert True(Region([0, 2, 3, 0], [0, 4, 5, 0], 'v').includes(Region([0, 3, 3, 0], [0, 4, 5, 0], "\<C-v>")))

			" a linewise region includes a characterwise region
			Assert True(Region([0, 2, 1, 0], [0, 2, 1, 0], 'V').includes(Region([0, 2, 3, 0], [0, 2, 5, 0], 'v')))
			Assert True(Region([0, 2, 1, 0], [0, 2, 1, 0], 'V').includes(Region([0, 2, 1, 0], [0, 2, 8, 0], 'v')))
			Assert True(Region([0, 2, 1, 0], [0, 4, 1, 0], 'V').includes(Region([0, 2, 3, 0], [0, 4, 5, 0], 'v')))
			Assert True(Region([0, 2, 1, 0], [0, 4, 1, 0], 'V').includes(Region([0, 3, 3, 0], [0, 3, 5, 0], 'v')))
			Assert True(Region([0, 2, 1, 0], [0, 4, 1, 0], 'V').includes(Region([0, 4, 3, 0], [0, 4, 5, 0], 'v')))
			Assert True(Region([0, 2, 1, 0], [0, 4, 1, 0], 'V').includes(Region([0, 2, 1, 0], [0, 4, 8, 0], 'v')))
			Assert True(Region([0, 2, 5, 0], [0, 3, 3, 0], 'V').includes([0, 3, 4, 0]))
			Assert True(Region([0, 3, 1, 0], [0, 3, 7, 0], 'V').includes([0, 3, 4, 0]))
			Assert True(Region([0, 3, 5, 0], [0, 4, 3, 0], 'V').includes([0, 3, 4, 0]))

			" a linewise region includes a linewise region
			Assert True(Region([0, 3, 1, 0], [0, 3, 1, 0], 'V').includes(Region([0, 3, 1, 0], [0, 3, 1, 0], 'V')))
			Assert True(Region([0, 2, 1, 0], [0, 4, 1, 0], 'V').includes(Region([0, 2, 1, 0], [0, 2, 1, 0], 'V')))
			Assert True(Region([0, 2, 1, 0], [0, 4, 1, 0], 'V').includes(Region([0, 3, 1, 0], [0, 3, 1, 0], 'V')))
			Assert True(Region([0, 2, 1, 0], [0, 4, 1, 0], 'V').includes(Region([0, 2, 1, 0], [0, 4, 1, 0], 'V')))

			" a linewise region includes a blockwise region
			Assert True(Region([0, 2, 1, 0], [0, 2, 1, 0], 'V').includes(Region([0, 2, 3, 0], [0, 2, 5, 0], "\<C-v>")))
			Assert True(Region([0, 2, 1, 0], [0, 4, 1, 0], 'V').includes(Region([0, 2, 1, 0], [0, 4, 7, 0], "\<C-v>")))
			Assert True(Region([0, 2, 1, 0], [0, 4, 1, 0], 'V').includes(Region([0, 2, 1, 0], [0, 3, 3, 0], "\<C-v>")))
			Assert True(Region([0, 2, 1, 0], [0, 4, 1, 0], 'V').includes(Region([0, 2, 5, 0], [0, 3, 7, 0], "\<C-v>")))
			Assert True(Region([0, 2, 1, 0], [0, 4, 1, 0], 'V').includes(Region([0, 3, 1, 0], [0, 4, 3, 0], "\<C-v>")))
			Assert True(Region([0, 2, 1, 0], [0, 4, 1, 0], 'V').includes(Region([0, 3, 5, 0], [0, 4, 7, 0], "\<C-v>")))
			Assert True(Region([0, 2, 1, 0], [0, 4, 1, 0], 'V').includes(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))

			" a blockwise region includes a characterwise region
			Assert True(Region([0, 3, 1, 0], [0, 3, 7, 0], "\<C-v>").includes(Region([0, 3, 3, 0], [0, 3, 5, 0], 'v')))
			Assert True(Region([0, 3, 3, 0], [0, 3, 5, 0], "\<C-v>").includes(Region([0, 3, 3, 0], [0, 3, 5, 0], 'v')))
			Assert True(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes(Region([0, 2, 3, 0], [0, 2, 5, 0], 'v')))
			Assert True(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes(Region([0, 3, 3, 0], [0, 3, 5, 0], 'v')))
			Assert True(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes(Region([0, 4, 3, 0], [0, 4, 5, 0], 'v')))
			Assert True(Region([0, 2, 1, 0], [0, 4, 8, 0], "\<C-v>").includes(Region([0, 2, 3, 0], [0, 4, 5, 0], 'v')))
			Assert True(Region([0, 2, 3, 0], [0, 3, 4, 0], "\<C-v>").includes([0, 3, 4, 0]))
			Assert True(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes([0, 3, 4, 0]))
			Assert True(Region([0, 3, 4, 0], [0, 4, 5, 0], "\<C-v>").includes([0, 3, 4, 0]))

			" a blockwise region includes a linewise region
			Assert True(Region([0, 3, 1, 0], [0, 3, 8, 0], "\<C-v>").includes(Region([0, 3, 1, 0], [0, 3, 1, 0], 'V')))
			Assert True(Region([0, 2, 1, 0], [0, 4, 8, 0], "\<C-v>").includes(Region([0, 2, 1, 0], [0, 2, 1, 0], 'V')))
			Assert True(Region([0, 2, 1, 0], [0, 4, 8, 0], "\<C-v>").includes(Region([0, 3, 1, 0], [0, 3, 1, 0], 'V')))
			Assert True(Region([0, 2, 1, 0], [0, 4, 8, 0], "\<C-v>").includes(Region([0, 4, 1, 0], [0, 4, 1, 0], 'V')))

			" a blockwise region includes a blockwise region
			Assert True(Region([0, 3, 3, 0], [0, 3, 5, 0], "\<C-v>").includes(Region([0, 3, 3, 0], [0, 3, 5, 0], "\<C-v>")))
			Assert True(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes(Region([0, 2, 3, 0], [0, 3, 4, 0], "\<C-v>")))
			Assert True(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes(Region([0, 2, 4, 0], [0, 3, 5, 0], "\<C-v>")))
			Assert True(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes(Region([0, 3, 3, 0], [0, 4, 4, 0], "\<C-v>")))
			Assert True(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes(Region([0, 3, 4, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert True(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes(Region([0, 2, 3, 0], [0, 4, 3, 0], "\<C-v>")))
			Assert True(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
		End

		It returns FALSE if itself is not including a region
			" a characterwise region does not include a characterwise region
			Assert False(Region([0, 1, 1, 0], [0, 2, 3, 0], 'v').includes(Region([0, 2, 4, 0], [0, 4, 4, 0], 'v')))
			Assert False(Region([0, 4, 5, 0], [0, 5, 7, 0], 'v').includes(Region([0, 2, 4, 0], [0, 4, 4, 0], 'v')))
			Assert False(Region([0, 1, 1, 0], [0, 2, 3, 0], 'v').includes(Region([0, 2, 3, 0], [0, 2, 4, 0], 'v')))
			Assert False(Region([0, 1, 1, 0], [0, 2, 3, 0], 'v').includes(Region([0, 1, 1, 0], [0, 2, 4, 0], 'v')))
			Assert False(Region([0, 4, 5, 0], [0, 4, 7, 0], 'v').includes(Region([0, 4, 4, 0], [0, 4, 5, 0], 'v')))
			Assert False(Region([0, 4, 5, 0], [0, 4, 7, 0], 'v').includes(Region([0, 4, 4, 0], [0, 4, 7, 0], 'v')))

			" a characterwise region does not include a linewise region
			Assert False(Region([0, 1, 1, 0], [0, 1, 7, 0], 'v').includes(Region([0, 1, 4, 0], [0, 1, 4, 0], 'V')))
			Assert False(Region([0, 2, 3, 0], [0, 4, 5, 0], 'v').includes(Region([0, 1, 4, 0], [0, 2, 4, 0], 'V')))
			Assert False(Region([0, 2, 3, 0], [0, 4, 5, 0], 'v').includes(Region([0, 2, 4, 0], [0, 4, 4, 0], 'V')))
			Assert False(Region([0, 2, 3, 0], [0, 4, 5, 0], 'v').includes(Region([0, 4, 4, 0], [0, 5, 4, 0], 'V')))

			" a characterwise region does not include a blockwise region
			Assert False(Region([0, 1, 1, 0], [0, 1, 7, 0], 'v').includes(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert False(Region([0, 5, 1, 0], [0, 5, 7, 0], 'v').includes(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert False(Region([0, 2, 1, 0], [0, 2, 3, 0], 'v').includes(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert False(Region([0, 2, 5, 0], [0, 2, 7, 0], 'v').includes(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert False(Region([0, 3, 1, 0], [0, 3, 3, 0], 'v').includes(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert False(Region([0, 3, 5, 0], [0, 3, 7, 0], 'v').includes(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert False(Region([0, 4, 1, 0], [0, 4, 3, 0], 'v').includes(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert False(Region([0, 4, 5, 0], [0, 4, 7, 0], 'v').includes(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert False(Region([0, 1, 1, 0], [0, 2, 3, 0], 'v').includes(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert False(Region([0, 4, 5, 0], [0, 5, 7, 0], 'v').includes(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))

			" a linewise region does not include a characterwise region
			Assert False(Region([0, 2, 1, 0], [0, 4, 1, 0], 'V').includes(Region([0, 1, 1, 0], [0, 2, 1, 0], 'v')))
			Assert False(Region([0, 2, 1, 0], [0, 4, 1, 0], 'V').includes(Region([0, 4, 1, 0], [0, 5, 1, 0], 'v')))
			Assert False(Region([0, 2, 1, 0], [0, 4, 1, 0], 'V').includes(Region([0, 1, 1, 0], [0, 5, 1, 0], 'v')))

			" a linewise region does not include a linewise region
			Assert False(Region([0, 1, 1, 0], [0, 1, 1, 0], 'V').includes(Region([0, 2, 1, 0], [0, 4, 1, 0], 'V')))
			Assert False(Region([0, 5, 1, 0], [0, 5, 1, 0], 'V').includes(Region([0, 2, 1, 0], [0, 4, 1, 0], 'V')))

			" a linewise region does not include a blockwise region
			Assert False(Region([0, 1, 1, 0], [0, 1, 1, 0], 'V').includes(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert False(Region([0, 5, 1, 0], [0, 5, 1, 0], 'V').includes(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))

			" a blockwise region does not include a characterwise region
			Assert False(Region([0, 1, 1, 0], [0, 2, 2, 0], "\<C-v>").includes(Region([0, 2, 3, 0], [0, 4, 5, 0], 'v')))
			Assert False(Region([0, 4, 6, 0], [0, 5, 7, 0], "\<C-v>").includes(Region([0, 2, 3, 0], [0, 4, 5, 0], 'v')))
			Assert False(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes(Region([0, 2, 3, 0], [0, 4, 5, 0], 'v')))
			Assert False(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes(Region([0, 2, 1, 0], [0, 2, 3, 0], 'v')))
			Assert False(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes(Region([0, 2, 5, 0], [0, 2, 7, 0], 'v')))
			Assert False(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes(Region([0, 3, 1, 0], [0, 3, 3, 0], 'v')))
			Assert False(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes(Region([0, 3, 5, 0], [0, 3, 7, 0], 'v')))
			Assert False(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes(Region([0, 4, 1, 0], [0, 4, 3, 0], 'v')))
			Assert False(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes(Region([0, 4, 5, 0], [0, 4, 7, 0], 'v')))

			" a blockwise region does not include a linewise region
			Assert False(Region([0, 3, 3, 0], [0, 3, 5, 0], "\<C-v>").includes(Region([0, 3, 1, 0], [0, 3, 1, 0], 'V')))
			Assert False(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes(Region([0, 1, 1, 0], [0, 1, 1, 0], 'V')))
			Assert False(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes(Region([0, 2, 1, 0], [0, 2, 1, 0], 'V')))
			Assert False(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes(Region([0, 3, 1, 0], [0, 3, 1, 0], 'V')))
			Assert False(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes(Region([0, 4, 1, 0], [0, 4, 1, 0], 'V')))
			Assert False(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes(Region([0, 5, 1, 0], [0, 5, 1, 0], 'V')))
			Assert False(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes(Region([0, 1, 1, 0], [0, 5, 1, 0], 'V')))
			Assert False(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes(Region([0, 2, 1, 0], [0, 4, 1, 0], 'V')))

			" a blockwise region does not include a blockwise region
			Assert False(Region([0, 3, 3, 0], [0, 3, 5, 0], "\<C-v>").includes(Region([0, 2, 3, 0], [0, 3, 5, 0], "\<C-v>")))
			Assert False(Region([0, 3, 3, 0], [0, 3, 5, 0], "\<C-v>").includes(Region([0, 3, 1, 0], [0, 3, 3, 0], "\<C-v>")))
			Assert False(Region([0, 3, 3, 0], [0, 3, 5, 0], "\<C-v>").includes(Region([0, 3, 5, 0], [0, 3, 7, 0], "\<C-v>")))
			Assert False(Region([0, 3, 3, 0], [0, 3, 5, 0], "\<C-v>").includes(Region([0, 4, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert False(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes(Region([0, 1, 1, 0], [0, 2, 3, 0], "\<C-v>")))
			Assert False(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes(Region([0, 1, 5, 0], [0, 2, 7, 0], "\<C-v>")))
			Assert False(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes(Region([0, 4, 1, 0], [0, 5, 3, 0], "\<C-v>")))
			Assert False(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes(Region([0, 4, 5, 0], [0, 5, 7, 0], "\<C-v>")))
			Assert False(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes(Region([0, 2, 1, 0], [0, 4, 7, 0], "\<C-v>")))
			Assert False(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes(Region([0, 1, 3, 0], [0, 5, 3, 0], "\<C-v>")))
			Assert False(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").includes(Region([0, 1, 1, 0], [0, 5, 7, 0], "\<C-v>")))
		End
	End

	Context .isinside(head, tail...)
		It returns TRUE if itself is inside a region
			" a characterwise region in a characterwise region
			Assert True(Region([0, 2, 4, 0], [0, 2, 7, 0], 'v').isinside([0, 2, 4, 0], [0, 4, 4, 0], 'v'))
			Assert True(Region([0, 2, 6, 0], [0, 3, 1, 0], 'v').isinside([0, 2, 4, 0], [0, 4, 4, 0], 'v'))
			Assert True(Region([0, 3, 1, 0], [0, 3, 7, 0], 'v').isinside([0, 2, 4, 0], [0, 4, 4, 0], 'v'))
			Assert True(Region([0, 2, 4, 0], [0, 4, 4, 0], 'v').isinside([0, 2, 4, 0], [0, 4, 4, 0], 'v'))
			Assert True(Region([0, 4, 3, 0], [0, 4, 4, 0], 'v').isinside([0, 2, 4, 0], [0, 4, 4, 0], 'v'))

			" a characterwise region in a linewise region
			Assert True(Region([0, 2, 1, 0], [0, 2, 7, 0], 'v').isinside([0, 2, 4, 0], [0, 4, 4, 0], 'V'))
			Assert True(Region([0, 3, 1, 0], [0, 3, 7, 0], 'v').isinside([0, 2, 4, 0], [0, 4, 4, 0], 'V'))
			Assert True(Region([0, 4, 1, 0], [0, 4, 7, 0], 'v').isinside([0, 2, 4, 0], [0, 4, 4, 0], 'V'))
			Assert True(Region([0, 2, 1, 0], [0, 4, 7, 0], 'v').isinside([0, 2, 4, 0], [0, 4, 4, 0], 'V'))

			" a characterwise region in a blockwise region
			Assert True(Region([0, 2, 3, 0], [0, 2, 5, 0], 'v').isinside([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert True(Region([0, 3, 3, 0], [0, 3, 5, 0], 'v').isinside([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert True(Region([0, 4, 3, 0], [0, 4, 5, 0], 'v').isinside([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert True(Region([0, 2, 7, 0], [0, 4, 1, 0], 'v').isinside([0, 2, 1, 0], [0, 4, 8, 0], "\<C-v>"))

			" a linewise region in a characterwise region
			Assert True(Region([0, 3, 1, 0], [0, 3, 1, 0], 'V').isinside([0, 2, 4, 0], [0, 4, 4, 0], 'v'))

			" a linewise region in a linewise region
			Assert True(Region([0, 2, 1, 0], [0, 2, 1, 0], 'V').isinside([0, 2, 4, 0], [0, 4, 4, 0], 'V'))
			Assert True(Region([0, 3, 1, 0], [0, 3, 1, 0], 'V').isinside([0, 2, 4, 0], [0, 4, 4, 0], 'V'))
			Assert True(Region([0, 4, 1, 0], [0, 4, 1, 0], 'V').isinside([0, 2, 4, 0], [0, 4, 4, 0], 'V'))
			Assert True(Region([0, 2, 1, 0], [0, 4, 1, 0], 'V').isinside([0, 2, 4, 0], [0, 4, 4, 0], 'V'))

			" a linewise region in a blockwise region
			Assert True(Region([0, 2, 1, 0], [0, 2, 1, 0], 'V').isinside([0, 2, 1, 0], [0, 4, 8, 0], "\<C-v>"))
			Assert True(Region([0, 3, 1, 0], [0, 3, 1, 0], 'V').isinside([0, 2, 1, 0], [0, 4, 8, 0], "\<C-v>"))
			Assert True(Region([0, 4, 1, 0], [0, 4, 1, 0], 'V').isinside([0, 2, 1, 0], [0, 4, 8, 0], "\<C-v>"))
			Assert True(Region([0, 2, 1, 0], [0, 4, 1, 0], 'V').isinside([0, 2, 1, 0], [0, 4, 8, 0], "\<C-v>"))

			" a blockwise region in a characterwise region
			Assert True(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").isinside([0, 2, 3, 0], [0, 4, 5, 0], 'v'))
			Assert True(Region([0, 2, 3, 0], [0, 3, 4, 0], "\<C-v>").isinside([0, 2, 3, 0], [0, 4, 5, 0], 'v'))
			Assert True(Region([0, 3, 4, 0], [0, 4, 5, 0], "\<C-v>").isinside([0, 2, 3, 0], [0, 4, 5, 0], 'v'))
			Assert True(Region([0, 2, 6, 0], [0, 3, 7, 0], "\<C-v>").isinside([0, 2, 3, 0], [0, 4, 5, 0], 'v'))
			Assert True(Region([0, 3, 1, 0], [0, 4, 2, 0], "\<C-v>").isinside([0, 2, 3, 0], [0, 4, 5, 0], 'v'))

			" a blockwise region in a linewise region
			Assert True(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").isinside([0, 2, 3, 0], [0, 4, 5, 0], 'V'))
			Assert True(Region([0, 2, 1, 0], [0, 4, 4, 0], "\<C-v>").isinside([0, 2, 3, 0], [0, 4, 5, 0], 'V'))
			Assert True(Region([0, 2, 4, 0], [0, 4, 7, 0], "\<C-v>").isinside([0, 2, 3, 0], [0, 4, 5, 0], 'V'))
			Assert True(Region([0, 2, 1, 0], [0, 3, 4, 0], "\<C-v>").isinside([0, 2, 3, 0], [0, 4, 5, 0], 'V'))
			Assert True(Region([0, 2, 4, 0], [0, 3, 7, 0], "\<C-v>").isinside([0, 2, 3, 0], [0, 4, 5, 0], 'V'))
			Assert True(Region([0, 3, 1, 0], [0, 4, 4, 0], "\<C-v>").isinside([0, 2, 3, 0], [0, 4, 5, 0], 'V'))
			Assert True(Region([0, 3, 4, 0], [0, 4, 7, 0], "\<C-v>").isinside([0, 2, 3, 0], [0, 4, 5, 0], 'V'))

			" a blockwise region in a blockwise region
			Assert True(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").isinside([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert True(Region([0, 2, 3, 0], [0, 3, 4, 0], "\<C-v>").isinside([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert True(Region([0, 3, 3, 0], [0, 4, 4, 0], "\<C-v>").isinside([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert True(Region([0, 2, 4, 0], [0, 3, 5, 0], "\<C-v>").isinside([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert True(Region([0, 3, 4, 0], [0, 4, 5, 0], "\<C-v>").isinside([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
		End

		It returns FALSE if itself is not inside a region
			" a characterwise region not in a characterwise region
			Assert False(Region([0, 2, 2, 0], [0, 2, 5, 0], 'v').isinside([0, 2, 4, 0], [0, 4, 4, 0], 'v'))
			Assert False(Region([0, 1, 6, 0], [0, 2, 3, 0], 'v').isinside([0, 2, 4, 0], [0, 4, 4, 0], 'v'))
			Assert False(Region([0, 2, 3, 0], [0, 2, 4, 0], 'v').isinside([0, 2, 4, 0], [0, 4, 4, 0], 'v'))
			Assert False(Region([0, 4, 4, 0], [0, 4, 5, 0], 'v').isinside([0, 2, 4, 0], [0, 4, 4, 0], 'v'))
			Assert False(Region([0, 4, 5, 0], [0, 5, 1, 0], 'v').isinside([0, 2, 4, 0], [0, 4, 4, 0], 'v'))
			Assert False(Region([0, 5, 2, 0], [0, 5, 5, 0], 'v').isinside([0, 2, 4, 0], [0, 4, 4, 0], 'v'))

			" a characterwise region not in a linewise region
			Assert False(Region([0, 1, 1, 0], [0, 1, 7, 0], 'v').isinside([0, 2, 4, 0], [0, 4, 4, 0], 'V'))
			Assert False(Region([0, 5, 1, 0], [0, 5, 7, 0], 'v').isinside([0, 2, 4, 0], [0, 4, 4, 0], 'V'))

			" a characterwise region not in a blockwise region
			Assert False(Region([0, 1, 3, 0], [0, 1, 5, 0], 'v').isinside([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert False(Region([0, 1, 3, 0], [0, 2, 2, 0], 'v').isinside([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert False(Region([0, 2, 1, 0], [0, 2, 2, 0], 'v').isinside([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert False(Region([0, 4, 6, 0], [0, 4, 7, 0], 'v').isinside([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert False(Region([0, 4, 6, 0], [0, 5, 2, 0], 'v').isinside([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert False(Region([0, 5, 3, 0], [0, 5, 5, 0], 'v').isinside([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))

			" a linewise region not in a characterwise region
			Assert False(Region([0, 1, 1, 0], [0, 1, 1, 0], 'V').isinside([0, 2, 4, 0], [0, 4, 4, 0], 'v'))
			Assert False(Region([0, 2, 1, 0], [0, 2, 1, 0], 'V').isinside([0, 2, 4, 0], [0, 4, 4, 0], 'v'))
			Assert False(Region([0, 4, 1, 0], [0, 4, 1, 0], 'V').isinside([0, 2, 4, 0], [0, 4, 4, 0], 'v'))
			Assert False(Region([0, 5, 1, 0], [0, 5, 1, 0], 'V').isinside([0, 2, 4, 0], [0, 4, 4, 0], 'v'))

			" a linewise region not in a linewise region
			Assert False(Region([0, 1, 1, 0], [0, 1, 1, 0], 'V').isinside([0, 2, 4, 0], [0, 4, 4, 0], 'V'))
			Assert False(Region([0, 5, 1, 0], [0, 5, 1, 0], 'V').isinside([0, 2, 4, 0], [0, 4, 4, 0], 'V'))

			" a linewise region not in a blockwise region
			Assert False(Region([0, 1, 1, 0], [0, 1, 1, 0], 'V').isinside([0, 2, 1, 0], [0, 4, 8, 0], "\<C-v>"))
			Assert False(Region([0, 5, 1, 0], [0, 5, 1, 0], 'V').isinside([0, 2, 1, 0], [0, 4, 8, 0], "\<C-v>"))
			Assert False(Region([0, 2, 1, 0], [0, 2, 1, 0], 'V').isinside([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert False(Region([0, 3, 1, 0], [0, 3, 1, 0], 'V').isinside([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert False(Region([0, 4, 1, 0], [0, 4, 1, 0], 'V').isinside([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert False(Region([0, 2, 1, 0], [0, 4, 1, 0], 'V').isinside([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))

			" a blockwise region not in a characterwise region
			Assert False(Region([0, 1, 1, 0], [0, 2, 2, 0], "\<C-v>").isinside([0, 2, 3, 0], [0, 4, 5, 0], 'v'))
			Assert False(Region([0, 1, 1, 0], [0, 3, 4, 0], "\<C-v>").isinside([0, 2, 3, 0], [0, 4, 5, 0], 'v'))
			Assert False(Region([0, 4, 6, 0], [0, 5, 7, 0], "\<C-v>").isinside([0, 2, 3, 0], [0, 4, 5, 0], 'v'))
			Assert False(Region([0, 3, 4, 0], [0, 5, 7, 0], "\<C-v>").isinside([0, 2, 3, 0], [0, 4, 5, 0], 'v'))

			" a blockwise region not in a linewise region
			Assert False(Region([0, 1, 1, 0], [0, 1, 7, 0], "\<C-v>").isinside([0, 2, 3, 0], [0, 4, 5, 0], 'V'))
			Assert False(Region([0, 5, 1, 0], [0, 5, 7, 0], "\<C-v>").isinside([0, 2, 3, 0], [0, 4, 5, 0], 'V'))

			" blockwise region not in a blockwise region
			Assert False(Region([0, 1, 1, 0], [0, 2, 2, 0], "\<C-v>").isinside([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert False(Region([0, 1, 6, 0], [0, 2, 7, 0], "\<C-v>").isinside([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert False(Region([0, 6, 1, 0], [0, 7, 2, 0], "\<C-v>").isinside([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert False(Region([0, 6, 6, 0], [0, 7, 7, 0], "\<C-v>").isinside([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert False(Region([0, 2, 1, 0], [0, 4, 2, 0], "\<C-v>").isinside([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert False(Region([0, 2, 6, 0], [0, 4, 7, 0], "\<C-v>").isinside([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert False(Region([0, 1, 3, 0], [0, 1, 5, 0], "\<C-v>").isinside([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert False(Region([0, 5, 3, 0], [0, 5, 5, 0], "\<C-v>").isinside([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
		End

		It throws an exception with inappropriate arguments
			let head = [0, 1, 1, 0]
			let tail = [0, 1, 1, 0]
			let region = Region(head, tail, 'v')
			Throws /^Vim(echoerr):multiselect: Invalid argument for Region.isinside()/ region.isinside('')
			Throws /^Vim(echoerr):multiselect: Invalid argument for Region.isinside()/ region.isinside(1, [0, 1, 1, 0])
			Throws /^Vim(echoerr):multiselect: Invalid argument for Region.isinside()/ region.isinside([0, 1, 1, 0], 1)
		End
	End

	Context .isinside(head)
		It returns TRUE if itself is inside a position
			Assert True(Region([0, 3, 5, 0], [0, 3, 5, 0], 'v').isinside([0, 3, 5, 0]))
			Assert True(Region([0, 3, 5, 0], [0, 3, 5, 0], "\<C-v>").isinside([0, 3, 5, 0]))
		End

		It returns FALSE if itself is not inside a position
			Assert False(Region([0, 2, 1, 0], [0, 4, 8, 0], 'v').isinside([0, 1, 1, 0]))
			Assert False(Region([0, 2, 1, 0], [0, 4, 8, 0], 'V').isinside([0, 1, 1, 0]))
			Assert False(Region([0, 2, 1, 0], [0, 4, 8, 0], "\<C-v>").isinside([0, 1, 1, 0]))
		End
	End

	Context .isinside(lnum)
		It returns TRUE if itself is inside a line
			Assert True(Region([0, 3, 5, 0], [0, 3, 5, 0], 'v').isinside(3))
			Assert True(Region([0, 3, 5, 0], [0, 3, 5, 0], 'V').isinside(3))
			Assert True(Region([0, 3, 5, 0], [0, 3, 5, 0], "\<C-v>").isinside(3))
		End

		It returns FALSE if itself is not inside a line
			Assert False(Region([0, 2, 1, 0], [0, 4, 8, 0], 'v').isinside(1))
			Assert False(Region([0, 2, 1, 0], [0, 4, 8, 0], 'V').isinside(1))
			Assert False(Region([0, 2, 1, 0], [0, 4, 8, 0], "\<C-v>").isinside(1))
		End
	End

	Context .isinside(startlnum, endlnum)
		It returns TRUE if itself is inside a range between two lines
			Assert True(Region([0, 3, 5, 0], [0, 3, 5, 0], 'v').isinside(2, 4))
			Assert True(Region([0, 3, 5, 0], [0, 3, 5, 0], 'V').isinside(2, 4))
			Assert True(Region([0, 3, 5, 0], [0, 3, 5, 0], "\<C-v>").isinside(2, 4))
		End

		It returns FALSE if itself is not inside a range between two lines
			Assert False(Region([0, 2, 1, 0], [0, 4, 8, 0], 'v').isinside(1, 2))
			Assert False(Region([0, 2, 1, 0], [0, 4, 8, 0], 'V').isinside(1, 2))
			Assert False(Region([0, 2, 1, 0], [0, 4, 8, 0], "\<C-v>").isinside(1, 2))
		End
	End

	Context .isinside(region)
		It returns TRUE if itself is inside a region
			" a characterwise region in a characterwise region
			Assert True(Region([0, 2, 4, 0], [0, 2, 7, 0], 'v').isinside(Region([0, 2, 4, 0], [0, 4, 4, 0], 'v')))
			Assert True(Region([0, 2, 6, 0], [0, 3, 1, 0], 'v').isinside(Region([0, 2, 4, 0], [0, 4, 4, 0], 'v')))
			Assert True(Region([0, 3, 1, 0], [0, 3, 7, 0], 'v').isinside(Region([0, 2, 4, 0], [0, 4, 4, 0], 'v')))
			Assert True(Region([0, 2, 4, 0], [0, 4, 4, 0], 'v').isinside(Region([0, 2, 4, 0], [0, 4, 4, 0], 'v')))
			Assert True(Region([0, 4, 3, 0], [0, 4, 4, 0], 'v').isinside(Region([0, 2, 4, 0], [0, 4, 4, 0], 'v')))

			" a characterwise region in a linewise region
			Assert True(Region([0, 2, 1, 0], [0, 2, 7, 0], 'v').isinside(Region([0, 2, 4, 0], [0, 4, 4, 0], 'V')))
			Assert True(Region([0, 3, 1, 0], [0, 3, 7, 0], 'v').isinside(Region([0, 2, 4, 0], [0, 4, 4, 0], 'V')))
			Assert True(Region([0, 4, 1, 0], [0, 4, 7, 0], 'v').isinside(Region([0, 2, 4, 0], [0, 4, 4, 0], 'V')))
			Assert True(Region([0, 2, 1, 0], [0, 4, 7, 0], 'v').isinside(Region([0, 2, 4, 0], [0, 4, 4, 0], 'V')))

			" a characterwise region in a blockwise region
			Assert True(Region([0, 2, 3, 0], [0, 2, 5, 0], 'v').isinside(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert True(Region([0, 3, 3, 0], [0, 3, 5, 0], 'v').isinside(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert True(Region([0, 4, 3, 0], [0, 4, 5, 0], 'v').isinside(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert True(Region([0, 2, 7, 0], [0, 4, 1, 0], 'v').isinside(Region([0, 2, 1, 0], [0, 4, 8, 0], "\<C-v>")))

			" a linewise region in a characterwise region
			Assert True(Region([0, 3, 1, 0], [0, 3, 1, 0], 'V').isinside(Region([0, 2, 4, 0], [0, 4, 4, 0], 'v')))

			" a linewise region in a linewise region
			Assert True(Region([0, 2, 1, 0], [0, 2, 1, 0], 'V').isinside(Region([0, 2, 4, 0], [0, 4, 4, 0], 'V')))
			Assert True(Region([0, 3, 1, 0], [0, 3, 1, 0], 'V').isinside(Region([0, 2, 4, 0], [0, 4, 4, 0], 'V')))
			Assert True(Region([0, 4, 1, 0], [0, 4, 1, 0], 'V').isinside(Region([0, 2, 4, 0], [0, 4, 4, 0], 'V')))
			Assert True(Region([0, 2, 1, 0], [0, 4, 1, 0], 'V').isinside(Region([0, 2, 4, 0], [0, 4, 4, 0], 'V')))

			" a linewise region in a blockwise region
			Assert True(Region([0, 2, 1, 0], [0, 2, 1, 0], 'V').isinside(Region([0, 2, 1, 0], [0, 4, 8, 0], "\<C-v>")))
			Assert True(Region([0, 3, 1, 0], [0, 3, 1, 0], 'V').isinside(Region([0, 2, 1, 0], [0, 4, 8, 0], "\<C-v>")))
			Assert True(Region([0, 4, 1, 0], [0, 4, 1, 0], 'V').isinside(Region([0, 2, 1, 0], [0, 4, 8, 0], "\<C-v>")))
			Assert True(Region([0, 2, 1, 0], [0, 4, 1, 0], 'V').isinside(Region([0, 2, 1, 0], [0, 4, 8, 0], "\<C-v>")))

			" a blockwise region in a characterwise region
			Assert True(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").isinside(Region([0, 2, 3, 0], [0, 4, 5, 0], 'v')))
			Assert True(Region([0, 2, 3, 0], [0, 3, 4, 0], "\<C-v>").isinside(Region([0, 2, 3, 0], [0, 4, 5, 0], 'v')))
			Assert True(Region([0, 3, 4, 0], [0, 4, 5, 0], "\<C-v>").isinside(Region([0, 2, 3, 0], [0, 4, 5, 0], 'v')))
			Assert True(Region([0, 2, 6, 0], [0, 3, 7, 0], "\<C-v>").isinside(Region([0, 2, 3, 0], [0, 4, 5, 0], 'v')))
			Assert True(Region([0, 3, 1, 0], [0, 4, 2, 0], "\<C-v>").isinside(Region([0, 2, 3, 0], [0, 4, 5, 0], 'v')))

			" a blockwise region in a linewise region
			Assert True(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").isinside(Region([0, 2, 3, 0], [0, 4, 5, 0], 'V')))
			Assert True(Region([0, 2, 1, 0], [0, 4, 4, 0], "\<C-v>").isinside(Region([0, 2, 3, 0], [0, 4, 5, 0], 'V')))
			Assert True(Region([0, 2, 4, 0], [0, 4, 7, 0], "\<C-v>").isinside(Region([0, 2, 3, 0], [0, 4, 5, 0], 'V')))
			Assert True(Region([0, 2, 1, 0], [0, 3, 4, 0], "\<C-v>").isinside(Region([0, 2, 3, 0], [0, 4, 5, 0], 'V')))
			Assert True(Region([0, 2, 4, 0], [0, 3, 7, 0], "\<C-v>").isinside(Region([0, 2, 3, 0], [0, 4, 5, 0], 'V')))
			Assert True(Region([0, 3, 1, 0], [0, 4, 4, 0], "\<C-v>").isinside(Region([0, 2, 3, 0], [0, 4, 5, 0], 'V')))
			Assert True(Region([0, 3, 4, 0], [0, 4, 7, 0], "\<C-v>").isinside(Region([0, 2, 3, 0], [0, 4, 5, 0], 'V')))

			" a blockwise region in a blockwise region
			Assert True(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").isinside(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert True(Region([0, 2, 3, 0], [0, 3, 4, 0], "\<C-v>").isinside(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert True(Region([0, 3, 3, 0], [0, 4, 4, 0], "\<C-v>").isinside(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert True(Region([0, 2, 4, 0], [0, 3, 5, 0], "\<C-v>").isinside(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert True(Region([0, 3, 4, 0], [0, 4, 5, 0], "\<C-v>").isinside(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
		End

		It returns FALSE if itself is not inside a region
			" a characterwise region not in a characterwise region
			Assert False(Region([0, 2, 2, 0], [0, 2, 5, 0], 'v').isinside(Region([0, 2, 4, 0], [0, 4, 4, 0], 'v')))
			Assert False(Region([0, 1, 6, 0], [0, 2, 3, 0], 'v').isinside(Region([0, 2, 4, 0], [0, 4, 4, 0], 'v')))
			Assert False(Region([0, 2, 3, 0], [0, 2, 4, 0], 'v').isinside(Region([0, 2, 4, 0], [0, 4, 4, 0], 'v')))
			Assert False(Region([0, 4, 4, 0], [0, 4, 5, 0], 'v').isinside(Region([0, 2, 4, 0], [0, 4, 4, 0], 'v')))
			Assert False(Region([0, 4, 5, 0], [0, 5, 1, 0], 'v').isinside(Region([0, 2, 4, 0], [0, 4, 4, 0], 'v')))
			Assert False(Region([0, 5, 2, 0], [0, 5, 5, 0], 'v').isinside(Region([0, 2, 4, 0], [0, 4, 4, 0], 'v')))

			" a characterwise region not in a linewise region
			Assert False(Region([0, 1, 1, 0], [0, 1, 7, 0], 'v').isinside(Region([0, 2, 4, 0], [0, 4, 4, 0], 'V')))
			Assert False(Region([0, 5, 1, 0], [0, 5, 7, 0], 'v').isinside(Region([0, 2, 4, 0], [0, 4, 4, 0], 'V')))

			" a characterwise region not in a blockwise region
			Assert False(Region([0, 1, 3, 0], [0, 1, 5, 0], 'v').isinside(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert False(Region([0, 1, 3, 0], [0, 2, 2, 0], 'v').isinside(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert False(Region([0, 2, 1, 0], [0, 2, 2, 0], 'v').isinside(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert False(Region([0, 4, 6, 0], [0, 4, 7, 0], 'v').isinside(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert False(Region([0, 4, 6, 0], [0, 5, 2, 0], 'v').isinside(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert False(Region([0, 5, 3, 0], [0, 5, 5, 0], 'v').isinside(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))

			" a linewise region not in a characterwise region
			Assert False(Region([0, 1, 1, 0], [0, 1, 1, 0], 'V').isinside(Region([0, 2, 4, 0], [0, 4, 4, 0], 'v')))
			Assert False(Region([0, 2, 1, 0], [0, 2, 1, 0], 'V').isinside(Region([0, 2, 4, 0], [0, 4, 4, 0], 'v')))
			Assert False(Region([0, 4, 1, 0], [0, 4, 1, 0], 'V').isinside(Region([0, 2, 4, 0], [0, 4, 4, 0], 'v')))
			Assert False(Region([0, 5, 1, 0], [0, 5, 1, 0], 'V').isinside(Region([0, 2, 4, 0], [0, 4, 4, 0], 'v')))

			" a linewise region not in a linewise region
			Assert False(Region([0, 1, 1, 0], [0, 1, 1, 0], 'V').isinside(Region([0, 2, 4, 0], [0, 4, 4, 0], 'V')))
			Assert False(Region([0, 5, 1, 0], [0, 5, 1, 0], 'V').isinside(Region([0, 2, 4, 0], [0, 4, 4, 0], 'V')))

			" a linewise region not in a blockwise region
			Assert False(Region([0, 1, 1, 0], [0, 1, 1, 0], 'V').isinside(Region([0, 2, 1, 0], [0, 4, 8, 0], "\<C-v>")))
			Assert False(Region([0, 5, 1, 0], [0, 5, 1, 0], 'V').isinside(Region([0, 2, 1, 0], [0, 4, 8, 0], "\<C-v>")))
			Assert False(Region([0, 2, 1, 0], [0, 2, 1, 0], 'V').isinside(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert False(Region([0, 3, 1, 0], [0, 3, 1, 0], 'V').isinside(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert False(Region([0, 4, 1, 0], [0, 4, 1, 0], 'V').isinside(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert False(Region([0, 2, 1, 0], [0, 4, 1, 0], 'V').isinside(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))

			" a blockwise region not in a characterwise region
			Assert False(Region([0, 1, 1, 0], [0, 2, 2, 0], "\<C-v>").isinside(Region([0, 2, 3, 0], [0, 4, 5, 0], 'v')))
			Assert False(Region([0, 1, 1, 0], [0, 3, 4, 0], "\<C-v>").isinside(Region([0, 2, 3, 0], [0, 4, 5, 0], 'v')))
			Assert False(Region([0, 4, 6, 0], [0, 5, 7, 0], "\<C-v>").isinside(Region([0, 2, 3, 0], [0, 4, 5, 0], 'v')))
			Assert False(Region([0, 3, 4, 0], [0, 5, 7, 0], "\<C-v>").isinside(Region([0, 2, 3, 0], [0, 4, 5, 0], 'v')))

			" a blockwise region not in a linewise region
			Assert False(Region([0, 1, 1, 0], [0, 1, 7, 0], "\<C-v>").isinside(Region([0, 2, 3, 0], [0, 4, 5, 0], 'V')))
			Assert False(Region([0, 5, 1, 0], [0, 5, 7, 0], "\<C-v>").isinside(Region([0, 2, 3, 0], [0, 4, 5, 0], 'V')))

			" blockwise region not in a blockwise region
			Assert False(Region([0, 1, 1, 0], [0, 2, 2, 0], "\<C-v>").isinside(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert False(Region([0, 1, 6, 0], [0, 2, 7, 0], "\<C-v>").isinside(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert False(Region([0, 6, 1, 0], [0, 7, 2, 0], "\<C-v>").isinside(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert False(Region([0, 6, 6, 0], [0, 7, 7, 0], "\<C-v>").isinside(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert False(Region([0, 2, 1, 0], [0, 4, 2, 0], "\<C-v>").isinside(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert False(Region([0, 2, 6, 0], [0, 4, 7, 0], "\<C-v>").isinside(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert False(Region([0, 1, 3, 0], [0, 1, 5, 0], "\<C-v>").isinside(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert False(Region([0, 5, 3, 0], [0, 5, 5, 0], "\<C-v>").isinside(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
		End
	End

	Context .touches(head, tail, ...)
		It returns TRUE if itself is touching a region
			" a characterwise region touches a characterwise region
			Assert True(Region([0, 1, 1, 0], [0, 2, 4, 0], 'v').touches([0, 2, 4, 0], [0, 4, 4, 0], 'v'))
			Assert True(Region([0, 4, 4, 0], [0, 5, 7, 0], 'v').touches([0, 2, 4, 0], [0, 4, 4, 0], 'v'))
			Assert True(Region([0, 1, 1, 0], [0, 5, 7, 0], 'v').touches([0, 2, 4, 0], [0, 4, 4, 0], 'v'))
			Assert True(Region([0, 2, 4, 0], [0, 4, 4, 0], 'v').touches([0, 2, 4, 0], [0, 4, 4, 0], 'v'))
			Assert True(Region([0, 2, 5, 0], [0, 4, 3, 0], 'v').touches([0, 2, 4, 0], [0, 4, 4, 0], 'v'))
			Assert True(Region([0, 2, 3, 0], [0, 4, 5, 0], 'v').touches([0, 2, 4, 0], [0, 4, 4, 0], 'v'))

			" a characterwise region touches a linewise region
			Assert True(Region([0, 1, 1, 0], [0, 2, 1, 0], 'v').touches([0, 2, 4, 0], [0, 4, 4, 0], 'V'))
			Assert True(Region([0, 2, 1, 0], [0, 2, 7, 0], 'v').touches([0, 2, 4, 0], [0, 4, 4, 0], 'V'))
			Assert True(Region([0, 4, 7, 0], [0, 5, 7, 0], 'v').touches([0, 2, 4, 0], [0, 4, 4, 0], 'V'))
			Assert True(Region([0, 1, 1, 0], [0, 5, 7, 0], 'v').touches([0, 2, 4, 0], [0, 4, 4, 0], 'V'))

			" a characterwise region touches a blockwise region
			Assert True(Region([0, 1, 1, 0], [0, 2, 3, 0], 'v').touches([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert True(Region([0, 4, 5, 0], [0, 5, 7, 0], 'v').touches([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert True(Region([0, 1, 1, 0], [0, 5, 7, 0], 'v').touches([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert True(Region([0, 2, 3, 0], [0, 4, 5, 0], 'v').touches([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert True(Region([0, 2, 4, 0], [0, 4, 4, 0], 'v').touches([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert True(Region([0, 2, 2, 0], [0, 4, 6, 0], 'v').touches([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert True(Region([0, 3, 1, 0], [0, 3, 3, 0], 'v').touches([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert True(Region([0, 3, 5, 0], [0, 3, 7, 0], 'v').touches([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))

			" a linewise region touches a characterwise region
			Assert True(Region([0, 2, 1, 0], [0, 2, 1, 0], 'V').touches([0, 2, 3, 0], [0, 4, 5, 0], 'v'))
			Assert True(Region([0, 3, 1, 0], [0, 3, 1, 0], 'V').touches([0, 2, 3, 0], [0, 4, 5, 0], 'v'))
			Assert True(Region([0, 4, 1, 0], [0, 4, 1, 0], 'V').touches([0, 2, 3, 0], [0, 4, 5, 0], 'v'))
			Assert True(Region([0, 1, 1, 0], [0, 2, 1, 0], 'V').touches([0, 2, 3, 0], [0, 4, 5, 0], 'v'))
			Assert True(Region([0, 4, 1, 0], [0, 5, 1, 0], 'V').touches([0, 2, 3, 0], [0, 4, 5, 0], 'v'))
			Assert True(Region([0, 2, 1, 0], [0, 4, 1, 0], 'V').touches([0, 2, 3, 0], [0, 4, 5, 0], 'v'))
			Assert True(Region([0, 1, 1, 0], [0, 5, 1, 0], 'V').touches([0, 2, 3, 0], [0, 4, 5, 0], 'v'))

			" a linewise region touches a linewise region
			Assert True(Region([0, 2, 1, 0], [0, 2, 1, 0], 'V').touches([0, 2, 3, 0], [0, 4, 5, 0], 'V'))
			Assert True(Region([0, 3, 1, 0], [0, 3, 1, 0], 'V').touches([0, 2, 3, 0], [0, 4, 5, 0], 'V'))
			Assert True(Region([0, 4, 1, 0], [0, 4, 1, 0], 'V').touches([0, 2, 3, 0], [0, 4, 5, 0], 'V'))
			Assert True(Region([0, 1, 1, 0], [0, 2, 1, 0], 'V').touches([0, 2, 3, 0], [0, 4, 5, 0], 'V'))
			Assert True(Region([0, 4, 1, 0], [0, 5, 1, 0], 'V').touches([0, 2, 3, 0], [0, 4, 5, 0], 'V'))
			Assert True(Region([0, 2, 1, 0], [0, 4, 1, 0], 'V').touches([0, 2, 3, 0], [0, 4, 5, 0], 'V'))
			Assert True(Region([0, 1, 1, 0], [0, 5, 1, 0], 'V').touches([0, 2, 3, 0], [0, 4, 5, 0], 'V'))

			" a linewise region touches a blockwise region
			Assert True(Region([0, 2, 1, 0], [0, 2, 1, 0], 'V').touches([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert True(Region([0, 3, 1, 0], [0, 3, 1, 0], 'V').touches([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert True(Region([0, 4, 1, 0], [0, 4, 1, 0], 'V').touches([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert True(Region([0, 1, 1, 0], [0, 2, 1, 0], 'V').touches([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert True(Region([0, 4, 1, 0], [0, 5, 1, 0], 'V').touches([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert True(Region([0, 2, 1, 0], [0, 4, 1, 0], 'V').touches([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert True(Region([0, 1, 1, 0], [0, 5, 1, 0], 'V').touches([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))

			" a blockwise region touches a characterwise region
			Assert True(Region([0, 1, 1, 0], [0, 2, 3, 0], "\<C-v>").touches([0, 2, 3, 0], [0, 4, 5, 0], 'v'))
			Assert True(Region([0, 4, 5, 0], [0, 5, 7, 0], "\<C-v>").touches([0, 2, 3, 0], [0, 4, 5, 0], 'v'))
			Assert True(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").touches([0, 2, 3, 0], [0, 4, 5, 0], 'v'))
			Assert True(Region([0, 1, 1, 0], [0, 5, 7, 0], "\<C-v>").touches([0, 2, 3, 0], [0, 4, 5, 0], 'v'))
			Assert True(Region([0, 2, 2, 0], [0, 4, 6, 0], "\<C-v>").touches([0, 2, 3, 0], [0, 4, 5, 0], 'v'))
			Assert True(Region([0, 2, 4, 0], [0, 4, 4, 0], "\<C-v>").touches([0, 2, 3, 0], [0, 4, 5, 0], 'v'))
			Assert True(Region([0, 2, 1, 0], [0, 4, 3, 0], "\<C-v>").touches([0, 2, 3, 0], [0, 4, 5, 0], 'v'))
			Assert True(Region([0, 2, 5, 0], [0, 4, 7, 0], "\<C-v>").touches([0, 2, 3, 0], [0, 4, 5, 0], 'v'))

			" a blockwise region touches a linewise region
			Assert True(Region([0, 1, 3, 0], [0, 2, 5, 0], "\<C-v>").touches([0, 2, 3, 0], [0, 4, 5, 0], 'V'))
			Assert True(Region([0, 4, 3, 0], [0, 5, 5, 0], "\<C-v>").touches([0, 2, 3, 0], [0, 4, 5, 0], 'V'))
			Assert True(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").touches([0, 2, 3, 0], [0, 4, 5, 0], 'V'))
			Assert True(Region([0, 1, 1, 0], [0, 5, 7, 0], "\<C-v>").touches([0, 2, 3, 0], [0, 4, 5, 0], 'V'))
			Assert True(Region([0, 1, 1, 0], [0, 2, 2, 0], "\<C-v>").touches([0, 2, 3, 0], [0, 4, 5, 0], 'V'))
			Assert True(Region([0, 1, 1, 0], [0, 5, 2, 0], "\<C-v>").touches([0, 2, 3, 0], [0, 4, 5, 0], 'V'))
			Assert True(Region([0, 1, 6, 0], [0, 5, 7, 0], "\<C-v>").touches([0, 2, 3, 0], [0, 4, 5, 0], 'V'))

			" a blockwise region touches a blockwise region
			Assert True(Region([0, 1, 2, 0], [0, 2, 3, 0], "\<C-v>").touches([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert True(Region([0, 4, 5, 0], [0, 5, 6, 0], "\<C-v>").touches([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert True(Region([0, 1, 5, 0], [0, 2, 6, 0], "\<C-v>").touches([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert True(Region([0, 4, 2, 0], [0, 5, 3, 0], "\<C-v>").touches([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert True(Region([0, 1, 1, 0], [0, 5, 7, 0], "\<C-v>").touches([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert True(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").touches([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert True(Region([0, 1, 1, 0], [0, 5, 3, 0], "\<C-v>").touches([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert True(Region([0, 1, 5, 0], [0, 5, 6, 0], "\<C-v>").touches([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
		End

		It returns FALSE if itself is not touching a region
			" a characterwise region does not touch a characterwise region
			Assert False(Region([0, 1, 1, 0], [0, 2, 3, 0], 'v').touches([0, 2, 4, 0], [0, 4, 4, 0], 'v'))
			Assert False(Region([0, 4, 5, 0], [0, 5, 7, 0], 'v').touches([0, 2, 4, 0], [0, 4, 4, 0], 'v'))
			Assert False(Region([0, 2, 1, 0], [0, 2, 3, 0], 'v').touches([0, 2, 4, 0], [0, 4, 4, 0], 'v'))

			" a characterwise region does not touch a linewise region
			Assert False(Region([0, 1, 1, 0], [0, 1, 7, 0], 'v').touches([0, 2, 4, 0], [0, 4, 4, 0], 'V'))
			Assert False(Region([0, 5, 1, 0], [0, 5, 7, 0], 'v').touches([0, 2, 4, 0], [0, 4, 4, 0], 'V'))

			" a characterwise region does not touch a blockwise region
			Assert False(Region([0, 1, 1, 0], [0, 1, 7, 0], 'v').touches([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert False(Region([0, 5, 1, 0], [0, 5, 7, 0], 'v').touches([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert False(Region([0, 2, 1, 0], [0, 2, 2, 0], 'v').touches([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert False(Region([0, 2, 6, 0], [0, 2, 7, 0], 'v').touches([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert False(Region([0, 3, 1, 0], [0, 3, 2, 0], 'v').touches([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert False(Region([0, 3, 6, 0], [0, 3, 7, 0], 'v').touches([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert False(Region([0, 4, 1, 0], [0, 4, 2, 0], 'v').touches([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert False(Region([0, 4, 6, 0], [0, 4, 7, 0], 'v').touches([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert False(Region([0, 1, 1, 0], [0, 2, 2, 0], 'v').touches([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert False(Region([0, 4, 6, 0], [0, 5, 7, 0], 'v').touches([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))

			" a linewise region does not touch a characterwise region
			Assert False(Region([0, 1, 1, 0], [0, 1, 1, 0], 'V').touches([0, 2, 3, 0], [0, 4, 5, 0], 'v'))
			Assert False(Region([0, 5, 1, 0], [0, 5, 1, 0], 'V').touches([0, 2, 3, 0], [0, 4, 5, 0], 'v'))

			" a linewise region does not touch a linewise region
			Assert False(Region([0, 1, 1, 0], [0, 1, 1, 0], 'V').touches([0, 2, 3, 0], [0, 4, 5, 0], 'V'))
			Assert False(Region([0, 5, 1, 0], [0, 5, 1, 0], 'V').touches([0, 2, 3, 0], [0, 4, 5, 0], 'V'))

			" a linewise region does not touch a blockwise region
			Assert False(Region([0, 1, 1, 0], [0, 1, 1, 0], 'V').touches([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert False(Region([0, 5, 1, 0], [0, 5, 1, 0], 'V').touches([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))

			" a blockwise region does not touch a characterwise region
			Assert False(Region([0, 1, 1, 0], [0, 2, 2, 0], "\<C-v>").touches([0, 2, 3, 0], [0, 4, 5, 0], 'v'))
			Assert False(Region([0, 4, 6, 0], [0, 5, 7, 0], "\<C-v>").touches([0, 2, 3, 0], [0, 4, 5, 0], 'v'))

			" a blockwise region does not touch a linewise region
			Assert False(Region([0, 1, 1, 0], [0, 1, 7, 0], "\<C-v>").touches([0, 2, 3, 0], [0, 4, 5, 0], 'V'))
			Assert False(Region([0, 5, 1, 0], [0, 5, 7, 0], "\<C-v>").touches([0, 2, 3, 0], [0, 4, 5, 0], 'V'))

			" a blockwise region does not touch a blockwise region
			Assert False(Region([0, 1, 1, 0], [0, 1, 7, 0], "\<C-v>").touches([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert False(Region([0, 5, 1, 0], [0, 5, 7, 0], "\<C-v>").touches([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert False(Region([0, 1, 1, 0], [0, 5, 2, 0], "\<C-v>").touches([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert False(Region([0, 1, 6, 0], [0, 5, 7, 0], "\<C-v>").touches([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert False(Region([0, 1, 1, 0], [0, 1, 2, 0], "\<C-v>").touches([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert False(Region([0, 1, 6, 0], [0, 1, 7, 0], "\<C-v>").touches([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert False(Region([0, 5, 1, 0], [0, 5, 2, 0], "\<C-v>").touches([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert False(Region([0, 5, 6, 0], [0, 5, 7, 0], "\<C-v>").touches([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert False(Region([0, 1, 3, 0], [0, 1, 5, 0], "\<C-v>").touches([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert False(Region([0, 5, 3, 0], [0, 5, 5, 0], "\<C-v>").touches([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert False(Region([0, 2, 1, 0], [0, 4, 2, 0], "\<C-v>").touches([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
			Assert False(Region([0, 2, 6, 0], [0, 4, 7, 0], "\<C-v>").touches([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>"))
		End

		It throws an exception with inappropriate arguments
			let head = [0, 1, 1, 0]
			let tail = [0, 1, 1, 0]
			let region = Region(head, tail, 'v')
			Throws /^Vim(echoerr):multiselect: Invalid argument for Region.touches()/ region.touches('')
			Throws /^Vim(echoerr):multiselect: Invalid argument for Region.touches()/ region.touches(1, [0, 1, 1, 0])
			Throws /^Vim(echoerr):multiselect: Invalid argument for Region.touches()/ region.touches([0, 1, 1, 0], 1)
		End
	End

	Context .touches(head)
		It returns TRUE if itself is touching a position
			Assert True(Region([0, 2, 5, 0], [0, 3, 4, 0], 'v').touches([0, 3, 4, 0]))
			Assert True(Region([0, 3, 1, 0], [0, 3, 7, 0], 'v').touches([0, 3, 4, 0]))
			Assert True(Region([0, 3, 4, 0], [0, 4, 3, 0], 'v').touches([0, 3, 4, 0]))
			Assert True(Region([0, 2, 5, 0], [0, 3, 3, 0], 'V').touches([0, 3, 4, 0]))
			Assert True(Region([0, 3, 1, 0], [0, 3, 7, 0], 'V').touches([0, 3, 4, 0]))
			Assert True(Region([0, 3, 5, 0], [0, 4, 3, 0], 'V').touches([0, 3, 4, 0]))
			Assert True(Region([0, 2, 3, 0], [0, 3, 4, 0], "\<C-v>").touches([0, 3, 4, 0]))
			Assert True(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").touches([0, 3, 4, 0]))
			Assert True(Region([0, 3, 4, 0], [0, 4, 5, 0], "\<C-v>").touches([0, 3, 4, 0]))
		End

		It returns FALSE if itself is not touching a position
			Assert False(Region([0, 1, 5, 0], [0, 3, 3, 0], 'v').touches([0, 3, 4, 0]))
			Assert False(Region([0, 3, 5, 0], [0, 5, 3, 0], 'v').touches([0, 3, 4, 0]))
			Assert False(Region([0, 1, 5, 0], [0, 2, 3, 0], 'V').touches([0, 3, 4, 0]))
			Assert False(Region([0, 4, 5, 0], [0, 5, 3, 0], 'V').touches([0, 3, 4, 0]))
			Assert False(Region([0, 1, 5, 0], [0, 3, 3, 0], "\<C-v>").touches([0, 3, 4, 0]))
			Assert False(Region([0, 3, 5, 0], [0, 5, 7, 0], "\<C-v>").touches([0, 3, 4, 0]))
		End
	End

	Context .touches(lnum)
		It returns TRUE if itself is touching a line
			Assert True(Region([0, 2, 1, 0], [0, 4, 8, 0], 'v').touches(3))
			Assert True(Region([0, 2, 1, 0], [0, 4, 8, 0], 'V').touches(3))
			Assert True(Region([0, 2, 1, 0], [0, 4, 8, 0], "\<C-v>").touches(3))
		End

		It returns FALSE if itself is not touching a line
			Assert False(Region([0, 2, 1, 0], [0, 4, 8, 0], 'v').touches(1))
			Assert False(Region([0, 2, 1, 0], [0, 4, 8, 0], 'V').touches(1))
			Assert False(Region([0, 2, 1, 0], [0, 4, 8, 0], "\<C-v>").touches(1))
		End
	End

	Context .touches(startlnum, endlnum)
		It returns TRUE if itself is touching a range between two lines
			Assert True(Region([0, 2, 1, 0], [0, 4, 8, 0], 'v').touches(1, 4))
			Assert True(Region([0, 2, 1, 0], [0, 4, 8, 0], 'V').touches(1, 4))
			Assert True(Region([0, 2, 1, 0], [0, 4, 8, 0], "\<C-v>").touches(1, 4))
		End

		It returns FALSE if itself is not touching a line
			Assert False(Region([0, 3, 1, 0], [0, 4, 8, 0], 'v').touches(1, 2))
			Assert False(Region([0, 3, 1, 0], [0, 4, 8, 0], 'V').touches(1, 2))
			Assert False(Region([0, 3, 1, 0], [0, 4, 8, 0], "\<C-v>").touches(1, 2))
		End
	End

	Context .touches(region)
		It returns TRUE if itself is touching a region
			" a characterwise region touches a characterwise region
			Assert True(Region([0, 1, 1, 0], [0, 2, 4, 0], 'v').touches(Region([0, 2, 4, 0], [0, 4, 4, 0], 'v')))
			Assert True(Region([0, 4, 4, 0], [0, 5, 7, 0], 'v').touches(Region([0, 2, 4, 0], [0, 4, 4, 0], 'v')))
			Assert True(Region([0, 1, 1, 0], [0, 5, 7, 0], 'v').touches(Region([0, 2, 4, 0], [0, 4, 4, 0], 'v')))
			Assert True(Region([0, 2, 4, 0], [0, 4, 4, 0], 'v').touches(Region([0, 2, 4, 0], [0, 4, 4, 0], 'v')))
			Assert True(Region([0, 2, 5, 0], [0, 4, 3, 0], 'v').touches(Region([0, 2, 4, 0], [0, 4, 4, 0], 'v')))
			Assert True(Region([0, 2, 3, 0], [0, 4, 5, 0], 'v').touches(Region([0, 2, 4, 0], [0, 4, 4, 0], 'v')))

			" a characterwise region touches a linewise region
			Assert True(Region([0, 1, 1, 0], [0, 2, 1, 0], 'v').touches(Region([0, 2, 4, 0], [0, 4, 4, 0], 'V')))
			Assert True(Region([0, 2, 1, 0], [0, 2, 7, 0], 'v').touches(Region([0, 2, 4, 0], [0, 4, 4, 0], 'V')))
			Assert True(Region([0, 4, 7, 0], [0, 5, 7, 0], 'v').touches(Region([0, 2, 4, 0], [0, 4, 4, 0], 'V')))
			Assert True(Region([0, 1, 1, 0], [0, 5, 7, 0], 'v').touches(Region([0, 2, 4, 0], [0, 4, 4, 0], 'V')))

			" a characterwise region touches a blockwise region
			Assert True(Region([0, 1, 1, 0], [0, 2, 3, 0], 'v').touches(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert True(Region([0, 4, 5, 0], [0, 5, 7, 0], 'v').touches(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert True(Region([0, 1, 1, 0], [0, 5, 7, 0], 'v').touches(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert True(Region([0, 2, 3, 0], [0, 4, 5, 0], 'v').touches(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert True(Region([0, 2, 4, 0], [0, 4, 4, 0], 'v').touches(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert True(Region([0, 2, 2, 0], [0, 4, 6, 0], 'v').touches(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert True(Region([0, 3, 1, 0], [0, 3, 3, 0], 'v').touches(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert True(Region([0, 3, 5, 0], [0, 3, 7, 0], 'v').touches(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))

			" a linewise region touches a characterwise region
			Assert True(Region([0, 2, 1, 0], [0, 2, 1, 0], 'V').touches(Region([0, 2, 3, 0], [0, 4, 5, 0], 'v')))
			Assert True(Region([0, 3, 1, 0], [0, 3, 1, 0], 'V').touches(Region([0, 2, 3, 0], [0, 4, 5, 0], 'v')))
			Assert True(Region([0, 4, 1, 0], [0, 4, 1, 0], 'V').touches(Region([0, 2, 3, 0], [0, 4, 5, 0], 'v')))
			Assert True(Region([0, 1, 1, 0], [0, 2, 1, 0], 'V').touches(Region([0, 2, 3, 0], [0, 4, 5, 0], 'v')))
			Assert True(Region([0, 4, 1, 0], [0, 5, 1, 0], 'V').touches(Region([0, 2, 3, 0], [0, 4, 5, 0], 'v')))
			Assert True(Region([0, 2, 1, 0], [0, 4, 1, 0], 'V').touches(Region([0, 2, 3, 0], [0, 4, 5, 0], 'v')))
			Assert True(Region([0, 1, 1, 0], [0, 5, 1, 0], 'V').touches(Region([0, 2, 3, 0], [0, 4, 5, 0], 'v')))

			" a linewise region touches a linewise region
			Assert True(Region([0, 2, 1, 0], [0, 2, 1, 0], 'V').touches(Region([0, 2, 3, 0], [0, 4, 5, 0], 'V')))
			Assert True(Region([0, 3, 1, 0], [0, 3, 1, 0], 'V').touches(Region([0, 2, 3, 0], [0, 4, 5, 0], 'V')))
			Assert True(Region([0, 4, 1, 0], [0, 4, 1, 0], 'V').touches(Region([0, 2, 3, 0], [0, 4, 5, 0], 'V')))
			Assert True(Region([0, 1, 1, 0], [0, 2, 1, 0], 'V').touches(Region([0, 2, 3, 0], [0, 4, 5, 0], 'V')))
			Assert True(Region([0, 4, 1, 0], [0, 5, 1, 0], 'V').touches(Region([0, 2, 3, 0], [0, 4, 5, 0], 'V')))
			Assert True(Region([0, 2, 1, 0], [0, 4, 1, 0], 'V').touches(Region([0, 2, 3, 0], [0, 4, 5, 0], 'V')))
			Assert True(Region([0, 1, 1, 0], [0, 5, 1, 0], 'V').touches(Region([0, 2, 3, 0], [0, 4, 5, 0], 'V')))

			" a linewise region touches a blockwise region
			Assert True(Region([0, 2, 1, 0], [0, 2, 1, 0], 'V').touches(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert True(Region([0, 3, 1, 0], [0, 3, 1, 0], 'V').touches(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert True(Region([0, 4, 1, 0], [0, 4, 1, 0], 'V').touches(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert True(Region([0, 1, 1, 0], [0, 2, 1, 0], 'V').touches(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert True(Region([0, 4, 1, 0], [0, 5, 1, 0], 'V').touches(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert True(Region([0, 2, 1, 0], [0, 4, 1, 0], 'V').touches(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert True(Region([0, 1, 1, 0], [0, 5, 1, 0], 'V').touches(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))

			" a blockwise region touches a characterwise region
			Assert True(Region([0, 1, 1, 0], [0, 2, 3, 0], "\<C-v>").touches(Region([0, 2, 3, 0], [0, 4, 5, 0], 'v')))
			Assert True(Region([0, 4, 5, 0], [0, 5, 7, 0], "\<C-v>").touches(Region([0, 2, 3, 0], [0, 4, 5, 0], 'v')))
			Assert True(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").touches(Region([0, 2, 3, 0], [0, 4, 5, 0], 'v')))
			Assert True(Region([0, 1, 1, 0], [0, 5, 7, 0], "\<C-v>").touches(Region([0, 2, 3, 0], [0, 4, 5, 0], 'v')))
			Assert True(Region([0, 2, 2, 0], [0, 4, 6, 0], "\<C-v>").touches(Region([0, 2, 3, 0], [0, 4, 5, 0], 'v')))
			Assert True(Region([0, 2, 4, 0], [0, 4, 4, 0], "\<C-v>").touches(Region([0, 2, 3, 0], [0, 4, 5, 0], 'v')))
			Assert True(Region([0, 2, 1, 0], [0, 4, 3, 0], "\<C-v>").touches(Region([0, 2, 3, 0], [0, 4, 5, 0], 'v')))
			Assert True(Region([0, 2, 5, 0], [0, 4, 7, 0], "\<C-v>").touches(Region([0, 2, 3, 0], [0, 4, 5, 0], 'v')))

			" a blockwise region touches a linewise region
			Assert True(Region([0, 1, 3, 0], [0, 2, 5, 0], "\<C-v>").touches(Region([0, 2, 3, 0], [0, 4, 5, 0], 'V')))
			Assert True(Region([0, 4, 3, 0], [0, 5, 5, 0], "\<C-v>").touches(Region([0, 2, 3, 0], [0, 4, 5, 0], 'V')))
			Assert True(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").touches(Region([0, 2, 3, 0], [0, 4, 5, 0], 'V')))
			Assert True(Region([0, 1, 1, 0], [0, 5, 7, 0], "\<C-v>").touches(Region([0, 2, 3, 0], [0, 4, 5, 0], 'V')))
			Assert True(Region([0, 1, 1, 0], [0, 2, 2, 0], "\<C-v>").touches(Region([0, 2, 3, 0], [0, 4, 5, 0], 'V')))
			Assert True(Region([0, 1, 1, 0], [0, 5, 2, 0], "\<C-v>").touches(Region([0, 2, 3, 0], [0, 4, 5, 0], 'V')))
			Assert True(Region([0, 1, 6, 0], [0, 5, 7, 0], "\<C-v>").touches(Region([0, 2, 3, 0], [0, 4, 5, 0], 'V')))

			" a blockwise region touches a blockwise region
			Assert True(Region([0, 1, 2, 0], [0, 2, 3, 0], "\<C-v>").touches(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert True(Region([0, 4, 5, 0], [0, 5, 6, 0], "\<C-v>").touches(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert True(Region([0, 1, 5, 0], [0, 2, 6, 0], "\<C-v>").touches(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert True(Region([0, 4, 2, 0], [0, 5, 3, 0], "\<C-v>").touches(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert True(Region([0, 1, 1, 0], [0, 5, 7, 0], "\<C-v>").touches(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert True(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>").touches(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert True(Region([0, 1, 1, 0], [0, 5, 3, 0], "\<C-v>").touches(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert True(Region([0, 1, 5, 0], [0, 5, 6, 0], "\<C-v>").touches(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
		End

		It returns FALSE if itself is not touching a region
			" a characterwise region does not touch a characterwise region
			Assert False(Region([0, 1, 1, 0], [0, 2, 3, 0], 'v').touches(Region([0, 2, 4, 0], [0, 4, 4, 0], 'v')))
			Assert False(Region([0, 4, 5, 0], [0, 5, 7, 0], 'v').touches(Region([0, 2, 4, 0], [0, 4, 4, 0], 'v')))
			Assert False(Region([0, 2, 1, 0], [0, 2, 3, 0], 'v').touches(Region([0, 2, 4, 0], [0, 4, 4, 0], 'v')))

			" a characterwise region does not touch a linewise region
			Assert False(Region([0, 1, 1, 0], [0, 1, 7, 0], 'v').touches(Region([0, 2, 4, 0], [0, 4, 4, 0], 'V')))
			Assert False(Region([0, 5, 1, 0], [0, 5, 7, 0], 'v').touches(Region([0, 2, 4, 0], [0, 4, 4, 0], 'V')))

			" a characterwise region does not touch a blockwise region
			Assert False(Region([0, 1, 1, 0], [0, 1, 7, 0], 'v').touches(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert False(Region([0, 5, 1, 0], [0, 5, 7, 0], 'v').touches(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert False(Region([0, 2, 1, 0], [0, 2, 2, 0], 'v').touches(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert False(Region([0, 2, 6, 0], [0, 2, 7, 0], 'v').touches(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert False(Region([0, 3, 1, 0], [0, 3, 2, 0], 'v').touches(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert False(Region([0, 3, 6, 0], [0, 3, 7, 0], 'v').touches(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert False(Region([0, 4, 1, 0], [0, 4, 2, 0], 'v').touches(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert False(Region([0, 4, 6, 0], [0, 4, 7, 0], 'v').touches(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert False(Region([0, 1, 1, 0], [0, 2, 2, 0], 'v').touches(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert False(Region([0, 4, 6, 0], [0, 5, 7, 0], 'v').touches(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))

			" a linewise region does not touch a characterwise region
			Assert False(Region([0, 1, 1, 0], [0, 1, 1, 0], 'V').touches(Region([0, 2, 3, 0], [0, 4, 5, 0], 'v')))
			Assert False(Region([0, 5, 1, 0], [0, 5, 1, 0], 'V').touches(Region([0, 2, 3, 0], [0, 4, 5, 0], 'v')))

			" a linewise region does not touch a linewise region
			Assert False(Region([0, 1, 1, 0], [0, 1, 1, 0], 'V').touches(Region([0, 2, 3, 0], [0, 4, 5, 0], 'V')))
			Assert False(Region([0, 5, 1, 0], [0, 5, 1, 0], 'V').touches(Region([0, 2, 3, 0], [0, 4, 5, 0], 'V')))

			" a linewise region does not touch a blockwise region
			Assert False(Region([0, 1, 1, 0], [0, 1, 1, 0], 'V').touches(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert False(Region([0, 5, 1, 0], [0, 5, 1, 0], 'V').touches(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))

			" a blockwise region does not touch a characterwise region
			Assert False(Region([0, 1, 1, 0], [0, 2, 2, 0], "\<C-v>").touches(Region([0, 2, 3, 0], [0, 4, 5, 0], 'v')))
			Assert False(Region([0, 4, 6, 0], [0, 5, 7, 0], "\<C-v>").touches(Region([0, 2, 3, 0], [0, 4, 5, 0], 'v')))

			" a blockwise region does not touch a linewise region
			Assert False(Region([0, 1, 1, 0], [0, 1, 7, 0], "\<C-v>").touches(Region([0, 2, 3, 0], [0, 4, 5, 0], 'V')))
			Assert False(Region([0, 5, 1, 0], [0, 5, 7, 0], "\<C-v>").touches(Region([0, 2, 3, 0], [0, 4, 5, 0], 'V')))

			" a blockwise region does not touch a blockwise region
			Assert False(Region([0, 1, 1, 0], [0, 1, 7, 0], "\<C-v>").touches(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert False(Region([0, 5, 1, 0], [0, 5, 7, 0], "\<C-v>").touches(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert False(Region([0, 1, 1, 0], [0, 5, 2, 0], "\<C-v>").touches(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert False(Region([0, 1, 6, 0], [0, 5, 7, 0], "\<C-v>").touches(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert False(Region([0, 1, 1, 0], [0, 1, 2, 0], "\<C-v>").touches(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert False(Region([0, 1, 6, 0], [0, 1, 7, 0], "\<C-v>").touches(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert False(Region([0, 5, 1, 0], [0, 5, 2, 0], "\<C-v>").touches(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert False(Region([0, 5, 6, 0], [0, 5, 7, 0], "\<C-v>").touches(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert False(Region([0, 1, 3, 0], [0, 1, 5, 0], "\<C-v>").touches(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert False(Region([0, 5, 3, 0], [0, 5, 5, 0], "\<C-v>").touches(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert False(Region([0, 2, 1, 0], [0, 4, 2, 0], "\<C-v>").touches(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
			Assert False(Region([0, 2, 6, 0], [0, 4, 7, 0], "\<C-v>").touches(Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")))
		End
	End
End



		End



		End

		End

		End
	End
End
" vim:set noet ts=4 sw=4 sts=-1:
