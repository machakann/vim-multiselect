Describe Multiselector
	Before
		let MS = g:MS
		let Item = g:MS.Item
		let Region = g:MS.Region
		let DEFAULTS = g:DEFAULTS
		%delete
		call append(0, [
			\ 'aaaaaaa',
			\ 'bbbbbbb',
			\ 'ccccccc',
			\ 'ddddddd',
			\ 'eeeeeee',
			\ ])
		$delete
	End

	After all
		unlet! g:autocmdcount
		augroup test-multiselect
			autocmd!
		augroup End
	End

	Context .extend(itemlist)
		It appends items in a:itemlist into self.itemlist
			let multiselector = MS.Multiselector(DEFAULTS)
			Assert True(empty(multiselector.itemlist))

			call multiselector.extend([])
			Assert Equals(multiselector.itemlist, [])

			let added = [
				\ Item(bufnr('%'), [0, 1, 1, 0], [0, 1, 1, 0], 'v'),
				\ ]
			call multiselector.extend(added)
			Assert Equals(len(multiselector.itemlist), 1)
			Assert Equals(multiselector.itemlist[0]['head'], [0, 1, 1, 0])
			Assert Equals(multiselector.last.event, 'check')
			Assert Equals(multiselector.last.itemlist, added)

			let added = [
				\ Item(bufnr('%'), [0, 2, 1, 0], [0, 2, 1, 0], 'v'),
				\ Item(bufnr('%'), [0, 3, 1, 0], [0, 3, 1, 0], 'v'),
				\ ]
			call multiselector.extend(added)
			Assert Equals(len(multiselector.itemlist), 3)
			Assert Equals(multiselector.itemlist[0]['head'], [0, 1, 1, 0])
			Assert Equals(multiselector.itemlist[1]['head'], [0, 2, 1, 0])
			Assert Equals(multiselector.itemlist[2]['head'], [0, 3, 1, 0])
			Assert Equals(multiselector.last.event, 'check')
			Assert Equals(multiselector.last.itemlist, added)
		End

		It turns on the highlight of accepted items
			let multiselector = MS.Multiselector(DEFAULTS)
			let ON = g:TRUE
			let OFF = g:FALSE
			Assert True(empty(multiselector.itemlist))

			call multiselector.extend([
				\ Item(bufnr('%'), [0, 1, 1, 0], [0, 1, 1, 0], 'v'),
				\ ])
			Assert Equals(multiselector.itemlist[0]['_histatus'](win_getid()), ON)

			call multiselector.extend([
				\ Item(bufnr('%'), [0, 2, 1, 0], [0, 2, 1, 0], 'v'),
				\ Item(bufnr('%'), [0, 3, 1, 0], [0, 3, 1, 0], 'v'),
				\ ])
			Assert Equals(multiselector.itemlist[0]['_histatus'](win_getid()), ON)
			Assert Equals(multiselector.itemlist[1]['_histatus'](win_getid()), ON)
			Assert Equals(multiselector.itemlist[2]['_histatus'](win_getid()), ON)
		End

		It triggers autocmd event 'MultiselectCheckPost' evry after appending
			let multiselector = MS.Multiselector(DEFAULTS)
			let g:autocmdcount = 0
			augroup test-multiselect
				autocmd!
				autocmd User MultiselectCheckPost let g:autocmdcount += 1
			augroup End
			Assert True(empty(multiselector.itemlist))

			call multiselector.extend([])
			Assert Equals(g:autocmdcount, 0)

			call multiselector.extend([
				\ Item(bufnr('%'), [0, 1, 1, 0], [0, 1, 1, 0], 'v'),
				\ ])
			Assert Equals(g:autocmdcount, 1)

			call multiselector.extend([
				\ Item(bufnr('%'), [0, 2, 1, 0], [0, 2, 1, 0], 'v'),
				\ Item(bufnr('%'), [0, 3, 1, 0], [0, 3, 1, 0], 'v'),
				\ ])
			Assert Equals(g:autocmdcount, 2)
		End
	End

	Context .add(item)
		It appends a:item into self.itemlist
			let multiselector = MS.Multiselector(DEFAULTS)
			let ON = g:TRUE
			let OFF = g:FALSE
			Assert True(empty(multiselector.itemlist))

			let added = Item(bufnr('%'), [0, 1, 1, 0], [0, 1, 1, 0], 'v')
			call multiselector.add(added)
			Assert Equals(len(multiselector.itemlist), 1)
			Assert Equals(multiselector.itemlist[0]['head'], [0, 1, 1, 0])
			Assert Equals(multiselector.last.event, 'check')
			Assert Equals(multiselector.last.itemlist, [added])

			let added = Item(bufnr('%'), [0, 2, 1, 0], [0, 2, 1, 0], 'v')
			call multiselector.add(added)
			Assert Equals(len(multiselector.itemlist), 2)
			Assert Equals(multiselector.itemlist[0]['head'], [0, 1, 1, 0])
			Assert Equals(multiselector.itemlist[1]['head'], [0, 2, 1, 0])
			Assert Equals(multiselector.last.event, 'check')
			Assert Equals(multiselector.last.itemlist, [added])

			let added = Item(bufnr('%'), [0, 3, 1, 0], [0, 3, 1, 0], 'v')
			call multiselector.add(added)
			Assert Equals(len(multiselector.itemlist), 3)
			Assert Equals(multiselector.itemlist[0]['head'], [0, 1, 1, 0])
			Assert Equals(multiselector.itemlist[1]['head'], [0, 2, 1, 0])
			Assert Equals(multiselector.itemlist[2]['head'], [0, 3, 1, 0])
			Assert Equals(multiselector.last.event, 'check')
			Assert Equals(multiselector.last.itemlist, [added])
		End

		It turns on the highlight of accepted items
			let multiselector = MS.Multiselector(DEFAULTS)
			let ON = g:TRUE
			let OFF = g:FALSE
			Assert True(empty(multiselector.itemlist))

			call multiselector.add(
				\ Item(bufnr('%'), [0, 1, 1, 0], [0, 1, 1, 0], 'v')
				\ )
			Assert Equals(multiselector.itemlist[0]['_histatus'](win_getid()), ON)

			call multiselector.add(
				\ Item(bufnr('%'), [0, 2, 1, 0], [0, 2, 1, 0], 'v')
				\ )
			Assert Equals(multiselector.itemlist[0]['_histatus'](win_getid()), ON)
			Assert Equals(multiselector.itemlist[1]['_histatus'](win_getid()), ON)

			call multiselector.add(
				\ Item(bufnr('%'), [0, 3, 1, 0], [0, 3, 1, 0], 'v')
				\ )
			Assert Equals(multiselector.itemlist[0]['_histatus'](win_getid()), ON)
			Assert Equals(multiselector.itemlist[1]['_histatus'](win_getid()), ON)
			Assert Equals(multiselector.itemlist[2]['_histatus'](win_getid()), ON)
		End

		It triggers autocmd event 'MultiselectCheckPost' evry after appending
			let multiselector = MS.Multiselector(DEFAULTS)
			let g:autocmdcount = 0
			augroup test-multiselect
				autocmd!
				autocmd User MultiselectCheckPost let g:autocmdcount += 1
			augroup End
			Assert True(empty(multiselector.itemlist))

			call multiselector.add(
				\ Item(bufnr('%'), [0, 1, 1, 0], [0, 1, 1, 0], 'v')
				\ )
			Assert Equals(g:autocmdcount, 1)

			call multiselector.add(
				\ Item(bufnr('%'), [0, 2, 1, 0], [0, 2, 1, 0], 'v')
				\ )
			Assert Equals(g:autocmdcount, 2)

			call multiselector.add(
				\ Item(bufnr('%'), [0, 3, 1, 0], [0, 3, 1, 0], 'v')
				\ )
			Assert Equals(g:autocmdcount, 3)
		End
	End

	Context .remove(i)
		It removes an (i+1)-th item from self.itemlist and return the item
			let multiselector = MS.Multiselector(DEFAULTS)
			call multiselector.extend([
				\ Item(bufnr('%'), [0, 1, 1, 0], [0, 1, 1, 0], 'v'),
				\ Item(bufnr('%'), [0, 2, 1, 0], [0, 2, 1, 0], 'v'),
				\ Item(bufnr('%'), [0, 3, 1, 0], [0, 3, 1, 0], 'v'),
				\ ])
			Assert Equals(len(multiselector.itemlist), 3)

			let removed = multiselector.remove(1)
			Assert Equals(len(multiselector.itemlist), 2)
			Assert Equals(type(removed), v:t_dict)
			Assert Equals(removed['head'], [0, 2, 1, 0])
			Assert Equals(multiselector.itemlist[0]['head'], [0, 1, 1, 0])
			Assert Equals(multiselector.itemlist[1]['head'], [0, 3, 1, 0])
			Assert Equals(multiselector.last.event, 'uncheck')
			Assert Equals(multiselector.last.itemlist, [removed])

			let removed = multiselector.remove(0)
			Assert Equals(len(multiselector.itemlist), 1)
			Assert Equals(type(removed), v:t_dict)
			Assert Equals(removed['head'], [0, 1, 1, 0])
			Assert Equals(multiselector.itemlist[0]['head'], [0, 3, 1, 0])
			Assert Equals(multiselector.last.event, 'uncheck')
			Assert Equals(multiselector.last.itemlist, [removed])

			let removed = multiselector.remove(0)
			Assert Equals(len(multiselector.itemlist), 0)
			Assert Equals(type(removed), v:t_dict)
			Assert Equals(removed['head'], [0, 3, 1, 0])
			Assert Equals(multiselector.itemlist, [])
			Assert Equals(multiselector.last.event, 'uncheck')
			Assert Equals(multiselector.last.itemlist, [removed])
		End

		It turns off the highlight of removed item
			let multiselector = MS.Multiselector(DEFAULTS)
			let ON = g:TRUE
			let OFF = g:FALSE
			call multiselector.extend([
				\ Item(bufnr('%'), [0, 1, 1, 0], [0, 1, 1, 0], 'v'),
				\ Item(bufnr('%'), [0, 2, 1, 0], [0, 2, 1, 0], 'v'),
				\ Item(bufnr('%'), [0, 3, 1, 0], [0, 3, 1, 0], 'v'),
				\ ])
			Assert Equals(len(multiselector.itemlist), 3)

			let removed = multiselector.remove(1)
			Assert Equals(removed._histatus(win_getid()), OFF)
			Assert Equals(multiselector.itemlist[0]._histatus(win_getid()), ON)
			Assert Equals(multiselector.itemlist[1]._histatus(win_getid()), ON)

			let removed = multiselector.remove(0)
			Assert Equals(removed._histatus(win_getid()), OFF)
			Assert Equals(multiselector.itemlist[0]._histatus(win_getid()), ON)

			let removed = multiselector.remove(0)
			Assert Equals(removed._histatus(win_getid()), OFF)
		End

		It triggers autocmd event 'MultiselectUncheckPost' evry after removing
			let multiselector = MS.Multiselector(DEFAULTS)
			call multiselector.extend([
				\ Item(bufnr('%'), [0, 1, 1, 0], [0, 1, 1, 0], 'v'),
				\ Item(bufnr('%'), [0, 2, 1, 0], [0, 2, 1, 0], 'v'),
				\ Item(bufnr('%'), [0, 3, 1, 0], [0, 3, 1, 0], 'v'),
				\ ])
			let g:autocmdcount = 0
			augroup test-multiselect
				autocmd!
				autocmd User MultiselectUncheckPost let g:autocmdcount += 1
			augroup End
			Assert Equals(len(multiselector.itemlist), 3)
			Assert Equals(g:autocmdcount, 0)

			let removed = multiselector.remove(1)
			Assert Equals(g:autocmdcount, 1)

			let removed = multiselector.remove(0)
			Assert Equals(g:autocmdcount, 2)

			let removed = multiselector.remove(0)
			Assert Equals(g:autocmdcount, 3)
		End
	End

	Context .remove(i, j)
		It removes (i+1) to (j+1)-th items from self.itemlist and return as a list
			let multiselector = MS.Multiselector(DEFAULTS)
			call multiselector.extend([
				\ Item(bufnr('%'), [0, 1, 1, 0], [0, 1, 1, 0], 'v'),
				\ Item(bufnr('%'), [0, 2, 1, 0], [0, 2, 1, 0], 'v'),
				\ Item(bufnr('%'), [0, 3, 1, 0], [0, 3, 1, 0], 'v'),
				\ ])
			Assert Equals(len(multiselector.itemlist), 3)

			let removed = multiselector.remove(0, 0)
			Assert Equals(len(multiselector.itemlist), 2)
			Assert Equals(type(removed), v:t_list)
			Assert Equals(len(removed), 1)
			Assert Equals(removed[0]['head'], [0, 1, 1, 0])
			Assert Equals(multiselector.itemlist[0]['head'], [0, 2, 1, 0])
			Assert Equals(multiselector.itemlist[1]['head'], [0, 3, 1, 0])
			Assert Equals(multiselector.last.event, 'uncheck')
			Assert Equals(multiselector.last.itemlist, removed)

			let multiselector = MS.Multiselector(DEFAULTS)
			call multiselector.extend([
				\ Item(bufnr('%'), [0, 1, 1, 0], [0, 1, 1, 0], 'v'),
				\ Item(bufnr('%'), [0, 2, 1, 0], [0, 2, 1, 0], 'v'),
				\ Item(bufnr('%'), [0, 3, 1, 0], [0, 3, 1, 0], 'v'),
				\ ])
			Assert Equals(len(multiselector.itemlist), 3)

			let removed = multiselector.remove(1, 2)
			Assert Equals(len(multiselector.itemlist), 1)
			Assert Equals(type(removed), v:t_list)
			Assert Equals(len(removed), 2)
			Assert Equals(removed[0]['head'], [0, 2, 1, 0])
			Assert Equals(removed[1]['head'], [0, 3, 1, 0])
			Assert Equals(multiselector.itemlist[0]['head'], [0, 1, 1, 0])
			Assert Equals(multiselector.last.event, 'uncheck')
			Assert Equals(multiselector.last.itemlist, removed)

			let multiselector = MS.Multiselector(DEFAULTS)
			call multiselector.extend([
				\ Item(bufnr('%'), [0, 1, 1, 0], [0, 1, 1, 0], 'v'),
				\ Item(bufnr('%'), [0, 2, 1, 0], [0, 2, 1, 0], 'v'),
				\ Item(bufnr('%'), [0, 3, 1, 0], [0, 3, 1, 0], 'v'),
				\ ])
			Assert Equals(len(multiselector.itemlist), 3)

			let removed = multiselector.remove(0, 2)
			Assert Equals(len(multiselector.itemlist), 0)
			Assert Equals(type(removed), v:t_list)
			Assert Equals(len(removed), 3)
			Assert Equals(removed[0]['head'], [0, 1, 1, 0])
			Assert Equals(removed[1]['head'], [0, 2, 1, 0])
			Assert Equals(removed[2]['head'], [0, 3, 1, 0])
			Assert Equals(multiselector.itemlist, [])
			Assert Equals(multiselector.last.event, 'uncheck')
			Assert Equals(multiselector.last.itemlist, removed)

			let multiselector = MS.Multiselector(DEFAULTS)
			call multiselector.extend([
				\ Item(bufnr('%'), [0, 1, 1, 0], [0, 1, 1, 0], 'v'),
				\ Item(bufnr('%'), [0, 2, 1, 0], [0, 2, 1, 0], 'v'),
				\ Item(bufnr('%'), [0, 3, 1, 0], [0, 3, 1, 0], 'v'),
				\ ])
			Assert Equals(len(multiselector.itemlist), 3)

			let removed = multiselector.remove(0, -1)
			Assert Equals(len(multiselector.itemlist), 0)
			Assert Equals(type(removed), v:t_list)
			Assert Equals(len(removed), 3)
			Assert Equals(removed[0]['head'], [0, 1, 1, 0])
			Assert Equals(removed[1]['head'], [0, 2, 1, 0])
			Assert Equals(removed[2]['head'], [0, 3, 1, 0])
			Assert Equals(multiselector.itemlist, [])
			Assert Equals(multiselector.last.event, 'uncheck')
			Assert Equals(multiselector.last.itemlist, removed)
		End

		It turns off the highlight of removed items
			let multiselector = MS.Multiselector(DEFAULTS)
			let ON = g:TRUE
			let OFF = g:FALSE
			call multiselector.extend([
				\ Item(bufnr('%'), [0, 1, 1, 0], [0, 1, 1, 0], 'v'),
				\ Item(bufnr('%'), [0, 2, 1, 0], [0, 2, 1, 0], 'v'),
				\ Item(bufnr('%'), [0, 3, 1, 0], [0, 3, 1, 0], 'v'),
				\ ])
			Assert Equals(len(multiselector.itemlist), 3)

			let removed = multiselector.remove(0, 1)
			Assert Equals(removed[0]._histatus(win_getid()), OFF)
			Assert Equals(removed[1]._histatus(win_getid()), OFF)
			Assert Equals(multiselector.itemlist[0]._histatus(win_getid()), ON)

			let multiselector = MS.Multiselector(DEFAULTS)
			call multiselector.extend([
				\ Item(bufnr('%'), [0, 1, 1, 0], [0, 1, 1, 0], 'v'),
				\ Item(bufnr('%'), [0, 2, 1, 0], [0, 2, 1, 0], 'v'),
				\ Item(bufnr('%'), [0, 3, 1, 0], [0, 3, 1, 0], 'v'),
				\ ])
			Assert Equals(len(multiselector.itemlist), 3)

			let removed = multiselector.remove(1, 2)
			Assert Equals(removed[0]._histatus(win_getid()), OFF)
			Assert Equals(removed[1]._histatus(win_getid()), OFF)
			Assert Equals(multiselector.itemlist[0]._histatus(win_getid()), ON)

			let multiselector = MS.Multiselector(DEFAULTS)
			call multiselector.extend([
				\ Item(bufnr('%'), [0, 1, 1, 0], [0, 1, 1, 0], 'v'),
				\ Item(bufnr('%'), [0, 2, 1, 0], [0, 2, 1, 0], 'v'),
				\ Item(bufnr('%'), [0, 3, 1, 0], [0, 3, 1, 0], 'v'),
				\ ])
			Assert Equals(len(multiselector.itemlist), 3)

			let removed = multiselector.remove(0, 2)
			Assert Equals(removed[0]._histatus(win_getid()), OFF)
			Assert Equals(removed[1]._histatus(win_getid()), OFF)
			Assert Equals(removed[2]._histatus(win_getid()), OFF)
		End

		It triggers autocmd event 'MultiselectUncheckPost' evry after removing
			let g:autocmdcount = 0
			augroup test-multiselect
				autocmd!
				autocmd User MultiselectUncheckPost let g:autocmdcount += 1
			augroup End

			let multiselector = MS.Multiselector(DEFAULTS)
			call multiselector.extend([
				\ Item(bufnr('%'), [0, 1, 1, 0], [0, 1, 1, 0], 'v'),
				\ Item(bufnr('%'), [0, 2, 1, 0], [0, 2, 1, 0], 'v'),
				\ Item(bufnr('%'), [0, 3, 1, 0], [0, 3, 1, 0], 'v'),
				\ ])
			Assert Equals(len(multiselector.itemlist), 3)
			Assert Equals(g:autocmdcount, 0)

			let removed = multiselector.remove(0, 0)
			Assert Equals(g:autocmdcount, 1)

			let multiselector = MS.Multiselector(DEFAULTS)
			call multiselector.extend([
				\ Item(bufnr('%'), [0, 1, 1, 0], [0, 1, 1, 0], 'v'),
				\ Item(bufnr('%'), [0, 2, 1, 0], [0, 2, 1, 0], 'v'),
				\ Item(bufnr('%'), [0, 3, 1, 0], [0, 3, 1, 0], 'v'),
				\ ])
			Assert Equals(len(multiselector.itemlist), 3)

			let removed = multiselector.remove(1, 2)
			Assert Equals(g:autocmdcount, 2)

			let multiselector = MS.Multiselector(DEFAULTS)
			call multiselector.extend([
				\ Item(bufnr('%'), [0, 1, 1, 0], [0, 1, 1, 0], 'v'),
				\ Item(bufnr('%'), [0, 2, 1, 0], [0, 2, 1, 0], 'v'),
				\ Item(bufnr('%'), [0, 3, 1, 0], [0, 3, 1, 0], 'v'),
				\ ])
			Assert Equals(len(multiselector.itemlist), 3)

			let removed = multiselector.remove(0, 2)
			Assert Equals(g:autocmdcount, 3)
		End
	End

	Context .emit()
		It returns all the items in self.itemlist
			let multiselector = MS.Multiselector(DEFAULTS)
			let g:autocmdcount = 0
			let ON = g:TRUE
			let OFF = g:FALSE
			augroup test-multiselect
				autocmd!
				autocmd User MultiselectUncheckPost let g:autocmdcount += 1
			augroup End
			call multiselector.extend([
				\ Item(bufnr('%'), [0, 1, 1, 0], [0, 1, 1, 0], 'v'),
				\ Item(bufnr('%'), [0, 2, 1, 0], [0, 2, 1, 0], 'v'),
				\ Item(bufnr('%'), [0, 3, 1, 0], [0, 3, 1, 0], 'v'),
				\ ])
			Assert Equals(len(multiselector.itemlist), 3)

			let emitted = multiselector.emit()
			Assert Equals(type(emitted), v:t_list)
			Assert Equals(len(emitted), 3)
			Assert Equals(emitted[0]['head'], [0, 1, 1, 0])
			Assert Equals(emitted[1]['head'], [0, 2, 1, 0])
			Assert Equals(emitted[2]['head'], [0, 3, 1, 0])
			Assert Equals(len(multiselector.itemlist), 0)
			Assert Equals(multiselector.last.event, 'uncheck')
			Assert Equals(multiselector.last.itemlist, emitted)
			Assert Equals(emitted[0]._histatus(win_getid()), OFF)
			Assert Equals(emitted[1]._histatus(win_getid()), OFF)
			Assert Equals(emitted[2]._histatus(win_getid()), OFF)
			Assert Equals(g:autocmdcount, 1)
		End
	End

	Context .emit(filterexpr)
		It returns only the items that a:filterexpr returns TRUE
			let multiselector = MS.Multiselector(DEFAULTS)
			let ON = g:TRUE
			let OFF = g:FALSE
			augroup test-multiselect
				autocmd!
				autocmd User MultiselectUncheckPost let g:autocmdcount += 1
			augroup End
			let g:autocmdcount = 0
			call multiselector.extend([
				\ Item(bufnr('%'), [0, 1, 1, 0], [0, 1, 1, 0], 'v'),
				\ Item(bufnr('%'), [0, 2, 1, 0], [0, 2, 1, 0], 'v'),
				\ Item(bufnr('%'), [0, 3, 1, 0], [0, 3, 1, 0], 'v'),
				\ ])
			Assert Equals(len(multiselector.itemlist), 3)

			let emitted = multiselector.emit({i, item -> item.head[1] == 2})
			Assert Equals(type(emitted), v:t_list)
			Assert Equals(len(emitted), 1)
			Assert Equals(emitted[0]['head'], [0, 2, 1, 0])
			Assert Equals(len(multiselector.itemlist), 2)
			Assert Equals(multiselector.itemlist[0]['head'], [0, 1, 1, 0])
			Assert Equals(multiselector.itemlist[1]['head'], [0, 3, 1, 0])
			Assert Equals(multiselector.last.event, 'uncheck')
			Assert Equals(multiselector.last.itemlist, emitted)
			Assert Equals(emitted[0]._histatus(win_getid()), OFF)
			Assert Equals(g:autocmdcount, 1)
		End
	End

	Context .list()
		It returns the copy of self.itemlist
			let multiselector = MS.Multiselector(DEFAULTS)
			let g:autocmdcount = 0
			let ON = g:TRUE
			let OFF = g:FALSE
			augroup test-multiselect
				autocmd!
				autocmd User MultiselectUncheckPost let g:autocmdcount += 1
			augroup End
			let added = [
				\ Item(bufnr('%'), [0, 1, 1, 0], [0, 1, 1, 0], 'v'),
				\ Item(bufnr('%'), [0, 2, 1, 0], [0, 2, 1, 0], 'v'),
				\ Item(bufnr('%'), [0, 3, 1, 0], [0, 3, 1, 0], 'v'),
				\ ]
			call multiselector.extend(added)
			Assert Equals(len(multiselector.itemlist), 3)
			Assert Equals(multiselector.last.event, 'check')
			Assert Equals(multiselector.last.itemlist, added)

			let listed = multiselector.list()
			Assert Equals(type(listed), v:t_list)
			Assert Equals(len(listed), 3)
			Assert Equals(len(multiselector.itemlist), 3)
			Assert Same(listed[0], multiselector.itemlist[0])
			Assert Same(listed[1], multiselector.itemlist[1])
			Assert Same(listed[2], multiselector.itemlist[2])
			Assert Equals(listed[0]._histatus(win_getid()), ON)
			Assert Equals(listed[1]._histatus(win_getid()), ON)
			Assert Equals(listed[2]._histatus(win_getid()), ON)
			Assert Equals(multiselector.last.event, 'check')
			Assert Equals(multiselector.last.itemlist, added)
			Assert Equals(g:autocmdcount, 0)
		End
	End

	Context .list(Filterexpr)
		It returns only the items that a:Filterexpr returns TRUE
			let multiselector = MS.Multiselector(DEFAULTS)
			let ON = g:TRUE
			let OFF = g:FALSE
			augroup test-multiselect
				autocmd!
				autocmd User MultiselectUncheckPost let g:autocmdcount += 1
			augroup End
			let g:autocmdcount = 0
			let added = [
				\ Item(bufnr('%'), [0, 1, 1, 0], [0, 1, 1, 0], 'v'),
				\ Item(bufnr('%'), [0, 2, 1, 0], [0, 2, 1, 0], 'v'),
				\ Item(bufnr('%'), [0, 3, 1, 0], [0, 3, 1, 0], 'v'),
				\ ]
			call multiselector.extend(added)
			Assert Equals(len(multiselector.itemlist), 3)
			Assert Equals(multiselector.last.event, 'check')
			Assert Equals(multiselector.last.itemlist, added)

			let listed = multiselector.list({i, item -> item.head[1] == 2})
			Assert Equals(type(listed), v:t_list)
			Assert Equals(len(listed), 1)
			Assert Equals(len(multiselector.itemlist), 3)
			Assert Same(listed[0], multiselector.itemlist[1])
			Assert Equals(multiselector.itemlist[0]._histatus(win_getid()), ON)
			Assert Equals(multiselector.itemlist[1]._histatus(win_getid()), ON)
			Assert Equals(multiselector.itemlist[2]._histatus(win_getid()), ON)
			Assert Equals(multiselector.last.event, 'check')
			Assert Equals(multiselector.last.itemlist, added)
			Assert Equals(g:autocmdcount, 0)
		End
	End

	Context .filter(Filterexpr)
		It removes the items that a:Filterexpr returns FALSE
			let multiselector = MS.Multiselector(DEFAULTS)
			let ON = g:TRUE
			let OFF = g:FALSE
			augroup test-multiselect
				autocmd!
				autocmd User MultiselectUncheckPost let g:autocmdcount += 1
			augroup End
			let g:autocmdcount = 0
			let added = [
				\ Item(bufnr('%'), [0, 1, 1, 0], [0, 1, 1, 0], 'v'),
				\ Item(bufnr('%'), [0, 2, 1, 0], [0, 2, 1, 0], 'v'),
				\ Item(bufnr('%'), [0, 3, 1, 0], [0, 3, 1, 0], 'v'),
				\ ]
			call multiselector.extend(added)
			Assert Equals(len(multiselector.itemlist), 3)
			Assert Equals(multiselector.last.event, 'check')
			Assert Equals(multiselector.last.itemlist, added)

			let remained = multiselector.filter({i, item -> item.head[1] == 2})
			Assert Equals(type(remained), v:t_list)
			Assert Equals(len(remained), 1)
			Assert Equals(remained[0]['head'], [0, 2, 1, 0])
			Assert Equals(len(multiselector.itemlist), 1)
			Assert Equals(multiselector.itemlist[0]['head'], [0, 2, 1, 0])
			Assert Equals(multiselector.last.event, 'uncheck')
			Assert Equals(g:autocmdcount, 1)



			let multiselector = MS.Multiselector(DEFAULTS)
			let g:autocmdcount = 0
			let added = [
				\ Item(bufnr('%'), [0, 1, 1, 0], [0, 1, 1, 0], 'v'),
				\ Item(bufnr('%'), [0, 2, 1, 0], [0, 2, 1, 0], 'v'),
				\ Item(bufnr('%'), [0, 3, 1, 0], [0, 3, 1, 0], 'v'),
				\ ]
			call multiselector.extend(added)
			Assert Equals(len(multiselector.itemlist), 3)
			Assert Equals(multiselector.last.event, 'check')
			Assert Equals(multiselector.last.itemlist, added)

			let remained = multiselector.filter({i, item -> item.head[1] != 2})
			Assert Equals(type(remained), v:t_list)
			Assert Equals(len(remained), 2)
			Assert Equals(remained[0]['head'], [0, 1, 1, 0])
			Assert Equals(remained[1]['head'], [0, 3, 1, 0])
			Assert Equals(len(multiselector.itemlist), 2)
			Assert Equals(multiselector.itemlist[0]['head'], [0, 1, 1, 0])
			Assert Equals(multiselector.itemlist[1]['head'], [0, 3, 1, 0])
			Assert Equals(multiselector.last.event, 'uncheck')
			Assert Equals(g:autocmdcount, 1)
		End
	End

	Context .sort()
		It sorts the items in a copy of self.itemlist
			let multiselector = MS.Multiselector(DEFAULTS)
			let added = [
				\ Item(bufnr('%'), [0, 2, 1, 0], [0, 2, 1, 0], 'v'),
				\ Item(bufnr('%'), [0, 3, 1, 0], [0, 3, 1, 0], 'v'),
				\ Item(bufnr('%'), [0, 1, 1, 0], [0, 1, 1, 0], 'v'),
				\ ]
			call multiselector.extend(added)
			Assert Equals(len(multiselector.itemlist), 3)
			Assert Equals(multiselector.last.event, 'check')
			Assert Equals(multiselector.last.itemlist, added)

			let sorted = multiselector.sort()
			Assert NotSame(sorted, multiselector.itemlist)
			Assert Equals(len(multiselector.itemlist), 3)
			Assert Equals(sorted[0]['head'], [0, 1, 1, 0])
			Assert Equals(sorted[1]['head'], [0, 2, 1, 0])
			Assert Equals(sorted[2]['head'], [0, 3, 1, 0])
		End
	End

	Context .sort(list)
		It sorts the copy of a:list
			let multiselector = MS.Multiselector(DEFAULTS)

			let list = [
				\ Region([0, 2, 1, 0], [0, 2, 1, 0], 'v'),
				\ Region([0, 3, 1, 0], [0, 3, 1, 0], 'v'),
				\ Region([0, 1, 1, 0], [0, 1, 1, 0], 'v'),
				\ ]
			let sorted = multiselector.sort(list)
			Assert NotSame(sorted, list)
			Assert Equals(len(sorted), 3)
			Assert Equals(sorted[0]['head'], [0, 1, 1, 0])
			Assert Equals(sorted[1]['head'], [0, 2, 1, 0])
			Assert Equals(sorted[2]['head'], [0, 3, 1, 0])

			let list = [
				\ Item(bufnr('%'), [0, 2, 1, 0], [0, 2, 1, 0], 'v'),
				\ Item(bufnr('%'), [0, 3, 1, 0], [0, 3, 1, 0], 'v'),
				\ Item(bufnr('%'), [0, 1, 1, 0], [0, 1, 1, 0], 'v'),
				\ ]
			let sorted = multiselector.sort(list)
			Assert NotSame(sorted, list)
			Assert Equals(len(sorted), 3)
			Assert Equals(sorted[0]['head'], [0, 1, 1, 0])
			Assert Equals(sorted[1]['head'], [0, 2, 1, 0])
			Assert Equals(sorted[2]['head'], [0, 3, 1, 0])
		End
	End
End
" vim:set noet ts=4 sw=4 sts=-1:
