Describe Multiselector
	Before
		let MS = g:MS
		let Item = g:MS.Item
		let Region = g:MS.Region
		let DEFAULTS = g:DEFAULTS
	End

	Before all
		%delete
		call append(0, [
			\ 'aaaaaaa',
			\ 'bbbbbbb',
			\ 'ccccccc',
			\ 'ddddddd',
			\ 'eeeeeee',
			\ ])
		$delete
	End

	After all
		unlet! g:autocmdcount
		augroup test-multiselect
			autocmd!
		augroup End
	End

	Context .extend(itemlist)
		It appends items in a:itemlist into self.itemlist
			let multiselector = MS.Multiselector(DEFAULTS)
			Assert LengthOf(multiselector.itemlist, 0)
			Assert Equals(multiselector._last.event, '')
			Assert Equals(multiselector._last.itemlist, [])

			call multiselector.extend([])
			Assert LengthOf(multiselector.itemlist, 0)
			Assert Equals(multiselector._last.event, '')
			Assert Equals(multiselector._last.itemlist, [])

			let item1 = Item([0, 1, 1, 0], [0, 1, 1, 0], 'v')
			let item2 = Item([0, 2, 1, 0], [0, 2, 1, 0], 'v')
			let item3 = Item([0, 3, 1, 0], [0, 3, 1, 0], 'v')

			let added = [item1]
			call multiselector.extend(added)
			Assert LengthOf(multiselector.itemlist, 1)
			Assert Same(multiselector.itemlist[0], item1)
			Assert Equals(multiselector._last.event, 'check')
			Assert Equals(multiselector._last.itemlist, added)

			let added = [item2, item3]
			call multiselector.extend(added)
			Assert LengthOf(multiselector.itemlist, 3)
			Assert Same(multiselector.itemlist[0], item1)
			Assert Same(multiselector.itemlist[1], item2)
			Assert Same(multiselector.itemlist[2], item3)
			Assert Equals(multiselector._last.event, 'check')
			Assert Equals(multiselector._last.itemlist, added)

			call filter(multiselector, 0)
		End

		It turns on the highlight of accepted items
			let multiselector = MS.Multiselector(DEFAULTS)
			let item1 = Item([0, 1, 1, 0], [0, 1, 1, 0], 'v')
			let item2 = Item([0, 2, 1, 0], [0, 2, 1, 0], 'v')
			let item3 = Item([0, 3, 1, 0], [0, 3, 1, 0], 'v')

			let added = [item1]
			call multiselector.extend(added)
			Assert True(multiselector.itemlist[0]['isshownin'](win_getid()))

			let added = [item2, item3]
			call multiselector.extend(added)
			Assert True(multiselector.itemlist[0]['isshownin'](win_getid()))
			Assert True(multiselector.itemlist[1]['isshownin'](win_getid()))
			Assert True(multiselector.itemlist[2]['isshownin'](win_getid()))

			call filter(multiselector, 0)
		End

		It triggers autocmd event 'MultiselectCheckPost' evry after appending
			let multiselector = MS.Multiselector(DEFAULTS)
			let g:autocmdcount = 0
			augroup test-multiselect
				autocmd!
				autocmd User MultiselectCheckPost let g:autocmdcount += 1
			augroup End
			Assert LengthOf(multiselector.itemlist, 0)

			call multiselector.extend([])
			Assert Equals(g:autocmdcount, 0)

			let item1 = Item([0, 1, 1, 0], [0, 1, 1, 0], 'v')
			let item2 = Item([0, 2, 1, 0], [0, 2, 1, 0], 'v')
			let item3 = Item([0, 3, 1, 0], [0, 3, 1, 0], 'v')

			let added = [item1]
			call multiselector.extend(added)
			Assert Equals(g:autocmdcount, 1)

			let added = [item2, item3]
			call multiselector.extend(added)
			Assert Equals(g:autocmdcount, 2)

			augroup test-multiselect
				autocmd!
			augroup End
			unlet! g:autocmdcount
			call filter(multiselector, 0)
		End
	End

	Context .add(item)
		It appends a:item into self.itemlist
			let multiselector = MS.Multiselector(DEFAULTS)
			Assert LengthOf(multiselector.itemlist, 0)

			let item1 = Item([0, 1, 1, 0], [0, 1, 1, 0], 'v')
			let item2 = Item([0, 2, 1, 0], [0, 2, 1, 0], 'v')
			let item3 = Item([0, 3, 1, 0], [0, 3, 1, 0], 'v')

			call multiselector.add(item1)
			Assert LengthOf(multiselector.itemlist, 1)
			Assert Same(multiselector.itemlist[0], item1)
			Assert Equals(multiselector._last.event, 'check')
			Assert Equals(multiselector._last.itemlist, [item1])

			call multiselector.add(item2)
			Assert LengthOf(multiselector.itemlist, 2)
			Assert Same(multiselector.itemlist[0], item1)
			Assert Same(multiselector.itemlist[1], item2)
			Assert Equals(multiselector._last.event, 'check')
			Assert Equals(multiselector._last.itemlist, [item2])

			call multiselector.add(item3)
			Assert LengthOf(multiselector.itemlist, 3)
			Assert Same(multiselector.itemlist[0], item1)
			Assert Same(multiselector.itemlist[1], item2)
			Assert Same(multiselector.itemlist[2], item3)
			Assert Equals(multiselector._last.event, 'check')
			Assert Equals(multiselector._last.itemlist, [item3])

			call filter(multiselector, 0)
		End

		It turns on the highlight of accepted items
			let multiselector = MS.Multiselector(DEFAULTS)
			let item1 = Item([0, 1, 1, 0], [0, 1, 1, 0], 'v')
			let item2 = Item([0, 2, 1, 0], [0, 2, 1, 0], 'v')
			let item3 = Item([0, 3, 1, 0], [0, 3, 1, 0], 'v')

			call multiselector.add(item1)
			Assert True(multiselector.itemlist[0]['isshownin'](win_getid()))

			call multiselector.add(item2)
			Assert True(multiselector.itemlist[0]['isshownin'](win_getid()))
			Assert True(multiselector.itemlist[1]['isshownin'](win_getid()))

			call multiselector.add(item3)
			Assert True(multiselector.itemlist[0]['isshownin'](win_getid()))
			Assert True(multiselector.itemlist[1]['isshownin'](win_getid()))
			Assert True(multiselector.itemlist[2]['isshownin'](win_getid()))

			call filter(multiselector, 0)
		End

		It triggers autocmd event 'MultiselectCheckPost' evry after appending
			let multiselector = MS.Multiselector(DEFAULTS)
			let g:autocmdcount = 0
			augroup test-multiselect
				autocmd!
				autocmd User MultiselectCheckPost let g:autocmdcount += 1
			augroup End

			let item1 = Item([0, 1, 1, 0], [0, 1, 1, 0], 'v')
			let item2 = Item([0, 2, 1, 0], [0, 2, 1, 0], 'v')
			let item3 = Item([0, 3, 1, 0], [0, 3, 1, 0], 'v')

			call multiselector.add(item1)
			Assert Equals(g:autocmdcount, 1)

			call multiselector.add(item2)
			Assert Equals(g:autocmdcount, 2)

			call multiselector.add(item3)
			Assert Equals(g:autocmdcount, 3)

			augroup test-multiselect
				autocmd!
			augroup End
			unlet! g:autocmdcount
			call filter(multiselector, 0)
		End
	End

	Context .remove(i)
		It removes an (i+1)-th item from self.itemlist and return the item
			let multiselector = MS.Multiselector(DEFAULTS)
			let item1 = Item([0, 1, 1, 0], [0, 1, 1, 0], 'v')
			let item2 = Item([0, 2, 1, 0], [0, 2, 1, 0], 'v')
			let item3 = Item([0, 3, 1, 0], [0, 3, 1, 0], 'v')
			let added = [item1, item2, item3]
			call multiselector.extend(added)
			Assert LengthOf(multiselector.itemlist, 3)

			let removed = multiselector.remove(1)
			Assert LengthOf(multiselector.itemlist, 2)
			Assert IsDict(removed)
			Assert Same(removed, item2)
			Assert Same(multiselector.itemlist[0], item1)
			Assert Same(multiselector.itemlist[1], item3)
			Assert Equals(multiselector._last.event, 'uncheck')
			Assert Equals(multiselector._last.itemlist, [removed])

			let removed = multiselector.remove(0)
			Assert LengthOf(multiselector.itemlist, 1)
			Assert IsDict(removed)
			Assert Same(removed, item1)
			Assert Same(multiselector.itemlist[0], item3)
			Assert Equals(multiselector._last.event, 'uncheck')
			Assert Equals(multiselector._last.itemlist, [removed])

			let removed = multiselector.remove(0)
			Assert LengthOf(multiselector.itemlist, 0)
			Assert IsDict(removed)
			Assert Same(removed, item3)
			Assert Equals(multiselector._last.event, 'uncheck')
			Assert Equals(multiselector._last.itemlist, [removed])

			call filter(multiselector, 0)
		End

		It turns off the highlight of removed item
			let multiselector = MS.Multiselector(DEFAULTS)
			let item1 = Item([0, 1, 1, 0], [0, 1, 1, 0], 'v')
			let item2 = Item([0, 2, 1, 0], [0, 2, 1, 0], 'v')
			let item3 = Item([0, 3, 1, 0], [0, 3, 1, 0], 'v')
			let added = [item1, item2, item3]
			call multiselector.extend(added)

			let removed = multiselector.remove(1)
			Assert False(removed.isshownin(win_getid()))
			Assert True(multiselector.itemlist[0]['isshownin'](win_getid()))
			Assert True(multiselector.itemlist[1]['isshownin'](win_getid()))

			let removed = multiselector.remove(0)
			Assert False(removed.isshownin(win_getid()))
			Assert True(multiselector.itemlist[0]['isshownin'](win_getid()))

			let removed = multiselector.remove(0)
			Assert False(removed.isshownin(win_getid()))

			call filter(multiselector, 0)
		End

		It triggers autocmd event 'MultiselectUncheckPost' evry after removing
			let multiselector = MS.Multiselector(DEFAULTS)
			let item1 = Item([0, 1, 1, 0], [0, 1, 1, 0], 'v')
			let item2 = Item([0, 2, 1, 0], [0, 2, 1, 0], 'v')
			let item3 = Item([0, 3, 1, 0], [0, 3, 1, 0], 'v')
			let added = [item1, item2, item3]
			call multiselector.extend(added)

			let g:autocmdcount = 0
			augroup test-multiselect
				autocmd!
				autocmd User MultiselectUncheckPost let g:autocmdcount += 1
			augroup End

			Assert Equals(g:autocmdcount, 0)

			let removed = multiselector.remove(1)
			Assert Equals(g:autocmdcount, 1)

			let removed = multiselector.remove(0)
			Assert Equals(g:autocmdcount, 2)

			let removed = multiselector.remove(0)
			Assert Equals(g:autocmdcount, 3)

			augroup test-multiselect
				autocmd!
			augroup End
			unlet! g:autocmdcount
			call filter(multiselector, 0)
		End
	End

	Context .remove(i, j)
		It removes (i+1) to (j+1)-th items from self.itemlist and return as a list
			let multiselector = MS.Multiselector(DEFAULTS)
			let item1 = Item([0, 1, 1, 0], [0, 1, 1, 0], 'v')
			let item2 = Item([0, 2, 1, 0], [0, 2, 1, 0], 'v')
			let item3 = Item([0, 3, 1, 0], [0, 3, 1, 0], 'v')
			let added = [item1, item2, item3]
			call multiselector.extend(added)
			Assert LengthOf(multiselector.itemlist, 3)

			let removed = multiselector.remove(0, 0)
			Assert LengthOf(multiselector.itemlist, 2)
			Assert IsList(removed)
			Assert LengthOf(removed, 1)
			Assert Same(removed[0], item1)
			Assert Same(multiselector.itemlist[0], item2)
			Assert Same(multiselector.itemlist[1], item3)
			Assert Equals(multiselector._last.event, 'uncheck')
			Assert Equals(multiselector._last.itemlist, removed)

			call multiselector.uncheckall()
			call multiselector.extend(added)
			Assert LengthOf(multiselector.itemlist, 3)

			let removed = multiselector.remove(1, 2)
			Assert LengthOf(multiselector.itemlist, 1)
			Assert IsList(removed)
			Assert LengthOf(removed, 2)
			Assert Same(removed[0], item2)
			Assert Same(removed[1], item3)
			Assert Same(multiselector.itemlist[0], item1)
			Assert Equals(multiselector._last.event, 'uncheck')
			Assert Equals(multiselector._last.itemlist, removed)

			call multiselector.uncheckall()
			call multiselector.extend(added)
			Assert LengthOf(multiselector.itemlist, 3)

			let removed = multiselector.remove(0, 2)
			Assert LengthOf(multiselector.itemlist, 0)
			Assert IsList(removed)
			Assert LengthOf(removed, 3)
			Assert Same(removed[0], item1)
			Assert Same(removed[1], item2)
			Assert Same(removed[2], item3)
			Assert Equals(multiselector._last.event, 'uncheck')
			Assert Equals(multiselector._last.itemlist, removed)

			call multiselector.uncheckall()
			call multiselector.extend(added)
			Assert LengthOf(multiselector.itemlist, 3)

			let removed = multiselector.remove(0, -1)
			Assert LengthOf(multiselector.itemlist, 0)
			Assert IsList(removed)
			Assert LengthOf(removed, 3)
			Assert Equals(removed[0], item1)
			Assert Equals(removed[1], item2)
			Assert Equals(removed[2], item3)
			Assert Equals(multiselector._last.event, 'uncheck')
			Assert Equals(multiselector._last.itemlist, removed)

			call filter(multiselector, 0)
		End

		It turns off the highlight of removed items
			let multiselector = MS.Multiselector(DEFAULTS)
			let item1 = Item([0, 1, 1, 0], [0, 1, 1, 0], 'v')
			let item2 = Item([0, 2, 1, 0], [0, 2, 1, 0], 'v')
			let item3 = Item([0, 3, 1, 0], [0, 3, 1, 0], 'v')
			let added = [item1, item2, item3]
			call multiselector.extend(added)

			let removed = multiselector.remove(0, 0)
			Assert False(removed[0]['isshownin'](win_getid()))
			Assert True(multiselector.itemlist[0].isshownin(win_getid()))
			Assert True(multiselector.itemlist[1].isshownin(win_getid()))

			call multiselector.uncheckall()
			call multiselector.extend(added)

			let removed = multiselector.remove(1, 2)
			Assert False(removed[0]['isshownin'](win_getid()))
			Assert False(removed[1]['isshownin'](win_getid()))
			Assert True(multiselector.itemlist[0].isshownin(win_getid()))

			call multiselector.uncheckall()
			call multiselector.extend(added)

			let removed = multiselector.remove(0, 2)
			Assert False(removed[0]['isshownin'](win_getid()))
			Assert False(removed[1]['isshownin'](win_getid()))
			Assert False(removed[2]['isshownin'](win_getid()))

			call multiselector.uncheckall()
			call multiselector.extend(added)

			let removed = multiselector.remove(0, -1)
			Assert False(removed[0]['isshownin'](win_getid()))
			Assert False(removed[1]['isshownin'](win_getid()))
			Assert False(removed[2]['isshownin'](win_getid()))

			call filter(multiselector, 0)
		End

		It triggers autocmd event 'MultiselectUncheckPost' evry after removing
			let g:autocmdcount = 0
			augroup test-multiselect
				autocmd!
				autocmd User MultiselectUncheckPost let g:autocmdcount += 1
			augroup End

			Assert Equals(g:autocmdcount, 0)

			let multiselector = MS.Multiselector(DEFAULTS)
			let item1 = Item([0, 1, 1, 0], [0, 1, 1, 0], 'v')
			let item2 = Item([0, 2, 1, 0], [0, 2, 1, 0], 'v')
			let item3 = Item([0, 3, 1, 0], [0, 3, 1, 0], 'v')
			let added = [item1, item2, item3]
			call multiselector.extend(added)

			Assert Equals(g:autocmdcount, 0)
			let removed = multiselector.remove(0, 0)
			Assert Equals(g:autocmdcount, 1)

			call multiselector.uncheckall()
			call multiselector.extend(added)

			Assert Equals(g:autocmdcount, 2)
			let removed = multiselector.remove(1, 2)
			Assert Equals(g:autocmdcount, 3)

			call multiselector.uncheckall()
			call multiselector.extend(added)

			Assert Equals(g:autocmdcount, 4)
			let removed = multiselector.remove(0, 2)
			Assert Equals(g:autocmdcount, 5)

			call multiselector.uncheckall()
			call multiselector.extend(added)

			let removed = multiselector.remove(0, -1)
			Assert Equals(g:autocmdcount, 6)

			augroup test-multiselect
				autocmd!
			augroup End
			unlet! g:autocmdcount
			call filter(multiselector, 0)
		End
	End

	Context .remove(indexlist)
		It removes items from self.itemlist by given indexes
			let multiselector = MS.Multiselector(DEFAULTS)
			let item1 = Item([0, 1, 1, 0], [0, 1, 1, 0], 'v')
			let item2 = Item([0, 2, 1, 0], [0, 2, 1, 0], 'v')
			let item3 = Item([0, 3, 1, 0], [0, 3, 1, 0], 'v')
			let item4 = Item([0, 4, 1, 0], [0, 4, 1, 0], 'v')
			let added = [item1, item2, item3, item4]
			call multiselector.extend(added)
			Assert LengthOf(multiselector.itemlist, 4)

			let removed = multiselector.remove([])
			Assert LengthOf(multiselector.itemlist, 4)
			Assert IsList(removed)
			Assert LengthOf(removed, 0)
			Assert Same(multiselector.itemlist[0], item1)
			Assert Same(multiselector.itemlist[1], item2)
			Assert Same(multiselector.itemlist[2], item3)
			Assert Same(multiselector.itemlist[3], item4)
			Assert Equals(multiselector._last.event, 'check')
			Assert Equals(multiselector._last.itemlist, added)

			let removed = multiselector.remove([0])
			Assert LengthOf(multiselector.itemlist, 3)
			Assert IsList(removed)
			Assert LengthOf(removed, 1)
			Assert Same(removed[0], item1)
			Assert Same(multiselector.itemlist[0], item2)
			Assert Same(multiselector.itemlist[1], item3)
			Assert Same(multiselector.itemlist[2], item4)
			Assert Equals(multiselector._last.event, 'uncheck')
			Assert Equals(multiselector._last.itemlist, removed)

			let removed = multiselector.remove([0, 2])
			Assert LengthOf(multiselector.itemlist, 1)
			Assert IsList(removed)
			Assert LengthOf(removed, 2)
			Assert Same(removed[0], item2)
			Assert Same(removed[1], item4)
			Assert Same(multiselector.itemlist[0], item3)
			Assert Equals(multiselector._last.event, 'uncheck')
			Assert Equals(multiselector._last.itemlist, removed)

			let removed = multiselector.remove([0])
			Assert LengthOf(multiselector.itemlist, 0)
			Assert IsList(removed)
			Assert LengthOf(removed, 1)
			Assert Same(removed[0], item3)
			Assert Equals(multiselector._last.event, 'uncheck')
			Assert Equals(multiselector._last.itemlist, removed)

			call filter(multiselector, 0)
		End

		It turns off the highlight of removed item
			let multiselector = MS.Multiselector(DEFAULTS)
			let item1 = Item([0, 1, 1, 0], [0, 1, 1, 0], 'v')
			let item2 = Item([0, 2, 1, 0], [0, 2, 1, 0], 'v')
			let item3 = Item([0, 3, 1, 0], [0, 3, 1, 0], 'v')
			let added = [item1, item2, item3]
			call multiselector.extend(added)

			let removed = multiselector.remove(1)
			Assert False(removed.isshownin(win_getid()))
			Assert True(multiselector.itemlist[0]['isshownin'](win_getid()))
			Assert True(multiselector.itemlist[1]['isshownin'](win_getid()))

			let removed = multiselector.remove(0)
			Assert False(removed.isshownin(win_getid()))
			Assert True(multiselector.itemlist[0]['isshownin'](win_getid()))

			let removed = multiselector.remove(0)
			Assert False(removed.isshownin(win_getid()))

			call filter(multiselector, 0)
		End

		It triggers autocmd event 'MultiselectUncheckPost' evry after removing
			let g:autocmdcount = 0
			augroup test-multiselect
				autocmd!
				autocmd User MultiselectUncheckPost let g:autocmdcount += 1
			augroup End

			Assert Equals(g:autocmdcount, 0)

			let multiselector = MS.Multiselector(DEFAULTS)
			let item1 = Item([0, 1, 1, 0], [0, 1, 1, 0], 'v')
			let item2 = Item([0, 2, 1, 0], [0, 2, 1, 0], 'v')
			let item3 = Item([0, 3, 1, 0], [0, 3, 1, 0], 'v')
			let item4 = Item([0, 4, 1, 0], [0, 4, 1, 0], 'v')
			let added = [item1, item2, item3, item4]
			call multiselector.extend(added)

			Assert Equals(g:autocmdcount, 0)
			let removed = multiselector.remove([])
			Assert Equals(g:autocmdcount, 0)

			let removed = multiselector.remove([0])
			Assert Equals(g:autocmdcount, 1)

			let removed = multiselector.remove([0, 2])
			Assert Equals(g:autocmdcount, 2)

			let removed = multiselector.remove([0])
			Assert Equals(g:autocmdcount, 3)

			call filter(multiselector, 0)
		End
	End

	Context .emit()
		It returns all the items in self.itemlist
			let multiselector = MS.Multiselector(DEFAULTS)
			let item1 = Item([0, 1, 1, 0], [0, 1, 1, 0], 'v')
			let item2 = Item([0, 2, 1, 0], [0, 2, 1, 0], 'v')
			let item3 = Item([0, 3, 1, 0], [0, 3, 1, 0], 'v')
			let added = [item1, item2, item3]
			call multiselector.extend(added)
			Assert LengthOf(multiselector.itemlist, 3)

			let emitted = multiselector.emit()
			Assert LengthOf(multiselector.itemlist, 0)
			Assert IsList(emitted)
			Assert LengthOf(emitted, 3)
			Assert Equals(emitted[0], item1)
			Assert Equals(emitted[1], item2)
			Assert Equals(emitted[2], item3)
			Assert Equals(multiselector._last.event, 'uncheck')
			Assert Equals(multiselector._last.itemlist, emitted)

			call filter(multiselector, 0)
		End

		It turns off the highlight of emitted item
			let multiselector = MS.Multiselector(DEFAULTS)
			let item1 = Item([0, 1, 1, 0], [0, 1, 1, 0], 'v')
			let item2 = Item([0, 2, 1, 0], [0, 2, 1, 0], 'v')
			let item3 = Item([0, 3, 1, 0], [0, 3, 1, 0], 'v')
			let added = [item1, item2, item3]
			call multiselector.extend(added)

			let emitted = multiselector.emit()
			Assert False(emitted[0].isshownin(win_getid()))
			Assert False(emitted[1].isshownin(win_getid()))
			Assert False(emitted[2].isshownin(win_getid()))

			call filter(multiselector, 0)
		End

		It triggers autocmd event 'MultiselectUncheckPost' evry after emitting
			let g:autocmdcount = 0
			augroup test-multiselect
				autocmd!
				autocmd User MultiselectUncheckPost let g:autocmdcount += 1
			augroup End

			let multiselector = MS.Multiselector(DEFAULTS)
			let item1 = Item([0, 1, 1, 0], [0, 1, 1, 0], 'v')
			let item2 = Item([0, 2, 1, 0], [0, 2, 1, 0], 'v')
			let item3 = Item([0, 3, 1, 0], [0, 3, 1, 0], 'v')
			let added = [item1, item2, item3]
			call multiselector.extend(added)

			Assert Equals(g:autocmdcount, 0)
			let emitted = multiselector.emit()
			Assert Equals(g:autocmdcount, 1)

			augroup test-multiselect
				autocmd!
			augroup End
			unlet! g:autocmdcount
			call filter(multiselector, 0)
		End
	End

	Context .emit(Filterexpr)
		It returns only the items that a:filterexpr returns TRUE
			let multiselector = MS.Multiselector(DEFAULTS)
			let item1 = Item([0, 1, 1, 0], [0, 1, 1, 0], 'v')
			let item2 = Item([0, 2, 1, 0], [0, 2, 1, 0], 'v')
			let item3 = Item([0, 3, 1, 0], [0, 3, 1, 0], 'v')
			let added = [item1, item2, item3]
			call multiselector.extend(added)
			Assert LengthOf(multiselector.itemlist, 3)

			let emitted = multiselector.emit({i, item -> item.head[1] == 2})
			Assert LengthOf(multiselector.itemlist, 2)
			Assert IsList(emitted)
			Assert LengthOf(emitted, 1)
			Assert Equals(emitted[0], item2)
			Assert Equals(multiselector.itemlist[0], item1)
			Assert Equals(multiselector.itemlist[1], item3)
			Assert Equals(multiselector._last.event, 'uncheck')
			Assert Equals(multiselector._last.itemlist, emitted)

			call filter(multiselector, 0)
		End

		It turns off the highlight of emitted items
			let multiselector = MS.Multiselector(DEFAULTS)
			let item1 = Item([0, 1, 1, 0], [0, 1, 1, 0], 'v')
			let item2 = Item([0, 2, 1, 0], [0, 2, 1, 0], 'v')
			let item3 = Item([0, 3, 1, 0], [0, 3, 1, 0], 'v')
			let added = [item1, item2, item3]
			call multiselector.extend(added)

			let emitted = multiselector.emit({i, item -> item.head[1] == 2})
			Assert False(emitted[0].isshownin(win_getid()))
			Assert True(multiselector.itemlist[0]['isshownin'](win_getid()))
			Assert True(multiselector.itemlist[1]['isshownin'](win_getid()))

			call filter(multiselector, 0)
		End

		It triggers autocmd event 'MultiselectUncheckPost' evry after emitting
			let g:autocmdcount = 0
			augroup test-multiselect
				autocmd!
				autocmd User MultiselectUncheckPost let g:autocmdcount += 1
			augroup End

			let multiselector = MS.Multiselector(DEFAULTS)
			let item1 = Item([0, 1, 1, 0], [0, 1, 1, 0], 'v')
			let item2 = Item([0, 2, 1, 0], [0, 2, 1, 0], 'v')
			let item3 = Item([0, 3, 1, 0], [0, 3, 1, 0], 'v')
			let added = [item1, item2, item3]
			call multiselector.extend(added)

			Assert Equals(g:autocmdcount, 0)
			let emitted = multiselector.emit({i, item -> item.head[1] == 2})
			Assert Equals(g:autocmdcount, 1)

			augroup test-multiselect
				autocmd!
			augroup End
			unlet! g:autocmdcount
			call filter(multiselector, 0)
		End
	End

	Context .enumerate()
		It returns a list of lists of index and item
			let multiselector = MS.Multiselector(DEFAULTS)
			let item1 = Item([0, 1, 1, 0], [0, 1, 1, 0], 'v')
			let item2 = Item([0, 2, 1, 0], [0, 2, 1, 0], 'v')
			let item3 = Item([0, 3, 1, 0], [0, 3, 1, 0], 'v')
			let added = [item1, item2, item3]
			call multiselector.extend(added)

			let listed = multiselector.enumerate()
			Assert IsList(listed)
			Assert LengthOf(listed, 3)

			Assert IsList(listed[0])
			Assert LengthOf(listed[0], 2)
			Assert Equals(listed[0][0], 0)
			Assert Same(listed[0][1], item1)

			Assert IsList(listed[1])
			Assert LengthOf(listed[1], 2)
			Assert Equals(listed[1][0], 1)
			Assert Same(listed[1][1], item2)

			Assert IsList(listed[2])
			Assert LengthOf(listed[2], 2)
			Assert Equals(listed[2][0], 2)
			Assert Same(listed[2][1], item3)

			call filter(multiselector, 0)
		End

		It does not uncheck items
			let multiselector = MS.Multiselector(DEFAULTS)
			let item1 = Item([0, 1, 1, 0], [0, 1, 1, 0], 'v')
			let item2 = Item([0, 2, 1, 0], [0, 2, 1, 0], 'v')
			let item3 = Item([0, 3, 1, 0], [0, 3, 1, 0], 'v')
			let added = [item1, item2, item3]
			call multiselector.extend(added)

			Assert LengthOf(multiselector.itemlist, 3)
			Assert Equals(multiselector._last.event, 'check')
			Assert Equals(multiselector._last.itemlist, added)

			let listed = multiselector.enumerate()

			Assert LengthOf(multiselector.itemlist, 3)
			Assert Equals(multiselector._last.event, 'check')
			Assert Equals(multiselector._last.itemlist, added)

			call filter(multiselector, 0)
		End
	End

	Context .enumerate(Filterexpr)
		It returns only the items and indexes that a:filterexpr returns TRUE
			let multiselector = MS.Multiselector(DEFAULTS)
			let item1 = Item([0, 1, 1, 0], [0, 1, 1, 0], 'v')
			let item2 = Item([0, 2, 1, 0], [0, 2, 1, 0], 'v')
			let item3 = Item([0, 3, 1, 0], [0, 3, 1, 0], 'v')
			let added = [item1, item2, item3]
			call multiselector.extend(added)

			let listed = multiselector.enumerate({_, item -> item.head[1] == 0})
			Assert IsList(listed)
			Assert LengthOf(listed, 0)

			let listed = multiselector.enumerate({_, item -> item.head[1] >= 2})
			Assert IsList(listed)
			Assert LengthOf(listed, 2)

			Assert IsList(listed[0])
			Assert LengthOf(listed[0], 2)
			Assert Equals(listed[0][0], 1)
			Assert Same(listed[0][1], item2)

			Assert IsList(listed[1])
			Assert LengthOf(listed[1], 2)
			Assert Equals(listed[1][0], 2)
			Assert Same(listed[1][1], item3)

			let listed = multiselector.enumerate({_, item -> item.head[1] != 2})
			Assert IsList(listed)
			Assert LengthOf(listed, 2)

			Assert IsList(listed[0])
			Assert LengthOf(listed[0], 2)
			Assert Equals(listed[0][0], 0)
			Assert Same(listed[0][1], item1)

			Assert IsList(listed[1])
			Assert LengthOf(listed[1], 2)
			Assert Equals(listed[1][0], 2)
			Assert Same(listed[1][1], item3)

			call filter(multiselector, 0)
		End

		It does not uncheck items
			let multiselector = MS.Multiselector(DEFAULTS)
			let item1 = Item([0, 1, 1, 0], [0, 1, 1, 0], 'v')
			let item2 = Item([0, 2, 1, 0], [0, 2, 1, 0], 'v')
			let item3 = Item([0, 3, 1, 0], [0, 3, 1, 0], 'v')
			let added = [item1, item2, item3]
			call multiselector.extend(added)

			Assert LengthOf(multiselector.itemlist, 3)
			Assert Equals(multiselector._last.event, 'check')
			Assert Equals(multiselector._last.itemlist, added)

			let listed = multiselector.enumerate({_, item -> item.head[1] >= 2})

			Assert LengthOf(multiselector.itemlist, 3)
			Assert Equals(multiselector._last.event, 'check')
			Assert Equals(multiselector._last.itemlist, added)

			call filter(multiselector, 0)
		End
	End

	Context .filter(Filterexpr)
		It removes the items that a:Filterexpr returns FALSE
			let multiselector = MS.Multiselector(DEFAULTS)
			let item1 = Item([0, 1, 1, 0], [0, 1, 1, 0], 'v')
			let item2 = Item([0, 2, 1, 0], [0, 2, 1, 0], 'v')
			let item3 = Item([0, 3, 1, 0], [0, 3, 1, 0], 'v')
			let added = [item1, item2, item3]
			call multiselector.extend(added)

			Assert LengthOf(multiselector.itemlist, 3)
			Assert Equals(multiselector._last.event, 'check')
			Assert Equals(multiselector._last.itemlist, added)

			let remained = multiselector.filter({i, item -> item.head[1] == 2})
			Assert IsList(remained)
			Assert LengthOf(remained, 1)
			Assert Same(remained[0], item2)
			Assert Same(remained, multiselector.itemlist)
			Assert Equals(multiselector._last.event, 'uncheck')
			Assert Equals(sort(multiselector._last.itemlist), sort([item1, item3]))

			call multiselector.uncheckall()
			call multiselector.extend(added)

			let remained = multiselector.filter({i, item -> item.head[1] != 2})
			Assert IsList(remained)
			Assert LengthOf(remained, 2)
			Assert Same(remained[0], item1)
			Assert Same(remained[1], item3)
			Assert Same(remained, multiselector.itemlist)
			Assert Equals(multiselector._last.event, 'uncheck')
			Assert Equals(multiselector._last.itemlist, [item2])

			call filter(multiselector, 0)
		End

		It  turns off the highlight of filtered items
			let multiselector = MS.Multiselector(DEFAULTS)
			let item1 = Item([0, 1, 1, 0], [0, 1, 1, 0], 'v')
			let item2 = Item([0, 2, 1, 0], [0, 2, 1, 0], 'v')
			let item3 = Item([0, 3, 1, 0], [0, 3, 1, 0], 'v')
			let added = [item1, item2, item3]
			call multiselector.extend(added)

			let remained = multiselector.filter({i, item -> item.head[1] == 2})
			Assert False(item1.isshownin(win_getid()))
			Assert True(item2.isshownin(win_getid()))
			Assert False(item3.isshownin(win_getid()))

			call multiselector.uncheckall()
			call multiselector.extend(added)

			let remained = multiselector.filter({i, item -> item.head[1] != 2})
			Assert True(item1.isshownin(win_getid()))
			Assert False(item2.isshownin(win_getid()))
			Assert True(item3.isshownin(win_getid()))

			call filter(multiselector, 0)
		End

		It triggers autocmd event 'MultiselectUncheckPost' evry after emitting
			let g:autocmdcount = 0
			augroup test-multiselect
				autocmd!
				autocmd User MultiselectUncheckPost let g:autocmdcount += 1
			augroup End

			let multiselector = MS.Multiselector(DEFAULTS)
			let item1 = Item([0, 1, 1, 0], [0, 1, 1, 0], 'v')
			let item2 = Item([0, 2, 1, 0], [0, 2, 1, 0], 'v')
			let item3 = Item([0, 3, 1, 0], [0, 3, 1, 0], 'v')
			let added = [item1, item2, item3]
			call multiselector.extend(added)

			Assert Equals(g:autocmdcount, 0)
			let remained = multiselector.filter({i, item -> item.head[1] == 2})
			Assert Equals(g:autocmdcount, 1)

			call multiselector.uncheckall()
			call multiselector.extend(added)

			Assert Equals(g:autocmdcount, 2)
			let remained = multiselector.filter({i, item -> item.head[1] != 2})
			Assert Equals(g:autocmdcount, 3)

			augroup test-multiselect
				autocmd!
			augroup End
			unlet! g:autocmdcount
			call filter(multiselector, 0)
		End
	End

	Context .sort(list)
		It sorts a:list in-place
			let multiselector = MS.Multiselector(DEFAULTS)
			let region1 = Region([0, 1, 1, 0], [0, 1, 1, 0], 'v')
			let region2 = Region([0, 2, 1, 0], [0, 2, 1, 0], 'v')
			let region3 = Region([0, 3, 1, 0], [0, 3, 1, 0], 'v')
			let list = [region1, region2, region3]

			let sorted = multiselector.sort(list)
			Assert Same(sorted, list)
			Assert LengthOf(sorted, 3)
			Assert Equals(sorted[0], region1)
			Assert Equals(sorted[1], region2)
			Assert Equals(sorted[2], region3)

			let list = [region2, region3, region1]
			let sorted = multiselector.sort(list)
			Assert Same(sorted, list)
			Assert LengthOf(sorted, 3)
			Assert Equals(sorted[0], region1)
			Assert Equals(sorted[1], region2)
			Assert Equals(sorted[2], region3)

			call filter(multiselector, 0)
		End

		It sorts charwise and blockwise items in their coulumn order
			let multiselector = MS.Multiselector(DEFAULTS)
			let region1 = Region([0, 3, 1, 0], [0, 3, 2, 0], 'v')
			let region2 = Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")
			let region3 = Region([0, 3, 6, 0], [0, 3, 7, 0], 'v')

			let list = [region1, region2, region3]
			let sorted = multiselector.sort(list)
			Assert Same(sorted[0], region1)
			Assert Same(sorted[1], region2)
			Assert Same(sorted[2], region3)

			let region4 = Region([0, 1, 1, 0], [0, 1, 2, 0], 'v')
			let region5 = Region([0, 2, 1, 0], [0, 2, 2, 0], 'v')
			let region6 = Region([0, 2, 6, 0], [0, 2, 7, 0], 'v')
			let region7 = Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")
			let region8 = Region([0, 4, 1, 0], [0, 4, 2, 0], 'v')
			let region9 = Region([0, 4, 6, 0], [0, 4, 7, 0], 'v')
			let region10 = Region([0, 5, 6, 0], [0, 5, 7, 0], 'v')
			let list = [region4, region5, region6, region7, region8, region9, region10]
			let sorted = multiselector.sort(list)
			Assert Same(sorted[0], region4)
			Assert Same(sorted[1], region5)
			Assert Same(sorted[2], region8)
			Assert Same(sorted[3], region7)
			Assert Same(sorted[4], region6)
			Assert Same(sorted[5], region9)
			Assert Same(sorted[6], region10)

			call filter(multiselector, 0)
		End

		It sorts blockwise and blockwise items in their coulumn order
			let multiselector = MS.Multiselector(DEFAULTS)
			let region1 = Region([0, 3, 1, 0], [0, 3, 2, 0], "\<C-v>")
			let region2 = Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")
			let region3 = Region([0, 3, 6, 0], [0, 3, 7, 0], "\<C-v>")

			let list = [region1, region2, region3]
			let sorted = multiselector.sort(list)
			Assert Equals(sorted[0], region1)
			Assert Equals(sorted[1], region2)
			Assert Equals(sorted[2], region3)

			let region4 = Region([0, 1, 1, 0], [0, 1, 2, 0], "\<C-v>")
			let region5 = Region([0, 2, 1, 0], [0, 2, 2, 0], "\<C-v>")
			let region6 = Region([0, 2, 6, 0], [0, 2, 7, 0], "\<C-v>")
			let region7 = Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")
			let region8 = Region([0, 4, 1, 0], [0, 4, 2, 0], "\<C-v>")
			let region9 = Region([0, 4, 6, 0], [0, 4, 7, 0], "\<C-v>")
			let region10 = Region([0, 5, 6, 0], [0, 5, 7, 0], "\<C-v>")
			let list = [region4, region5, region6, region7, region8, region9, region10]
			let sorted = multiselector.sort(list)
			Assert Equals(sorted[0], region4)
			Assert Equals(sorted[1], region5)
			Assert Equals(sorted[2], region8)
			Assert Equals(sorted[3], region7)
			Assert Equals(sorted[4], region6)
			Assert Equals(sorted[5], region9)
			Assert Equals(sorted[6], region10)

			let region11 = Region([0, 1, 1, 0], [0, 2, 2, 0], "\<C-v>")
			let region12 = Region([0, 4, 1, 0], [0, 5, 2, 0], "\<C-v>")
			let region13 = Region([0, 2, 3, 0], [0, 4, 5, 0], "\<C-v>")
			let region14 = Region([0, 1, 6, 0], [0, 2, 7, 0], "\<C-v>")
			let region15 = Region([0, 4, 6, 0], [0, 4, 7, 0], "\<C-v>")
			let list = [region11, region12, region13, region14, region15]
			let sorted = multiselector.sort(list)
			Assert Equals(sorted[0], region11)
			Assert Equals(sorted[1], region12)
			Assert Equals(sorted[2], region13)
			Assert Equals(sorted[3], region14)
			Assert Equals(sorted[4], region15)

			call filter(multiselector, 0)
		End
	End

	Context .itemnum()
		It returns the number of items
			let multiselector = MS.Multiselector(DEFAULTS)
			Assert Equals(multiselector.itemnum(), 0)

			call multiselector.extend([])
			Assert Equals(multiselector.itemnum(), 0)

			let item1 = Item([0, 1, 1, 0], [0, 1, 1, 0], 'v')
			let item2 = Item([0, 2, 1, 0], [0, 2, 1, 0], 'v')
			let item3 = Item([0, 3, 1, 0], [0, 3, 1, 0], 'v')

			let added = [item1]
			call multiselector.extend(added)
			Assert Equals(multiselector.itemnum(), 1)

			let added = [item2, item3]
			call multiselector.extend(added)
			Assert Equals(multiselector.itemnum(), 3)
		End
	End

	Context .itemnum(Filterexpr)
		It returns the number of items that a:Filterexpr returns TRUE
			let multiselector = MS.Multiselector(DEFAULTS)
			let item1 = Item([0, 1, 1, 0], [0, 1, 1, 0], 'v')
			let item2 = Item([0, 2, 1, 0], [0, 2, 1, 0], 'v')
			let item3 = Item([0, 3, 1, 0], [0, 3, 1, 0], 'v')
			let added = [item1, item2, item3]
			call multiselector.extend(added)
			Assert Equals(multiselector.itemnum({_, item -> item.head[1] == 1}), 1)
			Assert Equals(multiselector.itemnum({_, item -> item.head[1] >= 2}), 2)
			Assert Equals(multiselector.itemnum({_, item -> item.head[1] > 3}), 0)
		End
	End

	Context .keymap_check(mode)
		It registers a word under the cursor in normal mode
			let multiselector = MS.Multiselector(DEFAULTS)
			Assert LengthOf(multiselector.itemlist, 0)
			Assert Equals(multiselector._last.event, '')
			Assert LengthOf(multiselector._last.itemlist, 0)

			%delete
			call setline(1, 'foo bar baz')

			call cursor(1, 1)
			call multiselector.keymap_check('n')
			Assert LengthOf(multiselector.itemlist, 1)
			Assert Equals(multiselector.itemlist[0]['head'], [0, 1, 1, 0])
			Assert Equals(multiselector.itemlist[0]['tail'], [0, 1, 3, 0])
			Assert Equals(multiselector.itemlist[0]['type'], 'char')
			Assert Equals(multiselector._last.event, 'check')
			Assert LengthOf(multiselector._last.itemlist, 1)

			call cursor(1, 5)
			call multiselector.keymap_check('n')
			Assert LengthOf(multiselector.itemlist, 2)
			Assert Equals(multiselector.itemlist[0]['head'], [0, 1, 1, 0])
			Assert Equals(multiselector.itemlist[0]['tail'], [0, 1, 3, 0])
			Assert Equals(multiselector.itemlist[0]['type'], 'char')
			Assert Equals(multiselector.itemlist[1]['head'], [0, 1, 5, 0])
			Assert Equals(multiselector.itemlist[1]['tail'], [0, 1, 7, 0])
			Assert Equals(multiselector.itemlist[1]['type'], 'char')
			Assert Equals(multiselector._last.event, 'check')
			Assert LengthOf(multiselector._last.itemlist, 1)

			call cursor(1, 9)
			call multiselector.keymap_check('n')
			Assert LengthOf(multiselector.itemlist, 3)
			Assert Equals(multiselector.itemlist[0]['head'], [0, 1, 1, 0])
			Assert Equals(multiselector.itemlist[0]['tail'], [0, 1, 3, 0])
			Assert Equals(multiselector.itemlist[0]['type'], 'char')
			Assert Equals(multiselector.itemlist[1]['head'], [0, 1, 5, 0])
			Assert Equals(multiselector.itemlist[1]['tail'], [0, 1, 7, 0])
			Assert Equals(multiselector.itemlist[1]['type'], 'char')
			Assert Equals(multiselector.itemlist[2]['head'], [0, 1, 9, 0])
			Assert Equals(multiselector.itemlist[2]['tail'], [0, 1, 11, 0])
			Assert Equals(multiselector.itemlist[2]['type'], 'char')
			Assert Equals(multiselector._last.event, 'check')
			Assert LengthOf(multiselector._last.itemlist, 1)

			call filter(multiselector, 0)
		End

		It registers a selected word in visual mode
			let multiselector = MS.Multiselector(DEFAULTS)
			Assert LengthOf(multiselector.itemlist, 0)
			Assert Equals(multiselector._last.event, '')
			Assert LengthOf(multiselector._last.itemlist, 0)

			%delete
			call append(0, ['foo bar baz', 'foo bar baz', 'foo bar baz'])

			call cursor(1, 1)
			normal! v
			call cursor(1, 3)
			execute "normal! \<Esc>"
			call multiselector.keymap_check('x')
			Assert LengthOf(multiselector.itemlist, 1)
			Assert Equals(multiselector.itemlist[0]['head'], [0, 1, 1, 0])
			Assert Equals(multiselector.itemlist[0]['tail'], [0, 1, 3, 0])
			Assert Equals(multiselector.itemlist[0]['type'], 'char')
			Assert Equals(multiselector._last.event, 'check')
			Assert LengthOf(multiselector._last.itemlist, 1)

			call cursor(1, 5)
			normal! v
			call cursor(1, 7)
			execute "normal! \<Esc>"
			call multiselector.keymap_check('x')
			Assert LengthOf(multiselector.itemlist, 2)
			Assert Equals(multiselector.itemlist[0]['head'], [0, 1, 1, 0])
			Assert Equals(multiselector.itemlist[0]['tail'], [0, 1, 3, 0])
			Assert Equals(multiselector.itemlist[0]['type'], 'char')
			Assert Equals(multiselector.itemlist[1]['head'], [0, 1, 5, 0])
			Assert Equals(multiselector.itemlist[1]['tail'], [0, 1, 7, 0])
			Assert Equals(multiselector.itemlist[1]['type'], 'char')
			Assert Equals(multiselector._last.event, 'check')
			Assert LengthOf(multiselector._last.itemlist, 1)

			call cursor(1, 9)
			normal! v
			call cursor(1, 11)
			execute "normal! \<Esc>"
			call multiselector.keymap_check('x')
			Assert LengthOf(multiselector.itemlist, 3)
			Assert Equals(multiselector.itemlist[0]['head'], [0, 1, 1, 0])
			Assert Equals(multiselector.itemlist[0]['tail'], [0, 1, 3, 0])
			Assert Equals(multiselector.itemlist[0]['type'], 'char')
			Assert Equals(multiselector.itemlist[1]['head'], [0, 1, 5, 0])
			Assert Equals(multiselector.itemlist[1]['tail'], [0, 1, 7, 0])
			Assert Equals(multiselector.itemlist[1]['type'], 'char')
			Assert Equals(multiselector.itemlist[2]['head'], [0, 1, 9, 0])
			Assert Equals(multiselector.itemlist[2]['tail'], [0, 1, 11, 0])
			Assert Equals(multiselector.itemlist[2]['type'], 'char')
			Assert Equals(multiselector._last.event, 'check')
			Assert LengthOf(multiselector._last.itemlist, 1)

			call cursor(1, 9)
			normal! v
			call cursor(2, 3)
			execute "normal! \<Esc>"
			call multiselector.keymap_check('x')
			Assert LengthOf(multiselector.itemlist, 3)
			Assert Equals(multiselector.itemlist[0]['head'], [0, 1, 1, 0])
			Assert Equals(multiselector.itemlist[0]['tail'], [0, 1, 3, 0])
			Assert Equals(multiselector.itemlist[0]['type'], 'char')
			Assert Equals(multiselector.itemlist[1]['head'], [0, 1, 5, 0])
			Assert Equals(multiselector.itemlist[1]['tail'], [0, 1, 7, 0])
			Assert Equals(multiselector.itemlist[1]['type'], 'char')
			Assert Equals(multiselector.itemlist[2]['head'], [0, 1, 9, 0])
			Assert Equals(multiselector.itemlist[2]['tail'], [0, 2, 3, 0])
			Assert Equals(multiselector.itemlist[2]['type'], 'char')
			Assert Equals(multiselector._last.event, 'check')
			Assert LengthOf(multiselector._last.itemlist, 1)

			call cursor(1, 1)
			normal! V
			execute "normal! \<Esc>"
			call multiselector.keymap_check('x')
			Assert LengthOf(multiselector.itemlist, 1)
			Assert Equals(multiselector.itemlist[0]['head'][1], 1)
			Assert Equals(multiselector.itemlist[0]['tail'][1], 1)
			Assert Equals(multiselector.itemlist[0]['type'], 'line')
			Assert Equals(multiselector._last.event, 'check')
			Assert LengthOf(multiselector._last.itemlist, 1)

			call cursor(1, 1)
			normal! V
			call cursor(2, 1)
			execute "normal! \<Esc>"
			call multiselector.keymap_check('x')
			Assert LengthOf(multiselector.itemlist, 1)
			Assert Equals(multiselector.itemlist[0]['head'][1], 1)
			Assert Equals(multiselector.itemlist[0]['tail'][1], 2)
			Assert Equals(multiselector.itemlist[0]['type'], 'line')
			Assert Equals(multiselector._last.event, 'check')
			Assert LengthOf(multiselector._last.itemlist, 1)

			call cursor(1, 1)
			execute "normal! \<C-v>"
			call cursor(2, 2)
			execute "normal! \<Esc>"
			call multiselector.keymap_check('x')
			Assert LengthOf(multiselector.itemlist, 1)
			Assert Equals(multiselector.itemlist[0]['head'], [0, 1, 1, 0])
			Assert Equals(multiselector.itemlist[0]['tail'], [0, 2, 2, 0])
			Assert Equals(multiselector.itemlist[0]['type'], 'block')
			Assert Equals(multiselector._last.event, 'check')
			Assert LengthOf(multiselector._last.itemlist, 1)

			call cursor(1, 1)
			execute "normal! \<C-v>"
			call cursor(3, 3)
			execute "normal! \<Esc>"
			call multiselector.keymap_check('x')
			Assert LengthOf(multiselector.itemlist, 1)
			Assert Equals(multiselector.itemlist[0]['head'], [0, 1, 1, 0])
			Assert Equals(multiselector.itemlist[0]['tail'], [0, 3, 3, 0])
			Assert Equals(multiselector.itemlist[0]['type'], 'block')
			Assert Equals(multiselector._last.event, 'check')
			Assert LengthOf(multiselector._last.itemlist, 1)

			call cursor(1, 9)
			execute "normal! \<C-v>"
			call cursor(3, 11)
			execute "normal! \<Esc>"
			call multiselector.keymap_check('x')
			Assert LengthOf(multiselector.itemlist, 2)
			Assert Equals(multiselector.itemlist[0]['head'], [0, 1, 1, 0])
			Assert Equals(multiselector.itemlist[0]['tail'], [0, 3, 3, 0])
			Assert Equals(multiselector.itemlist[0]['type'], 'block')
			Assert Equals(multiselector.itemlist[1]['head'], [0, 1, 9, 0])
			Assert Equals(multiselector.itemlist[1]['tail'], [0, 3, 11, 0])
			Assert Equals(multiselector.itemlist[1]['type'], 'block')
			Assert Equals(multiselector._last.event, 'check')
			Assert LengthOf(multiselector._last.itemlist, 1)

			call filter(multiselector, 0)
		End
	End

	Context .keymap_checkpattern('n', pat)
		It registers texts matching with a regex pattern
			let multiselector = MS.Multiselector(DEFAULTS)
			Assert LengthOf(multiselector.itemlist, 0)
			Assert Equals(multiselector._last.event, '')
			Assert LengthOf(multiselector._last.itemlist, 0)

			%delete
			call append(0, ['foo bar baz', 'foo bar baz', 'foo bar baz'])

			call multiselector.keymap_checkpattern('n', 'foo')
			Assert LengthOf(multiselector.itemlist, 3)
			Assert Equals(multiselector.itemlist[0]['head'], [0, 1, 1, 0])
			Assert Equals(multiselector.itemlist[0]['tail'], [0, 1, 3, 0])
			Assert Equals(multiselector.itemlist[0]['type'], 'char')
			Assert Equals(multiselector.itemlist[1]['head'], [0, 2, 1, 0])
			Assert Equals(multiselector.itemlist[1]['tail'], [0, 2, 3, 0])
			Assert Equals(multiselector.itemlist[1]['type'], 'char')
			Assert Equals(multiselector.itemlist[2]['head'], [0, 3, 1, 0])
			Assert Equals(multiselector.itemlist[2]['tail'], [0, 3, 3, 0])
			Assert Equals(multiselector.itemlist[2]['type'], 'char')
			Assert Equals(multiselector._last.event, 'check')
			Assert LengthOf(multiselector._last.itemlist, 3)

			call multiselector.keymap_checkpattern('n', 'ba')
			Assert LengthOf(multiselector.itemlist, 9)
			Assert Equals(multiselector.itemlist[0]['head'], [0, 1, 1, 0])
			Assert Equals(multiselector.itemlist[0]['tail'], [0, 1, 3, 0])
			Assert Equals(multiselector.itemlist[0]['type'], 'char')
			Assert Equals(multiselector.itemlist[1]['head'], [0, 2, 1, 0])
			Assert Equals(multiselector.itemlist[1]['tail'], [0, 2, 3, 0])
			Assert Equals(multiselector.itemlist[1]['type'], 'char')
			Assert Equals(multiselector.itemlist[2]['head'], [0, 3, 1, 0])
			Assert Equals(multiselector.itemlist[2]['tail'], [0, 3, 3, 0])
			Assert Equals(multiselector.itemlist[2]['type'], 'char')
			Assert Equals(multiselector.itemlist[3]['head'], [0, 1, 5, 0])
			Assert Equals(multiselector.itemlist[3]['tail'], [0, 1, 6, 0])
			Assert Equals(multiselector.itemlist[3]['type'], 'char')
			Assert Equals(multiselector.itemlist[4]['head'], [0, 1, 9, 0])
			Assert Equals(multiselector.itemlist[4]['tail'], [0, 1, 10, 0])
			Assert Equals(multiselector.itemlist[4]['type'], 'char')
			Assert Equals(multiselector.itemlist[5]['head'], [0, 2, 5, 0])
			Assert Equals(multiselector.itemlist[5]['tail'], [0, 2, 6, 0])
			Assert Equals(multiselector.itemlist[5]['type'], 'char')
			Assert Equals(multiselector.itemlist[6]['head'], [0, 2, 9, 0])
			Assert Equals(multiselector.itemlist[6]['tail'], [0, 2, 10, 0])
			Assert Equals(multiselector.itemlist[6]['type'], 'char')
			Assert Equals(multiselector.itemlist[7]['head'], [0, 3, 5, 0])
			Assert Equals(multiselector.itemlist[7]['tail'], [0, 3, 6, 0])
			Assert Equals(multiselector.itemlist[7]['type'], 'char')
			Assert Equals(multiselector.itemlist[8]['head'], [0, 3, 9, 0])
			Assert Equals(multiselector.itemlist[8]['tail'], [0, 3, 10, 0])
			Assert Equals(multiselector.itemlist[8]['type'], 'char')
			Assert Equals(multiselector._last.event, 'check')
			Assert LengthOf(multiselector._last.itemlist, 6)

			call multiselector.keymap_checkpattern('n', 'bar')
			Assert LengthOf(multiselector.itemlist, 9)
			Assert Equals(multiselector.itemlist[0]['head'], [0, 1, 1, 0])
			Assert Equals(multiselector.itemlist[0]['tail'], [0, 1, 3, 0])
			Assert Equals(multiselector.itemlist[0]['type'], 'char')
			Assert Equals(multiselector.itemlist[1]['head'], [0, 2, 1, 0])
			Assert Equals(multiselector.itemlist[1]['tail'], [0, 2, 3, 0])
			Assert Equals(multiselector.itemlist[1]['type'], 'char')
			Assert Equals(multiselector.itemlist[2]['head'], [0, 3, 1, 0])
			Assert Equals(multiselector.itemlist[2]['tail'], [0, 3, 3, 0])
			Assert Equals(multiselector.itemlist[2]['type'], 'char')
			Assert Equals(multiselector.itemlist[3]['head'], [0, 1, 9, 0])
			Assert Equals(multiselector.itemlist[3]['tail'], [0, 1, 10, 0])
			Assert Equals(multiselector.itemlist[3]['type'], 'char')
			Assert Equals(multiselector.itemlist[4]['head'], [0, 2, 9, 0])
			Assert Equals(multiselector.itemlist[4]['tail'], [0, 2, 10, 0])
			Assert Equals(multiselector.itemlist[4]['type'], 'char')
			Assert Equals(multiselector.itemlist[5]['head'], [0, 3, 9, 0])
			Assert Equals(multiselector.itemlist[5]['tail'], [0, 3, 10, 0])
			Assert Equals(multiselector.itemlist[5]['type'], 'char')
			Assert Equals(multiselector.itemlist[6]['head'], [0, 1, 5, 0])
			Assert Equals(multiselector.itemlist[6]['tail'], [0, 1, 7, 0])
			Assert Equals(multiselector.itemlist[6]['type'], 'char')
			Assert Equals(multiselector.itemlist[7]['head'], [0, 2, 5, 0])
			Assert Equals(multiselector.itemlist[7]['tail'], [0, 2, 7, 0])
			Assert Equals(multiselector.itemlist[7]['type'], 'char')
			Assert Equals(multiselector.itemlist[8]['head'], [0, 3, 5, 0])
			Assert Equals(multiselector.itemlist[8]['tail'], [0, 3, 7, 0])
			Assert Equals(multiselector.itemlist[8]['type'], 'char')
			Assert Equals(multiselector._last.event, 'check')
			Assert LengthOf(multiselector._last.itemlist, 3)
		End
	End

	Context .keymap_checkpattern('x', pat)
		It registers texts matching with a regex pattern inside the selection
			let multiselector = MS.Multiselector(DEFAULTS)
			Assert LengthOf(multiselector.itemlist, 0)
			Assert Equals(multiselector._last.event, '')
			Assert LengthOf(multiselector._last.itemlist, 0)

			%delete
			call append(0, ['foo bar baz', 'foo bar baz', 'foo bar baz'])

			call cursor(1, 1)
			normal! v
			call cursor(2, 3)
			execute "normal! \<Esc>"
			call multiselector.keymap_checkpattern('x', 'foo')
			Assert LengthOf(multiselector.itemlist, 2)
			Assert Equals(multiselector.itemlist[0]['head'], [0, 1, 1, 0])
			Assert Equals(multiselector.itemlist[0]['tail'], [0, 1, 3, 0])
			Assert Equals(multiselector.itemlist[0]['type'], 'char')
			Assert Equals(multiselector.itemlist[1]['head'], [0, 2, 1, 0])
			Assert Equals(multiselector.itemlist[1]['tail'], [0, 2, 3, 0])
			Assert Equals(multiselector.itemlist[1]['type'], 'char')
			Assert Equals(multiselector._last.event, 'check')
			Assert LengthOf(multiselector._last.itemlist, 2)

			call cursor(2, 1)
			normal! V
			call cursor(3, 1)
			execute "normal! \<Esc>"
			call multiselector.keymap_checkpattern('x', 'bar')
			Assert LengthOf(multiselector.itemlist, 4)
			Assert Equals(multiselector.itemlist[0]['head'], [0, 1, 1, 0])
			Assert Equals(multiselector.itemlist[0]['tail'], [0, 1, 3, 0])
			Assert Equals(multiselector.itemlist[0]['type'], 'char')
			Assert Equals(multiselector.itemlist[1]['head'], [0, 2, 1, 0])
			Assert Equals(multiselector.itemlist[1]['tail'], [0, 2, 3, 0])
			Assert Equals(multiselector.itemlist[1]['type'], 'char')
			Assert Equals(multiselector.itemlist[2]['head'], [0, 2, 5, 0])
			Assert Equals(multiselector.itemlist[2]['tail'], [0, 2, 7, 0])
			Assert Equals(multiselector.itemlist[2]['type'], 'char')
			Assert Equals(multiselector.itemlist[3]['head'], [0, 3, 5, 0])
			Assert Equals(multiselector.itemlist[3]['tail'], [0, 3, 7, 0])
			Assert Equals(multiselector.itemlist[3]['type'], 'char')
			Assert Equals(multiselector._last.event, 'check')
			Assert LengthOf(multiselector._last.itemlist, 2)

			call cursor(1, 5)
			execute "normal! \<C-v>"
			call cursor(2, 11)
			execute "normal! \<Esc>"
			call multiselector.keymap_checkpattern('x', 'baz')
			Assert LengthOf(multiselector.itemlist, 6)
			Assert Equals(multiselector.itemlist[0]['head'], [0, 1, 1, 0])
			Assert Equals(multiselector.itemlist[0]['tail'], [0, 1, 3, 0])
			Assert Equals(multiselector.itemlist[0]['type'], 'char')
			Assert Equals(multiselector.itemlist[1]['head'], [0, 2, 1, 0])
			Assert Equals(multiselector.itemlist[1]['tail'], [0, 2, 3, 0])
			Assert Equals(multiselector.itemlist[1]['type'], 'char')
			Assert Equals(multiselector.itemlist[2]['head'], [0, 2, 5, 0])
			Assert Equals(multiselector.itemlist[2]['tail'], [0, 2, 7, 0])
			Assert Equals(multiselector.itemlist[2]['type'], 'char')
			Assert Equals(multiselector.itemlist[3]['head'], [0, 3, 5, 0])
			Assert Equals(multiselector.itemlist[3]['tail'], [0, 3, 7, 0])
			Assert Equals(multiselector.itemlist[3]['type'], 'char')
			Assert Equals(multiselector.itemlist[4]['head'], [0, 1, 9, 0])
			Assert Equals(multiselector.itemlist[4]['tail'], [0, 1, 11, 0])
			Assert Equals(multiselector.itemlist[4]['type'], 'char')
			Assert Equals(multiselector.itemlist[5]['head'], [0, 2, 9, 0])
			Assert Equals(multiselector.itemlist[5]['tail'], [0, 2, 11, 0])
			Assert Equals(multiselector.itemlist[5]['type'], 'char')
			Assert Equals(multiselector._last.event, 'check')
			Assert LengthOf(multiselector._last.itemlist, 2)
		End
	End

	Context .keymap_uncheck(mode)
		It removes an item under the cursor in normal mode
			%delete
			call setline(1, 'foo bar baz')

			let multiselector = MS.Multiselector(DEFAULTS)
			let item1 = Item([0, 1, 1, 0], [0, 1, 3, 0], 'v')
			let item2 = Item([0, 1, 5, 0], [0, 1, 7, 0], 'v')
			let item3 = Item([0, 1, 9, 0], [0, 1, 11, 0], 'v')
			let added = [item1, item2, item3]
			call multiselector.extend(added)
			Assert LengthOf(multiselector.itemlist, 3)
			Assert Equals(multiselector._last.event, 'check')
			Assert LengthOf(multiselector._last.itemlist, 3)

			call cursor(1, 1)
			call multiselector.keymap_uncheck('n')
			Assert LengthOf(multiselector.itemlist, 2)
			Assert Same(multiselector.itemlist[0], item2)
			Assert Same(multiselector.itemlist[1], item3)
			Assert Equals(multiselector._last.event, 'uncheck')
			Assert LengthOf(multiselector._last.itemlist, 1)

			call cursor(1, 6)
			call multiselector.keymap_uncheck('n')
			Assert LengthOf(multiselector.itemlist, 1)
			Assert Same(multiselector.itemlist[0], item3)
			Assert Equals(multiselector._last.event, 'uncheck')
			Assert LengthOf(multiselector._last.itemlist, 1)

			call cursor(1, 11)
			call multiselector.keymap_uncheck('n')
			Assert LengthOf(multiselector.itemlist, 0)
			Assert Equals(multiselector._last.event, 'uncheck')
			Assert LengthOf(multiselector._last.itemlist, 1)

			call filter(multiselector, 0)
		End

		It removes items inside selection in visual mode
			%delete
			call setline(1, 'foo bar baz')

			let multiselector = MS.Multiselector(DEFAULTS)
			let item1 = Item([0, 1, 1, 0], [0, 1, 3, 0], 'v')
			let item2 = Item([0, 1, 5, 0], [0, 1, 7, 0], 'v')
			let item3 = Item([0, 1, 9, 0], [0, 1, 11, 0], 'v')
			let added = [item1, item2, item3]
			call multiselector.extend(added)
			Assert LengthOf(multiselector.itemlist, 3)
			Assert Equals(multiselector._last.event, 'check')
			Assert LengthOf(multiselector._last.itemlist, 3)

			call cursor(1, 1)
			normal! v
			call cursor(1, 3)
			execute "normal! \<Esc>"
			call multiselector.keymap_uncheck('x')
			Assert LengthOf(multiselector.itemlist, 2)
			Assert Same(multiselector.itemlist[0], item2)
			Assert Same(multiselector.itemlist[1], item3)
			Assert Equals(multiselector._last.event, 'uncheck')
			Assert LengthOf(multiselector._last.itemlist, 1)

			call cursor(1, 4)
			normal! v
			call cursor(1, 8)
			execute "normal! \<Esc>"
			call multiselector.keymap_uncheck('x')
			Assert LengthOf(multiselector.itemlist, 1)
			Assert Same(multiselector.itemlist[0], item3)
			Assert Equals(multiselector._last.event, 'uncheck')
			Assert LengthOf(multiselector._last.itemlist, 1)

			call cursor(1, 8)
			normal! v
			call cursor(1, 9)
			execute "normal! \<Esc>"
			call multiselector.keymap_uncheck('x')
			Assert LengthOf(multiselector.itemlist, 0)
			Assert Equals(multiselector._last.event, 'uncheck')
			Assert LengthOf(multiselector._last.itemlist, 1)

			call filter(multiselector, 0)
		End
	End

	Context .keymap_uncheckall(mode)
		It removes all items in normal mode
			%delete
			call setline(1, 'foo bar baz')

			let multiselector = MS.Multiselector(DEFAULTS)
			let item1 = Item([0, 1, 1, 0], [0, 1, 3, 0], 'v')
			let item2 = Item([0, 1, 5, 0], [0, 1, 7, 0], 'v')
			let item3 = Item([0, 1, 9, 0], [0, 1, 11, 0], 'v')
			let added = [item1, item2, item3]
			call multiselector.extend(added)
			Assert LengthOf(multiselector.itemlist, 3)
			Assert Equals(multiselector._last.event, 'check')
			Assert LengthOf(multiselector._last.itemlist, 3)

			call cursor(1, 1)
			call multiselector.keymap_uncheckall()
			Assert LengthOf(multiselector.itemlist, 0)
			Assert Equals(multiselector._last.event, 'uncheck')
			Assert LengthOf(multiselector._last.itemlist, 3)

			call filter(multiselector, 0)
		End

		It removes all items in visual mode
			%delete
			call setline(1, 'foo bar baz')

			let multiselector = MS.Multiselector(DEFAULTS)
			let item1 = Item([0, 1, 1, 0], [0, 1, 3, 0], 'v')
			let item2 = Item([0, 1, 5, 0], [0, 1, 7, 0], 'v')
			let item3 = Item([0, 1, 9, 0], [0, 1, 11, 0], 'v')
			let added = [item1, item2, item3]
			call multiselector.extend(added)
			Assert LengthOf(multiselector.itemlist, 3)
			Assert Equals(multiselector._last.event, 'check')
			Assert LengthOf(multiselector._last.itemlist, 3)

			call cursor(1, 1)
			normal! v
			call cursor(1, 3)
			execute "normal! \<Esc>"
			call multiselector.keymap_uncheckall()
			Assert LengthOf(multiselector.itemlist, 0)
			Assert Equals(multiselector._last.event, 'uncheck')
			Assert LengthOf(multiselector._last.itemlist, 3)

			call filter(multiselector, 0)
		End
	End
End

Describe utility functions
	Before
		let Percolate = g:MS.percolate
		let Enumerate = g:MS.enumerate
		let Str2type = g:MS.str2type
		let Str2visualcmd = g:MS.str2visualcmd
		let Inorderof = g:MS.inorderof
		let Inbetween = g:MS.inbetween
		let Isextended = g:MS.isextended
		let Shiftenv = g:MS.shiftenv
		let Restoreenv = g:MS.restoreenv
	End

	Before all
		setlocal cindent&
		setlocal cinkeys&
		setlocal indentexpr&
		setlocal indentkeys&
	End

	Context percolate({expr}, {Filterexpr})
		It filters items in a list
			let list = ['foo', 'bar', 'baz']
			let filtered = Percolate(list, {i, item -> i == 1})
			Assert Equals(list, ['foo', 'baz'])
			Assert Equals(filtered, ['bar'])

			let list = ['foo', 'bar', 'baz']
			let filtered = Percolate(list, {i, item -> item[0] is# 'b'})
			Assert Equals(list, ['foo'])
			Assert Equals(filtered, ['bar', 'baz'])
		End

		It filters items in a dictionary
			let dict = {'foo': 1, 'bar': 2, 'baz': 3}
			let filtered = Percolate(dict, {key, val -> key[0] is# 'b'})
			Assert Equals(dict, {'foo': 1})
			Assert Equals(filtered, {'bar': 2, 'baz': 3})

			let dict = {'foo': 1, 'bar': 2, 'baz': 3}
			let filtered = Percolate(dict, {key, val -> val == 1})
			Assert Equals(dict, {'bar': 2, 'baz': 3})
			Assert Equals(filtered, {'foo': 1})
		End
	End

	Context enumerate({list})
		It returns a list of lists of indexes and items
			Assert Equals(Enumerate(['foo', 'bar', 'baz']), [[0, 'foo'], [1, 'bar'], [2, 'baz']])
		End
	End

	Context enumerate({list}, {start})
		It returns a list of lists of indexes and items
			Assert Equals(Enumerate(['foo', 'bar', 'baz'], 1), [[1, 'foo'], [2, 'bar'], [3, 'baz']])
			Assert Equals(Enumerate(['foo', 'bar', 'baz'], 2), [[2, 'foo'], [3, 'bar'], [4, 'baz']])
		End
	End

	Context str2type({str})
		It returns 'char' if {str} is 'char' or 'v'
			Assert Equals(Str2type('char'), 'char')
			Assert Equals(Str2type('v'), 'char')
		End

		It returns 'line' if {str} is 'line' or 'V'
			Assert Equals(Str2type('line'), 'line')
			Assert Equals(Str2type('V'), 'line')
		End

		It returns 'block' if {str} is 'block' or "\<C-v>"
			Assert Equals(Str2type('block'), 'block')
			Assert Equals(Str2type("\<C-v>"), 'block')
			Assert Equals(Str2type("\<C-v>1"), 'block')
			Assert Equals(Str2type("\<C-v>10"), 'block')
		End
	End

	Context str2visualcmd({str})
		It returns 'v' if {str} is 'char' or 'v'
			Assert Equals(Str2visualcmd('char'), 'v')
			Assert Equals(Str2visualcmd('v'), 'v')
		End

		It returns 'V' if {str} is 'line' or 'V'
			Assert Equals(Str2visualcmd('line'), 'V')
			Assert Equals(Str2visualcmd('V'), 'V')
		End

		It returns "\<C-v>" if {str} is 'block' or "\<C-v>"
			Assert Equals(Str2visualcmd('block'), "\<C-v>")
			Assert Equals(Str2visualcmd("\<C-v>"), "\<C-v>")
			Assert Equals(Str2visualcmd("\<C-v>1"), "\<C-v>")
			Assert Equals(Str2visualcmd("\<C-v>10"), "\<C-v>")
		End
	End

	Context inorderof({pos1}, {pos2})
		It returns TRUE if {pos1} is located former than {pos2}
			Assert True(Inorderof([0, 2, 3, 0], [0, 2, 4, 0]))
			Assert True(Inorderof([0, 2, 3, 0], [0, 3, 1, 0]))
			Assert False(Inorderof([0, 2, 3, 0], [0, 1, 1, 0]))
			Assert False(Inorderof([0, 2, 3, 0], [0, 1, 4, 0]))
			Assert False(Inorderof([0, 2, 3, 0], [0, 2, 2, 0]))
			Assert False(Inorderof([0, 2, 3, 0], [0, 2, 3, 0]))
		End
	End

	Context inbetween({pos}, {head}, {tail})
		It returns TRUE if {pos} is in between {head} and {tail}
			Assert True(Inbetween([0, 2, 3, 0], [0, 2, 2, 0], [0, 2, 4, 0]))
			Assert True(Inbetween([0, 2, 3, 0], [0, 2, 3, 0], [0, 2, 4, 0]))
			Assert True(Inbetween([0, 2, 3, 0], [0, 2, 2, 0], [0, 2, 3, 0]))
			Assert True(Inbetween([0, 2, 3, 0], [0, 2, 3, 0], [0, 2, 3, 0]))
			Assert True(Inbetween([0, 2, 3, 0], [0, 1, 4, 0], [0, 2, 4, 0]))
			Assert True(Inbetween([0, 2, 3, 0], [0, 2, 2, 0], [0, 4, 2, 0]))

			Assert False(Inbetween([0, 2, 3, 0], [0, 2, 1, 0], [0, 2, 2, 0]))
			Assert False(Inbetween([0, 2, 3, 0], [0, 2, 4, 0], [0, 2, 5, 0]))
			Assert False(Inbetween([0, 2, 3, 0], [0, 1, 2, 0], [0, 1, 4, 0]))
			Assert False(Inbetween([0, 2, 3, 0], [0, 3, 2, 0], [0, 3, 4, 0]))
		End
	End

	" Context isextended()
	" 	It This function returns TRUE if extended-blockwise visual selected
	" 		execute "normal! \<C-v>2j$"
	" 		execute "normal! \<Esc>"
	" 		Assert True(Isextended())

	" 		execute "normal! \<C-v>2j"
	" 		execute "normal! \<Esc>"
	" 		Assert False(Isextended())
	" 	End
	" End

	Context shiftenv()/restoreenv()
		It swich indent options and restore it.
			setlocal cindent
			setlocal cinkeys&
			let defaultindentkeys = &l:cinkeys
			setlocal cinkeys+=;

			Assert Equals(&l:cinkeys, defaultindentkeys . ',;')

			let indentopt = Shiftenv()

			Assert Equals(&l:cinkeys, defaultindentkeys)

			call Restoreenv(indentopt)

			Assert Equals(&l:cinkeys, defaultindentkeys . ',;')



			setlocal indentexpr=SomethigIndentFuncName
			setlocal indentkeys&
			let defaultindentkeys = &l:indentkeys
			setlocal indentkeys+=;

			Assert Equals(&l:indentkeys, defaultindentkeys . ',;')

			let indentopt = Shiftenv()

			Assert Equals(&l:indentkeys, defaultindentkeys)

			call Restoreenv(indentopt)

			Assert Equals(&l:indentkeys, defaultindentkeys . ',;')

			setlocal cindent&
			setlocal cinkeys&
			setlocal indentexpr&
			setlocal indentkeys&
		End
	End
End
" vim:set noet ts=4 sw=4 sts=-1:
