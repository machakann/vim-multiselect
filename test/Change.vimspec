Describe Change
	Before
		let Region = g:MS.Region
		let Change = g:MS.Change
		%delete
		call append(0, [
			\ 'foo bar baz',
			\ 'foo bar baz',
			\ 'foo bar baz',
			\ ])
		$delete
	End

	Context .beforedelete()
		It records a buffer item to delete
			Assert LengthOf(Change().beforedelete([0, 1, 5, 0], [0, 1, 7, 0], 'char')._changelist, 1)
			Assert LengthOf(Change().beforedelete([0, 1, 9, 0], [0, 1, 12, 0], 'char')._changelist, 1)
			Assert LengthOf(Change().beforedelete([0, 1, 1, 0], [0, 2, 3, 0], 'char')._changelist, 1)
			Assert LengthOf(Change().beforedelete([0, 2, 2, 0], [0, 2, 3, 0], 'line')._changelist, 1)
			Assert LengthOf(Change().beforedelete([0, 1, 2, 0], [0, 2, 3, 0], 'line')._changelist, 1)
			Assert LengthOf(Change().beforedelete([0, 2, 2, 0], [0, 3, 3, 0], 'line')._changelist, 1)
			Assert LengthOf(Change().beforedelete([0, 1, 5, 0], [0, 1, 7, 0], 'block')._changelist, 1)
			Assert LengthOf(Change().beforedelete([0, 1, 5, 0], [0, 2, 7, 0], 'block')._changelist, 2)
		End
	End

	Context .afterinsert()
		It records a buffer item to insert
			Assert LengthOf(Change().afterinsert([0, 1, 5, 0], [0, 1, 7, 0], 'char')._changelist, 1)
			Assert LengthOf(Change().afterinsert([0, 1, 9, 0], [0, 1, 12, 0], 'char')._changelist, 1)
			Assert LengthOf(Change().afterinsert([0, 1, 1, 0], [0, 2, 3, 0], 'char')._changelist, 1)
			Assert LengthOf(Change().afterinsert([0, 2, 2, 0], [0, 2, 3, 0], 'line')._changelist, 1)
			Assert LengthOf(Change().afterinsert([0, 1, 2, 0], [0, 2, 3, 0], 'line')._changelist, 1)
			Assert LengthOf(Change().afterinsert([0, 2, 2, 0], [0, 3, 3, 0], 'line')._changelist, 1)
			Assert LengthOf(Change().afterinsert([0, 1, 5, 0], [0, 1, 7, 0], 'block')._changelist, 1)
			Assert LengthOf(Change().afterinsert([0, 1, 5, 0], [0, 2, 7, 0], 'block')._changelist, 2)
		End
	End

	Context .apply(pos)
		It tracks a position after a characterwise deletion
			Assert Equals(Change().beforedelete([0, 1, 5, 0], [0, 1, 7, 0], 'char').apply([0, 1, 4, 0]), [0, 1, 4, 0])
			Assert Equals(Change().beforedelete([0, 1, 5, 0], [0, 1, 7, 0], 'char').apply([0, 1, 5, 0]), [0, 1, 5, 0])
			Assert Equals(Change().beforedelete([0, 1, 5, 0], [0, 1, 7, 0], 'char').apply([0, 1, 6, 0]), [0, 1, 5, 0])
			Assert Equals(Change().beforedelete([0, 1, 5, 0], [0, 1, 7, 0], 'char').apply([0, 1, 7, 0]), [0, 1, 5, 0])
			Assert Equals(Change().beforedelete([0, 1, 5, 0], [0, 1, 7, 0], 'char').apply([0, 1, 8, 0]), [0, 1, 5, 0])
			Assert Equals(Change().beforedelete([0, 1, 5, 0], [0, 1, 7, 0], 'char').apply([0, 1, 9, 0]), [0, 1, 6, 0])
			Assert Equals(Change().beforedelete([0, 1, 5, 0], [0, 1, 7, 0], 'char').apply([0, 2, 1, 0]), [0, 2, 1, 0])

			Assert Equals(Change().beforedelete([0, 1, 9, 0], [0, 1, 12, 0], 'char').apply([0, 1,  8, 0]), [0, 1,  8, 0])
			Assert Equals(Change().beforedelete([0, 1, 9, 0], [0, 1, 12, 0], 'char').apply([0, 1,  9, 0]), [0, 1,  9, 0])
			Assert Equals(Change().beforedelete([0, 1, 9, 0], [0, 1, 12, 0], 'char').apply([0, 1, 10, 0]), [0, 1,  9, 0])
			Assert Equals(Change().beforedelete([0, 1, 9, 0], [0, 1, 12, 0], 'char').apply([0, 1, 11, 0]), [0, 1,  9, 0])
			Assert Equals(Change().beforedelete([0, 1, 9, 0], [0, 1, 12, 0], 'char').apply([0, 1, 12, 0]), [0, 1,  9, 0])
			Assert Equals(Change().beforedelete([0, 1, 9, 0], [0, 1, 12, 0], 'char').apply([0, 2,  1, 0]), [0, 1,  1, 0])
			Assert Equals(Change().beforedelete([0, 1, 9, 0], [0, 1, 12, 0], 'char').apply([0, 2, 12, 0]), [0, 1, 12, 0])

			Assert Equals(Change().beforedelete([0, 1, 1, 0], [0, 2, 3, 0], 'char').apply([0, 1,  1, 0]), [0, 1, 1, 0])
			Assert Equals(Change().beforedelete([0, 1, 1, 0], [0, 2, 3, 0], 'char').apply([0, 1, 12, 0]), [0, 1, 1, 0])
			Assert Equals(Change().beforedelete([0, 1, 1, 0], [0, 2, 3, 0], 'char').apply([0, 2,  1, 0]), [0, 1, 1, 0])
			Assert Equals(Change().beforedelete([0, 1, 1, 0], [0, 2, 3, 0], 'char').apply([0, 2,  3, 0]), [0, 1, 1, 0])
			Assert Equals(Change().beforedelete([0, 1, 1, 0], [0, 2, 3, 0], 'char').apply([0, 2,  4, 0]), [0, 1, 1, 0])
			Assert Equals(Change().beforedelete([0, 1, 1, 0], [0, 2, 3, 0], 'char').apply([0, 2,  5, 0]), [0, 1, 2, 0])
			Assert Equals(Change().beforedelete([0, 1, 1, 0], [0, 2, 3, 0], 'char').apply([0, 2, 12, 0]), [0, 1, 9, 0])

			Assert Equals(Change().beforedelete([0, 1, 1, 0], [0, 3, 12, 0], 'char').apply([0, 1,  1, 0]), [0, 1, 1, 0])
			Assert Equals(Change().beforedelete([0, 1, 1, 0], [0, 3, 12, 0], 'char').apply([0, 1, 12, 0]), [0, 1, 1, 0])
			Assert Equals(Change().beforedelete([0, 1, 1, 0], [0, 3, 12, 0], 'char').apply([0, 2,  1, 0]), [0, 1, 1, 0])
			Assert Equals(Change().beforedelete([0, 1, 1, 0], [0, 3, 12, 0], 'char').apply([0, 2, 12, 0]), [0, 1, 1, 0])
			Assert Equals(Change().beforedelete([0, 1, 1, 0], [0, 3, 12, 0], 'char').apply([0, 3,  1, 0]), [0, 1, 1, 0])
			Assert Equals(Change().beforedelete([0, 1, 1, 0], [0, 3, 12, 0], 'char').apply([0, 3, 12, 0]), [0, 1, 1, 0])
		End

		It tracks a position after a linewise deletion
			Assert Equals(Change().beforedelete([0, 2, 2, 0], [0, 2, 3, 0], 'line').apply([0, 1,  1, 0]), [0, 1,  1, 0])
			Assert Equals(Change().beforedelete([0, 2, 2, 0], [0, 2, 3, 0], 'line').apply([0, 1, 12, 0]), [0, 1, 12, 0])
			Assert Equals(Change().beforedelete([0, 2, 2, 0], [0, 2, 3, 0], 'line').apply([0, 2,  1, 0]), [0, 2,  1, 0])
			Assert Equals(Change().beforedelete([0, 2, 2, 0], [0, 2, 3, 0], 'line').apply([0, 2, 12, 0]), [0, 2,  1, 0])
			Assert Equals(Change().beforedelete([0, 2, 2, 0], [0, 2, 3, 0], 'line').apply([0, 3,  1, 0]), [0, 2,  1, 0])
			Assert Equals(Change().beforedelete([0, 2, 2, 0], [0, 2, 3, 0], 'line').apply([0, 3,  2, 0]), [0, 2,  2, 0])
			Assert Equals(Change().beforedelete([0, 2, 2, 0], [0, 2, 3, 0], 'line').apply([0, 3, 12, 0]), [0, 2, 12, 0])

			Assert Equals(Change().beforedelete([0, 1, 2, 0], [0, 2, 3, 0], 'line').apply([0, 1,  1, 0]), [0, 1,  1, 0])
			Assert Equals(Change().beforedelete([0, 1, 2, 0], [0, 2, 3, 0], 'line').apply([0, 1, 12, 0]), [0, 1,  1, 0])
			Assert Equals(Change().beforedelete([0, 1, 2, 0], [0, 2, 3, 0], 'line').apply([0, 2,  1, 0]), [0, 1,  1, 0])
			Assert Equals(Change().beforedelete([0, 1, 2, 0], [0, 2, 3, 0], 'line').apply([0, 2, 12, 0]), [0, 1,  1, 0])
			Assert Equals(Change().beforedelete([0, 1, 2, 0], [0, 2, 3, 0], 'line').apply([0, 3,  1, 0]), [0, 1,  1, 0])
			Assert Equals(Change().beforedelete([0, 1, 2, 0], [0, 2, 3, 0], 'line').apply([0, 3, 12, 0]), [0, 1, 12, 0])

			Assert Equals(Change().beforedelete([0, 2, 2, 0], [0, 3, 3, 0], 'line').apply([0, 1,  1, 0]), [0, 1,  1, 0])
			Assert Equals(Change().beforedelete([0, 2, 2, 0], [0, 3, 3, 0], 'line').apply([0, 1, 12, 0]), [0, 1, 12, 0])
			Assert Equals(Change().beforedelete([0, 2, 2, 0], [0, 3, 3, 0], 'line').apply([0, 2,  1, 0]), [0, 2,  1, 0])
			Assert Equals(Change().beforedelete([0, 2, 2, 0], [0, 3, 3, 0], 'line').apply([0, 2, 12, 0]), [0, 2,  1, 0])
			Assert Equals(Change().beforedelete([0, 2, 2, 0], [0, 3, 3, 0], 'line').apply([0, 3,  1, 0]), [0, 2,  1, 0])
			Assert Equals(Change().beforedelete([0, 2, 2, 0], [0, 3, 3, 0], 'line').apply([0, 3, 12, 0]), [0, 2,  1, 0])

			Assert Equals(Change().beforedelete([0, 1, 1, 0], [0, 3, 12, 0], 'line').apply([0, 1,  1, 0]), [0, 1, 1, 0])
			Assert Equals(Change().beforedelete([0, 1, 1, 0], [0, 3, 12, 0], 'line').apply([0, 1, 12, 0]), [0, 1, 1, 0])
			Assert Equals(Change().beforedelete([0, 1, 1, 0], [0, 3, 12, 0], 'line').apply([0, 2,  1, 0]), [0, 1, 1, 0])
			Assert Equals(Change().beforedelete([0, 1, 1, 0], [0, 3, 12, 0], 'line').apply([0, 2, 12, 0]), [0, 1, 1, 0])
			Assert Equals(Change().beforedelete([0, 1, 1, 0], [0, 3, 12, 0], 'line').apply([0, 3,  1, 0]), [0, 1, 1, 0])
			Assert Equals(Change().beforedelete([0, 1, 1, 0], [0, 3, 12, 0], 'line').apply([0, 3, 12, 0]), [0, 1, 1, 0])
		End

		It tracks a position after a blockwise deletion
			Assert Equals(Change().beforedelete([0, 1, 5, 0], [0, 1, 7, 0], 'block').apply([0, 1, 4, 0]), [0, 1, 4, 0])
			Assert Equals(Change().beforedelete([0, 1, 5, 0], [0, 1, 7, 0], 'block').apply([0, 1, 5, 0]), [0, 1, 5, 0])
			Assert Equals(Change().beforedelete([0, 1, 5, 0], [0, 1, 7, 0], 'block').apply([0, 1, 6, 0]), [0, 1, 5, 0])
			Assert Equals(Change().beforedelete([0, 1, 5, 0], [0, 1, 7, 0], 'block').apply([0, 1, 7, 0]), [0, 1, 5, 0])
			Assert Equals(Change().beforedelete([0, 1, 5, 0], [0, 1, 7, 0], 'block').apply([0, 1, 8, 0]), [0, 1, 5, 0])
			Assert Equals(Change().beforedelete([0, 1, 5, 0], [0, 1, 7, 0], 'block').apply([0, 1, 9, 0]), [0, 1, 6, 0])
			Assert Equals(Change().beforedelete([0, 1, 5, 0], [0, 1, 7, 0], 'block').apply([0, 2, 1, 0]), [0, 2, 1, 0])

			Assert Equals(Change().beforedelete([0, 1, 5, 0], [0, 2, 7, 0], 'block').apply([0, 1,  4, 0]), [0, 1,  4, 0])
			Assert Equals(Change().beforedelete([0, 1, 5, 0], [0, 2, 7, 0], 'block').apply([0, 1,  5, 0]), [0, 1,  5, 0])
			Assert Equals(Change().beforedelete([0, 1, 5, 0], [0, 2, 7, 0], 'block').apply([0, 1,  6, 0]), [0, 1,  5, 0])
			Assert Equals(Change().beforedelete([0, 1, 5, 0], [0, 2, 7, 0], 'block').apply([0, 1,  7, 0]), [0, 1,  5, 0])
			Assert Equals(Change().beforedelete([0, 1, 5, 0], [0, 2, 7, 0], 'block').apply([0, 1,  8, 0]), [0, 1,  5, 0])
			Assert Equals(Change().beforedelete([0, 1, 5, 0], [0, 2, 7, 0], 'block').apply([0, 1,  9, 0]), [0, 1,  6, 0])
			Assert Equals(Change().beforedelete([0, 1, 5, 0], [0, 2, 7, 0], 'block').apply([0, 2,  4, 0]), [0, 2,  4, 0])
			Assert Equals(Change().beforedelete([0, 1, 5, 0], [0, 2, 7, 0], 'block').apply([0, 2,  5, 0]), [0, 2,  5, 0])
			Assert Equals(Change().beforedelete([0, 1, 5, 0], [0, 2, 7, 0], 'block').apply([0, 2,  6, 0]), [0, 2,  5, 0])
			Assert Equals(Change().beforedelete([0, 1, 5, 0], [0, 2, 7, 0], 'block').apply([0, 2,  7, 0]), [0, 2,  5, 0])
			Assert Equals(Change().beforedelete([0, 1, 5, 0], [0, 2, 7, 0], 'block').apply([0, 2,  8, 0]), [0, 2,  5, 0])
			Assert Equals(Change().beforedelete([0, 1, 5, 0], [0, 2, 7, 0], 'block').apply([0, 2,  9, 0]), [0, 2,  6, 0])
			Assert Equals(Change().beforedelete([0, 1, 5, 0], [0, 2, 7, 0], 'block').apply([0, 3,  1, 0]), [0, 3,  1, 0])
			Assert Equals(Change().beforedelete([0, 1, 5, 0], [0, 2, 7, 0], 'block').apply([0, 3, 12, 0]), [0, 3, 12, 0])

			Assert Equals(Change().beforedelete([0, 1, 1, 0], [0, 3, 12, 0], 'block').apply([0, 1,  1, 0]), [0, 1, 1, 0])
			Assert Equals(Change().beforedelete([0, 1, 1, 0], [0, 3, 12, 0], 'block').apply([0, 1, 12, 0]), [0, 1, 1, 0])
			Assert Equals(Change().beforedelete([0, 1, 1, 0], [0, 3, 12, 0], 'block').apply([0, 2,  1, 0]), [0, 2, 1, 0])
			Assert Equals(Change().beforedelete([0, 1, 1, 0], [0, 3, 12, 0], 'block').apply([0, 2, 12, 0]), [0, 2, 1, 0])
			Assert Equals(Change().beforedelete([0, 1, 1, 0], [0, 3, 12, 0], 'block').apply([0, 3,  1, 0]), [0, 3, 1, 0])
			Assert Equals(Change().beforedelete([0, 1, 1, 0], [0, 3, 12, 0], 'block').apply([0, 3, 12, 0]), [0, 3, 1, 0])
		End

		It tracks a position after a characterwise insertion
			Assert Equals(Change().afterinsert([0, 1, 1, 0], [0, 1, 4, 0], 'char').apply([0, 1, 1, 0]), [0, 1, 4, 0])
			Assert Equals(Change().afterinsert([0, 1, 1, 0], [0, 1, 4, 0], 'char').apply([0, 1, 3, 0]), [0, 1, 6, 0])
			Assert Equals(Change().afterinsert([0, 1, 1, 0], [0, 1, 4, 0], 'char').apply([0, 1, 4, 0]), [0, 1, 7, 0])
			Assert Equals(Change().afterinsert([0, 1, 1, 0], [0, 1, 4, 0], 'char').apply([0, 1, 5, 0]), [0, 1, 8, 0])
			Assert Equals(Change().afterinsert([0, 1, 1, 0], [0, 1, 4, 0], 'char').apply([0, 2, 1, 0]), [0, 2, 1, 0])

			Assert Equals(Change().afterinsert([0, 1, 5, 0], [0, 1, 8, 0], 'char').apply([0, 1, 4, 0]), [0, 1, 4, 0])
			Assert Equals(Change().afterinsert([0, 1, 5, 0], [0, 1, 8, 0], 'char').apply([0, 1, 5, 0]), [0, 1, 8, 0])
			Assert Equals(Change().afterinsert([0, 1, 5, 0], [0, 1, 8, 0], 'char').apply([0, 1, 6, 0]), [0, 1, 9, 0])
			Assert Equals(Change().afterinsert([0, 1, 5, 0], [0, 1, 8, 0], 'char').apply([0, 2, 1, 0]), [0, 2, 1, 0])

			Assert Equals(Change().afterinsert([0, 1, 9, 0], [0, 1, 12, 0], 'char').apply([0, 1,  8, 0]), [0, 1,  8, 0])
			Assert Equals(Change().afterinsert([0, 1, 9, 0], [0, 1, 12, 0], 'char').apply([0, 1,  9, 0]), [0, 1, 12, 0])
			Assert Equals(Change().afterinsert([0, 1, 9, 0], [0, 1, 12, 0], 'char').apply([0, 2,  1, 0]), [0, 2,  1, 0])

			Assert Equals(Change().afterinsert([0, 1, 12, 0], [0, 2, 1, 0], 'char').apply([0, 1, 11, 0]), [0, 1, 11, 0])
			Assert Equals(Change().afterinsert([0, 1, 12, 0], [0, 2, 1, 0], 'char').apply([0, 1, 12, 0]), [0, 2,  1, 0])
			Assert Equals(Change().afterinsert([0, 1, 12, 0], [0, 2, 1, 0], 'char').apply([0, 2,  1, 0]), [0, 3,  1, 0])
			Assert Equals(Change().afterinsert([0, 1, 12, 0], [0, 2, 1, 0], 'char').apply([0, 3,  1, 0]), [0, 4,  1, 0])

			Assert Equals(Change().afterinsert([0, 1, 5, 0], [0, 2, 1, 0], 'char').apply([0, 1, 4, 0]), [0, 1, 4, 0])
			Assert Equals(Change().afterinsert([0, 1, 5, 0], [0, 2, 1, 0], 'char').apply([0, 1, 5, 0]), [0, 2, 1, 0])
			Assert Equals(Change().afterinsert([0, 1, 5, 0], [0, 2, 1, 0], 'char').apply([0, 1, 6, 0]), [0, 2, 2, 0])
			Assert Equals(Change().afterinsert([0, 1, 5, 0], [0, 2, 1, 0], 'char').apply([0, 1, 7, 0]), [0, 2, 3, 0])
			Assert Equals(Change().afterinsert([0, 1, 5, 0], [0, 2, 1, 0], 'char').apply([0, 2, 1, 0]), [0, 3, 1, 0])
			Assert Equals(Change().afterinsert([0, 1, 5, 0], [0, 2, 1, 0], 'char').apply([0, 3, 1, 0]), [0, 4, 1, 0])

			Assert Equals(Change().afterinsert([0, 1, 5, 0], [0, 2, 3, 0], 'char').apply([0, 1, 4, 0]), [0, 1, 4, 0])
			Assert Equals(Change().afterinsert([0, 1, 5, 0], [0, 2, 3, 0], 'char').apply([0, 1, 5, 0]), [0, 2, 3, 0])
			Assert Equals(Change().afterinsert([0, 1, 5, 0], [0, 2, 3, 0], 'char').apply([0, 1, 6, 0]), [0, 2, 4, 0])
			Assert Equals(Change().afterinsert([0, 1, 5, 0], [0, 2, 3, 0], 'char').apply([0, 2, 3, 0]), [0, 3, 3, 0])
		End

		It tracks a position after a linewise insertion
			Assert Equals(Change().afterinsert([0, 1, 1, 0], [0, 1, 1, 0], 'line').apply([0, 1,  1, 0]), [0, 2,  1, 0])
			Assert Equals(Change().afterinsert([0, 1, 1, 0], [0, 1, 1, 0], 'line').apply([0, 1, 12, 0]), [0, 2, 12, 0])
			Assert Equals(Change().afterinsert([0, 1, 1, 0], [0, 1, 1, 0], 'line').apply([0, 2,  1, 0]), [0, 3,  1, 0])
			Assert Equals(Change().afterinsert([0, 1, 1, 0], [0, 1, 1, 0], 'line').apply([0, 2, 12, 0]), [0, 3, 12, 0])
			Assert Equals(Change().afterinsert([0, 1, 1, 0], [0, 1, 1, 0], 'line').apply([0, 3,  1, 0]), [0, 4,  1, 0])
			Assert Equals(Change().afterinsert([0, 1, 1, 0], [0, 1, 1, 0], 'line').apply([0, 3, 12, 0]), [0, 4, 12, 0])

			Assert Equals(Change().afterinsert([0, 1, 1, 0], [0, 2, 1, 0], 'line').apply([0, 1,  1, 0]), [0, 3,  1, 0])
			Assert Equals(Change().afterinsert([0, 1, 1, 0], [0, 2, 1, 0], 'line').apply([0, 1, 12, 0]), [0, 3, 12, 0])
			Assert Equals(Change().afterinsert([0, 1, 1, 0], [0, 2, 1, 0], 'line').apply([0, 2,  1, 0]), [0, 4,  1, 0])
			Assert Equals(Change().afterinsert([0, 1, 1, 0], [0, 2, 1, 0], 'line').apply([0, 2, 12, 0]), [0, 4, 12, 0])
			Assert Equals(Change().afterinsert([0, 1, 1, 0], [0, 2, 1, 0], 'line').apply([0, 3,  1, 0]), [0, 5,  1, 0])
			Assert Equals(Change().afterinsert([0, 1, 1, 0], [0, 2, 1, 0], 'line').apply([0, 3, 12, 0]), [0, 5, 12, 0])
		End

		It tracks a position after a blockwise insertion
			Assert Equals(Change().afterinsert([0, 1, 1, 0], [0, 1, 4, 0], 'block').apply([0, 1, 1, 0]), [0, 1, 4, 0])
			Assert Equals(Change().afterinsert([0, 1, 1, 0], [0, 1, 4, 0], 'block').apply([0, 1, 3, 0]), [0, 1, 6, 0])
			Assert Equals(Change().afterinsert([0, 1, 1, 0], [0, 1, 4, 0], 'block').apply([0, 1, 4, 0]), [0, 1, 7, 0])
			Assert Equals(Change().afterinsert([0, 1, 1, 0], [0, 1, 4, 0], 'block').apply([0, 1, 5, 0]), [0, 1, 8, 0])
			Assert Equals(Change().afterinsert([0, 1, 1, 0], [0, 1, 4, 0], 'block').apply([0, 2, 1, 0]), [0, 2, 1, 0])

			Assert Equals(Change().afterinsert([0, 1, 5, 0], [0, 1, 8, 0], 'block').apply([0, 1, 4, 0]), [0, 1, 4, 0])
			Assert Equals(Change().afterinsert([0, 1, 5, 0], [0, 1, 8, 0], 'block').apply([0, 1, 5, 0]), [0, 1, 8, 0])
			Assert Equals(Change().afterinsert([0, 1, 5, 0], [0, 1, 8, 0], 'block').apply([0, 1, 6, 0]), [0, 1, 9, 0])
			Assert Equals(Change().afterinsert([0, 1, 5, 0], [0, 1, 8, 0], 'block').apply([0, 2, 1, 0]), [0, 2, 1, 0])

			Assert Equals(Change().afterinsert([0, 1, 9, 0], [0, 1, 12, 0], 'block').apply([0, 1,  8, 0]), [0, 1,  8, 0])
			Assert Equals(Change().afterinsert([0, 1, 9, 0], [0, 1, 12, 0], 'block').apply([0, 1,  9, 0]), [0, 1, 12, 0])
			Assert Equals(Change().afterinsert([0, 1, 9, 0], [0, 1, 12, 0], 'block').apply([0, 2,  1, 0]), [0, 2,  1, 0])

			Assert Equals(Change().afterinsert([0, 1, 1, 0], [0, 2, 4, 0], 'block').apply([0, 1,  1, 0]), [0, 1,  4, 0])
			Assert Equals(Change().afterinsert([0, 1, 1, 0], [0, 2, 4, 0], 'block').apply([0, 1,  2, 0]), [0, 1,  5, 0])
			Assert Equals(Change().afterinsert([0, 1, 1, 0], [0, 2, 4, 0], 'block').apply([0, 2,  1, 0]), [0, 2,  4, 0])
			Assert Equals(Change().afterinsert([0, 1, 1, 0], [0, 2, 4, 0], 'block').apply([0, 2,  2, 0]), [0, 2,  5, 0])
			Assert Equals(Change().afterinsert([0, 1, 1, 0], [0, 2, 4, 0], 'block').apply([0, 3,  1, 0]), [0, 3,  1, 0])
			Assert Equals(Change().afterinsert([0, 1, 1, 0], [0, 2, 4, 0], 'block').apply([0, 3,  2, 0]), [0, 3,  2, 0])

			Assert Equals(Change().afterinsert([0, 1, 5, 0], [0, 2, 8, 0], 'block').apply([0, 1,  1, 0]), [0, 1,  1, 0])
			Assert Equals(Change().afterinsert([0, 1, 5, 0], [0, 2, 8, 0], 'block').apply([0, 1,  4, 0]), [0, 1,  4, 0])
			Assert Equals(Change().afterinsert([0, 1, 5, 0], [0, 2, 8, 0], 'block').apply([0, 1,  5, 0]), [0, 1,  8, 0])
			Assert Equals(Change().afterinsert([0, 1, 5, 0], [0, 2, 8, 0], 'block').apply([0, 1,  6, 0]), [0, 1,  9, 0])
			Assert Equals(Change().afterinsert([0, 1, 5, 0], [0, 2, 8, 0], 'block').apply([0, 1,  7, 0]), [0, 1, 10, 0])
			Assert Equals(Change().afterinsert([0, 1, 5, 0], [0, 2, 8, 0], 'block').apply([0, 1,  8, 0]), [0, 1, 11, 0])
			Assert Equals(Change().afterinsert([0, 1, 5, 0], [0, 2, 8, 0], 'block').apply([0, 1,  9, 0]), [0, 1, 12, 0])
			Assert Equals(Change().afterinsert([0, 1, 5, 0], [0, 2, 8, 0], 'block').apply([0, 2,  1, 0]), [0, 2,  1, 0])
			Assert Equals(Change().afterinsert([0, 1, 5, 0], [0, 2, 8, 0], 'block').apply([0, 2,  4, 0]), [0, 2,  4, 0])
			Assert Equals(Change().afterinsert([0, 1, 5, 0], [0, 2, 8, 0], 'block').apply([0, 2,  5, 0]), [0, 2,  8, 0])
			Assert Equals(Change().afterinsert([0, 1, 5, 0], [0, 2, 8, 0], 'block').apply([0, 2,  6, 0]), [0, 2,  9, 0])
			Assert Equals(Change().afterinsert([0, 1, 5, 0], [0, 2, 8, 0], 'block').apply([0, 2,  7, 0]), [0, 2, 10, 0])
			Assert Equals(Change().afterinsert([0, 1, 5, 0], [0, 2, 8, 0], 'block').apply([0, 2,  8, 0]), [0, 2, 11, 0])
			Assert Equals(Change().afterinsert([0, 1, 5, 0], [0, 2, 8, 0], 'block').apply([0, 2,  9, 0]), [0, 2, 12, 0])
			Assert Equals(Change().afterinsert([0, 1, 5, 0], [0, 2, 8, 0], 'block').apply([0, 3,  1, 0]), [0, 3,  1, 0])
			Assert Equals(Change().afterinsert([0, 1, 5, 0], [0, 2, 8, 0], 'block').apply([0, 3,  4, 0]), [0, 3,  4, 0])
			Assert Equals(Change().afterinsert([0, 1, 5, 0], [0, 2, 8, 0], 'block').apply([0, 3,  5, 0]), [0, 3,  5, 0])
			Assert Equals(Change().afterinsert([0, 1, 5, 0], [0, 2, 8, 0], 'block').apply([0, 3,  6, 0]), [0, 3,  6, 0])
			Assert Equals(Change().afterinsert([0, 1, 5, 0], [0, 2, 8, 0], 'block').apply([0, 3,  7, 0]), [0, 3,  7, 0])
			Assert Equals(Change().afterinsert([0, 1, 5, 0], [0, 2, 8, 0], 'block').apply([0, 3,  8, 0]), [0, 3,  8, 0])
			Assert Equals(Change().afterinsert([0, 1, 5, 0], [0, 2, 8, 0], 'block').apply([0, 3,  9, 0]), [0, 3,  9, 0])

			Assert Equals(Change().afterinsert([0, 1, 9, 0], [0, 2, 12, 0], 'block').apply([0, 1,  1, 0]), [0, 1,  1, 0])
			Assert Equals(Change().afterinsert([0, 1, 9, 0], [0, 2, 12, 0], 'block').apply([0, 1,  8, 0]), [0, 1,  8, 0])
			Assert Equals(Change().afterinsert([0, 1, 9, 0], [0, 2, 12, 0], 'block').apply([0, 1,  9, 0]), [0, 1, 12, 0])
			Assert Equals(Change().afterinsert([0, 1, 9, 0], [0, 2, 12, 0], 'block').apply([0, 2,  1, 0]), [0, 2,  1, 0])
			Assert Equals(Change().afterinsert([0, 1, 9, 0], [0, 2, 12, 0], 'block').apply([0, 2,  8, 0]), [0, 2,  8, 0])
			Assert Equals(Change().afterinsert([0, 1, 9, 0], [0, 2, 12, 0], 'block').apply([0, 2,  9, 0]), [0, 2, 12, 0])
			Assert Equals(Change().afterinsert([0, 1, 9, 0], [0, 2, 12, 0], 'block').apply([0, 3,  1, 0]), [0, 3,  1, 0])
			Assert Equals(Change().afterinsert([0, 1, 9, 0], [0, 2, 12, 0], 'block').apply([0, 3,  8, 0]), [0, 3,  8, 0])
			Assert Equals(Change().afterinsert([0, 1, 9, 0], [0, 2, 12, 0], 'block').apply([0, 3,  9, 0]), [0, 3,  9, 0])
		End

		It works as written in help
			call cursor(1, 11)
			let curpos = getpos('.')
			let bar = Region([0, 1, 5, 0], [0, 1, 7, 0], 'char')
			let change = Change()
			call change.beforedelete(bar)
			call bar.select()
			normal! cx
			call change.afterinsert(getpos("'["), getpos("']"), 'char')

			Assert Equals(getline(1), 'foo x baz')
			Assert Equals(change.apply(curpos), [0, 1, 9, 0])
			Assert Equals(curpos, [0, 1, 9, 0])
		End
	End

	Context .mapapply(poslist)
		It tracks a position after a characterwise deletion
			let input  = [[0, 1, 4, 0], [0, 1, 5, 0], [0, 1, 6, 0], [0, 1, 7, 0], [0, 1, 8, 0], [0, 1, 9, 0], [0, 2, 1, 0]]
			let output = [[0, 1, 4, 0], [0, 1, 5, 0], [0, 1, 5, 0], [0, 1, 5, 0], [0, 1, 5, 0], [0, 1, 6, 0], [0, 2, 1, 0]]
			Assert Equals(Change().beforedelete([0, 1, 5, 0], [0, 1, 7, 0], 'char').mapapply(input), output)

			let input  = [[0, 1,  8, 0], [0, 1,  9, 0], [0, 1, 10, 0], [0, 1, 11, 0], [0, 1, 12, 0], [0, 2,  1, 0], [0, 2, 12, 0]]
			let output = [[0, 1,  8, 0], [0, 1,  9, 0], [0, 1,  9, 0], [0, 1,  9, 0], [0, 1,  9, 0], [0, 1,  1, 0], [0, 1, 12, 0]]
			Assert Equals(Change().beforedelete([0, 1, 9, 0], [0, 1, 12, 0], 'char').mapapply(input), output)

			let input  = [[0, 1, 1, 0], [0, 1, 12, 0], [0, 2, 1, 0], [0, 2, 3, 0], [0, 2, 4, 0], [0, 2, 5, 0], [0, 2, 12, 0]]
			let output = [[0, 1, 1, 0], [0, 1,  1, 0], [0, 1, 1, 0], [0, 1, 1, 0], [0, 1, 1, 0], [0, 1, 2, 0], [0, 1,  9, 0]]
			Assert Equals(Change().beforedelete([0, 1, 1, 0], [0, 2, 3, 0], 'char').mapapply(input), output)

			let input  =  [[0, 1, 1, 0], [0, 1, 12, 0], [0, 2, 1, 0], [0, 2, 12, 0], [0, 3, 1, 0], [0, 3, 12, 0]]
			let output =  [[0, 1, 1, 0], [0, 1,  1, 0], [0, 1, 1, 0], [0, 1,  1, 0], [0, 1, 1, 0], [0, 1,  1, 0]]
			Assert Equals(Change().beforedelete([0, 1, 1, 0], [0, 3, 12, 0], 'char').mapapply(input), output)
		End

		It tracks a position after a linewise deletion
			let input  = [[0, 1, 1, 0], [0, 1, 12, 0], [0, 2, 1, 0], [0, 2, 12, 0], [0, 3, 1, 0], [0, 3, 2, 0], [0, 3, 12, 0]]
			let output = [[0, 1, 1, 0], [0, 1, 12, 0], [0, 2, 1, 0], [0, 2,  1, 0], [0, 2, 1, 0], [0, 2, 2, 0], [0, 2, 12, 0]]
			Assert Equals(Change().beforedelete([0, 2, 2, 0], [0, 2, 3, 0], 'line').mapapply(input), output)

			let input  = [[0, 1, 1, 0], [0, 1, 12, 0], [0, 2, 1, 0], [0, 2, 12, 0], [0, 3, 1, 0], [0, 3, 12, 0]]
			let output = [[0, 1, 1, 0], [0, 1,  1, 0], [0, 1, 1, 0], [0, 1,  1, 0], [0, 1, 1, 0], [0, 1, 12, 0]]
			Assert Equals(Change().beforedelete([0, 1, 2, 0], [0, 2, 3, 0], 'line').mapapply(input), output)

			let input  = [[0, 1, 1, 0], [0, 1, 12, 0], [0, 2, 1, 0], [0, 2, 12, 0], [0, 3, 1, 0], [0, 3, 12, 0]]
			let output = [[0, 1, 1, 0], [0, 1, 12, 0], [0, 2, 1, 0], [0, 2,  1, 0], [0, 2, 1, 0], [0, 2,  1, 0]]
			Assert Equals(Change().beforedelete([0, 2, 2, 0], [0, 3, 3, 0], 'line').mapapply(input), output)

			let input  = [[0, 1, 1, 0], [0, 1, 12, 0], [0, 2, 1, 0], [0, 2, 12, 0], [0, 3, 1, 0], [0, 3, 12, 0]]
			let output = [[0, 1, 1, 0], [0, 1,  1, 0], [0, 1, 1, 0], [0, 1,  1, 0], [0, 1, 1, 0], [0, 1,  1, 0]]
			Assert Equals(Change().beforedelete([0, 1, 1, 0], [0, 3, 12, 0], 'line').mapapply(input), output)
		End

		It tracks a position after a blockwise deletion
			let input  = [[0, 1, 4, 0], [0, 1, 5, 0], [0, 1, 6, 0], [0, 1, 7, 0], [0, 1, 8, 0], [0, 1, 9, 0], [0, 2, 1, 0]]
			let output = [[0, 1, 4, 0], [0, 1, 5, 0], [0, 1, 5, 0], [0, 1, 5, 0], [0, 1, 5, 0], [0, 1, 6, 0], [0, 2, 1, 0]]
			Assert Equals(Change().beforedelete([0, 1, 5, 0], [0, 1, 7, 0], 'block').mapapply(input), output)

			let input  = [[0, 1, 4, 0], [0, 1, 5, 0], [0, 1, 6, 0], [0, 1, 7, 0], [0, 1, 8, 0], [0, 1, 9, 0], [0, 2, 4, 0], [0, 2, 5, 0], [0, 2, 6, 0], [0, 2, 7, 0], [0, 2, 8, 0], [0, 2, 9, 0], [0, 3, 1, 0], [0, 3, 12, 0]]
			let output = [[0, 1, 4, 0], [0, 1, 5, 0], [0, 1, 5, 0], [0, 1, 5, 0], [0, 1, 5, 0], [0, 1, 6, 0], [0, 2, 4, 0], [0, 2, 5, 0], [0, 2, 5, 0], [0, 2, 5, 0], [0, 2, 5, 0], [0, 2, 6, 0], [0, 3, 1, 0], [0, 3, 12, 0]]
			Assert Equals(Change().beforedelete([0, 1, 5, 0], [0, 2, 7, 0], 'block').mapapply(input), output)

			let input  = [[0, 1, 1, 0], [0, 1, 12, 0], [0, 2, 1, 0], [0, 2, 12, 0], [0, 3, 1, 0], [0, 3, 12, 0]]
			let output = [[0, 1, 1, 0], [0, 1,  1, 0], [0, 2, 1, 0], [0, 2,  1, 0], [0, 3, 1, 0], [0, 3,  1, 0]]
			Assert Equals(Change().beforedelete([0, 1, 1, 0], [0, 3, 12, 0], 'block').mapapply(input), output)
		End

		It tracks a position after a characterwise insertion
			let input  = [[0, 1, 1, 0], [0, 1, 3, 0], [0, 1, 4, 0], [0, 1, 5, 0], [0, 2, 1, 0]]
			let output = [[0, 1, 4, 0], [0, 1, 6, 0], [0, 1, 7, 0], [0, 1, 8, 0], [0, 2, 1, 0]]
			Assert Equals(Change().afterinsert([0, 1, 1, 0], [0, 1, 4, 0], 'char').mapapply(input), output)

			let input  = [[0, 1, 4, 0], [0, 1, 5, 0], [0, 1, 6, 0], [0, 2, 1, 0]]
			let output = [[0, 1, 4, 0], [0, 1, 8, 0], [0, 1, 9, 0], [0, 2, 1, 0]]
			Assert Equals(Change().afterinsert([0, 1, 5, 0], [0, 1, 8, 0], 'char').mapapply(input), output)

			let input  = [[0, 1, 8, 0], [0, 1,  9, 0], [0, 2, 1, 0]]
			let output = [[0, 1, 8, 0], [0, 1, 12, 0], [0, 2, 1, 0]]
			Assert Equals(Change().afterinsert([0, 1, 9, 0], [0, 1, 12, 0], 'char').mapapply(input), output)

			let input  = [[0, 1, 11, 0], [0, 1, 12, 0], [0, 2, 1, 0], [0, 3, 1, 0]]
			let output = [[0, 1, 11, 0], [0, 2,  1, 0], [0, 3, 1, 0], [0, 4, 1, 0]]
			Assert Equals(Change().afterinsert([0, 1, 12, 0], [0, 2, 1, 0], 'char').mapapply(input), output)

			let input  = [[0, 1, 4, 0], [0, 1, 5, 0], [0, 1, 6, 0], [0, 1, 7, 0], [0, 2, 1, 0], [0, 3, 1, 0]]
			let output = [[0, 1, 4, 0], [0, 2, 1, 0], [0, 2, 2, 0], [0, 2, 3, 0], [0, 3, 1, 0], [0, 4, 1, 0]]
			Assert Equals(Change().afterinsert([0, 1, 5, 0], [0, 2, 1, 0], 'char').mapapply(input), output)

			let input  = [[0, 1, 4, 0], [0, 1, 5, 0], [0, 1, 6, 0], [0, 2, 3, 0]]
			let output = [[0, 1, 4, 0], [0, 2, 3, 0], [0, 2, 4, 0], [0, 3, 3, 0]]
			Assert Equals(Change().afterinsert([0, 1, 5, 0], [0, 2, 3, 0], 'char').mapapply(input), output)
		End

		It tracks a position after a linewise insertion
			let input  = [[0, 1, 1, 0], [0, 1, 12, 0], [0, 2, 1, 0], [0, 2, 12, 0], [0, 3, 1, 0], [0, 3, 12, 0]]
			let output = [[0, 2, 1, 0], [0, 2, 12, 0], [0, 3, 1, 0], [0, 3, 12, 0], [0, 4, 1, 0], [0, 4, 12, 0]]
			Assert Equals(Change().afterinsert([0, 1, 1, 0], [0, 1, 1, 0], 'line').mapapply(input), output)

			let input  = [[0, 1, 1, 0], [0, 1, 12, 0], [0, 2, 1, 0], [0, 2, 12, 0], [0, 3, 1, 0], [0, 3, 12, 0]]
			let output = [[0, 3, 1, 0], [0, 3, 12, 0], [0, 4, 1, 0], [0, 4, 12, 0], [0, 5, 1, 0], [0, 5, 12, 0]]
			Assert Equals(Change().afterinsert([0, 1, 1, 0], [0, 2, 1, 0], 'line').mapapply(input), output)
		End

		It tracks a position after a blockwise insertion
			let input  = [[0, 1, 1, 0], [0, 1, 3, 0], [0, 1, 4, 0], [0, 1, 5, 0], [0, 2, 1, 0]]
			let output = [[0, 1, 4, 0], [0, 1, 6, 0], [0, 1, 7, 0], [0, 1, 8, 0], [0, 2, 1, 0]]
			Assert Equals(Change().afterinsert([0, 1, 1, 0], [0, 1, 4, 0], 'block').mapapply(input), output)

			let input  = [[0, 1, 4, 0], [0, 1, 5, 0], [0, 1, 6, 0], [0, 2, 1, 0]]
			let output = [[0, 1, 4, 0], [0, 1, 8, 0], [0, 1, 9, 0], [0, 2, 1, 0]]
			Assert Equals(Change().afterinsert([0, 1, 5, 0], [0, 1, 8, 0], 'block').mapapply(input), output)

			let input  = [[0, 1, 8, 0], [0, 1,  9, 0], [0, 2, 1, 0]]
			let output = [[0, 1, 8, 0], [0, 1, 12, 0], [0, 2, 1, 0]]
			Assert Equals(Change().afterinsert([0, 1, 9, 0], [0, 1, 12, 0], 'block').mapapply(input), output)

			let input  = [[0, 1, 1, 0], [0, 1, 2, 0], [0, 2, 1, 0], [0, 2, 2, 0], [0, 3, 1, 0], [0, 3, 2, 0]]
			let output = [[0, 1, 4, 0], [0, 1, 5, 0], [0, 2, 4, 0], [0, 2, 5, 0], [0, 3, 1, 0], [0, 3, 2, 0]]
			Assert Equals(Change().afterinsert([0, 1, 1, 0], [0, 2, 4, 0], 'block').mapapply(input), output)

			let input  = [[0, 1, 1, 0], [0, 1, 4, 0], [0, 1, 5, 0], [0, 1, 6, 0], [0, 1,  7, 0], [0, 1,  8, 0], [0, 1,  9, 0], [0, 2, 1, 0], [0, 2, 4, 0], [0, 2, 5, 0], [0, 2, 6, 0], [0, 2,  7, 0], [0, 2,  8, 0], [0, 2,  9, 0], [0, 3, 1, 0], [0, 3, 4, 0], [0, 3, 5, 0], [0, 3, 6, 0], [0, 3, 7, 0], [0, 3, 8, 0], [0, 3, 9, 0]]
			let output = [[0, 1, 1, 0], [0, 1, 4, 0], [0, 1, 8, 0], [0, 1, 9, 0], [0, 1, 10, 0], [0, 1, 11, 0], [0, 1, 12, 0], [0, 2, 1, 0], [0, 2, 4, 0], [0, 2, 8, 0], [0, 2, 9, 0], [0, 2, 10, 0], [0, 2, 11, 0], [0, 2, 12, 0], [0, 3, 1, 0], [0, 3, 4, 0], [0, 3, 5, 0], [0, 3, 6, 0], [0, 3, 7, 0], [0, 3, 8, 0], [0, 3, 9, 0]]
			Assert Equals(Change().afterinsert([0, 1, 5, 0], [0, 2, 8, 0], 'block').mapapply(input), output)

			let input  = [[0, 1, 1, 0], [0, 1, 8, 0], [0, 1,  9, 0], [0, 2, 1, 0], [0, 2, 8, 0], [0, 2,  9, 0], [0, 3, 1, 0], [0, 3, 8, 0], [0, 3, 9, 0]]
			let output = [[0, 1, 1, 0], [0, 1, 8, 0], [0, 1, 12, 0], [0, 2, 1, 0], [0, 2, 8, 0], [0, 2, 12, 0], [0, 3, 1, 0], [0, 3, 8, 0], [0, 3, 9, 0]]
			Assert Equals(Change().afterinsert([0, 1, 9, 0], [0, 2, 12, 0], 'block').mapapply(input), output)
		End
	End
End

" vim:set noet ts=4 sw=4 sts=-1:
