Describe TimerTask
	Before
		let Schedule = multiselect#Schedule#_import()
		let TimerTask = Schedule.TimerTask
	End

	Context .trigger()
		It triggers all registered functions and commands
			let g:count = 0

			let timertask = TimerTask()
			call timertask.execute('let g:count += 1').trigger()
			Assert Equals(g:count, 1)
			call timertask.stop()

			let timertask = TimerTask()
			call timertask.execute('let g:count += 1').execute('let g:count += 2').trigger()
			Assert Equals(g:count, 4)
			call timertask.stop()

			unlet! g:count
		End

		It is skipped if skipcount is set
			let g:count = 0

			let timertask = TimerTask()
			call timertask.execute('let g:count += 1').trigger()
			Assert Equals(g:count, 1)
			call timertask.stop()

			let timertask = TimerTask()
			call timertask.execute('let g:count += 1').skip(1)
			call timertask.trigger()
			Assert Equals(g:count, 1)
			call timertask.trigger()
			Assert Equals(g:count, 2)
			call timertask.stop()

			unlet! g:count
		End

		It is repeated n-times given by .repeat()
			let g:count = 0
			let timertask = TimerTask()
			call timertask.execute('let g:count += 1')

			call timertask.repeat(1)
			Assert Equals(timertask.leftcount(), 1)
			Assert False(timertask.hasdone())
			call timertask.trigger()
			Assert Equals(timertask.leftcount(), 0)
			Assert True(timertask.hasdone())

			call timertask.repeat(3)
			Assert Equals(timertask.leftcount(), 3)
			Assert False(timertask.hasdone())
			call timertask.trigger() " first
			Assert Equals(timertask.leftcount(), 2)
			Assert False(timertask.hasdone())
			call timertask.trigger() " second
			Assert Equals(timertask.leftcount(), 1)
			Assert False(timertask.hasdone())
			call timertask.trigger() " third
			Assert Equals(timertask.leftcount(), 0)
			Assert True(timertask.hasdone())

			unlet! g:count
			call timertask.stop()
		End
	End

	Context class
		It is triggered by a delay time
			let g:count = 0
			let timertask = TimerTask()

			call timertask.execute('let g:count = 1')
			Assert Equals(g:count, 0)

			call timertask.start(500)
			Assert Equals(g:count, 0)

			sleep 600m
			Assert Equals(g:count, 1)
			Assert True(timertask.hasdone())

			call timertask.stop()
		End
	End
End

" vim:set noet ts=4 sw=4 sts=-1:
