Describe Task
	Context instance
		Before
			let Schedule = vital#multiselect#new().import('Schedule').augroup('multiselect')
			let Task = Schedule.Task
		End

		It is triggered by any one of given triggers
		let g:count = 0
		let task = Task()

		call task.execute('let g:count += 1').repeat(3).skip(1)

		Assert False(exists('#multiselect#WinEnter'))
		Assert False(exists('#multiselect#WinLeave'))
		call task.waitfor(['WinEnter', ['WinLeave', '*'], 100])
		Assert True(exists('#multiselect#WinEnter'))
		Assert True(exists('#multiselect#WinLeave'))

		" To check if the timer is appropriately abandoned later
		let id = task._getid()

		doautocmd <nomodeline> multiselect WinEnter
		Assert Equals(g:count, 0)

		doautocmd <nomodeline> multiselect WinEnter
		Assert Equals(g:count, 1)

		doautocmd <nomodeline> multiselect WinLeave
		Assert Equals(g:count, 2)

		sleep 110m
		Assert Equals(g:count, 3)
		Assert True(task.hasdone())
		Assert Empty(timer_info(id))

		doautocmd <nomodeline> multiselect WinEnter
		Assert Equals(g:count, 3)
		Assert False(exists('#multiselect#WinEnter'))
		Assert False(exists('#multiselect#WinLeave'))

		unlet! g:count
		call task.cancel()
		End
	End
End

" vim:set noet ts=4 sw=4 sts=-1:
